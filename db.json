{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/assets/icons/android-chrome-192x192.png","path":"assets/icons/android-chrome-192x192.png","modified":0,"renderable":0},{"_id":"source/assets/icons/android-chrome-512x512.png","path":"assets/icons/android-chrome-512x512.png","modified":0,"renderable":0},{"_id":"source/assets/icons/apple-touch-icon.png","path":"assets/icons/apple-touch-icon.png","modified":0,"renderable":0},{"_id":"source/assets/icons/favicon-16x16.png","path":"assets/icons/favicon-16x16.png","modified":0,"renderable":0},{"_id":"source/assets/icons/favicon-32x32.png","path":"assets/icons/favicon-32x32.png","modified":0,"renderable":0},{"_id":"source/assets/icons/favicon.ico","path":"assets/icons/favicon.ico","modified":0,"renderable":0},{"_id":"source/assets/icons/logo-64.png","path":"assets/icons/logo-64.png","modified":0,"renderable":0},{"_id":"source/assets/icons/logo-blue-short.png","path":"assets/icons/logo-blue-short.png","modified":0,"renderable":0},{"_id":"source/assets/icons/logo-blue.png","path":"assets/icons/logo-blue.png","modified":0,"renderable":0},{"_id":"source/assets/icons/logo-green-short.png","path":"assets/icons/logo-green-short.png","modified":0,"renderable":0},{"_id":"source/assets/icons/logo-green.png","path":"assets/icons/logo-green.png","modified":0,"renderable":0},{"_id":"source/assets/icons/logo.ai","path":"assets/icons/logo.ai","modified":0,"renderable":0},{"_id":"source/assets/icons/logo.png","path":"assets/icons/logo.png","modified":0,"renderable":0},{"_id":"source/assets/icons/logo.psd","path":"assets/icons/logo.psd","modified":0,"renderable":0},{"_id":"source/assets/icons/site.webmanifest","path":"assets/icons/site.webmanifest","modified":0,"renderable":0},{"_id":"source/assets/svgs/2016/right-view-of-binarytree.svg","path":"assets/svgs/2016/right-view-of-binarytree.svg","modified":0,"renderable":0},{"_id":"source/assets/svgs/2016/breadth-first-traversal.svg","path":"assets/svgs/2016/breadth-first-traversal.svg","modified":0,"renderable":0},{"_id":"source/assets/svgs/2016/top-view-of-binarytree.svg","path":"assets/svgs/2016/top-view-of-binarytree.svg","modified":0,"renderable":0},{"_id":"source/assets/svgs/icons/icon-light-blue.svg","path":"assets/svgs/icons/icon-light-blue.svg","modified":0,"renderable":0},{"_id":"source/assets/svgs/icons/icon-dark-blue.svg","path":"assets/svgs/icons/icon-dark-blue.svg","modified":0,"renderable":0},{"_id":"source/assets/svgs/icons/icon-nano.svg","path":"assets/svgs/icons/icon-nano.svg","modified":0,"renderable":0},{"_id":"source/assets/svgs/icons/icon-micro.svg","path":"assets/svgs/icons/icon-micro.svg","modified":0,"renderable":0},{"_id":"source/assets/svgs/icons/icon-short-blue.svg","path":"assets/svgs/icons/icon-short-blue.svg","modified":0,"renderable":0},{"_id":"source/assets/svgs/icons/icon-short-black.svg","path":"assets/svgs/icons/icon-short-black.svg","modified":0,"renderable":0},{"_id":"source/assets/svgs/icons/icon-short-lean-black-no-text.svg","path":"assets/svgs/icons/icon-short-lean-black-no-text.svg","modified":0,"renderable":0},{"_id":"source/assets/svgs/icons/icon-short-lean-blue-bg.svg","path":"assets/svgs/icons/icon-short-lean-blue-bg.svg","modified":0,"renderable":0},{"_id":"source/assets/svgs/icons/icon-short-no-text.svg","path":"assets/svgs/icons/icon-short-no-text.svg","modified":0,"renderable":0},{"_id":"source/assets/svgs/2021/01/mirror-copies-not-matching.svg","path":"assets/svgs/2021/01/mirror-copies-not-matching.svg","modified":0,"renderable":0},{"_id":"source/assets/svgs/2021/01/non-symmetric-binary-tree-examples.svg","path":"assets/svgs/2021/01/non-symmetric-binary-tree-examples.svg","modified":0,"renderable":0},{"_id":"source/assets/svgs/2021/01/read-s3-files-using-opencsv-algorithm.svg","path":"assets/svgs/2021/01/read-s3-files-using-opencsv-algorithm.svg","modified":0,"renderable":0},{"_id":"source/assets/svgs/2021/01/symmetric-binary-tree-examples.svg","path":"assets/svgs/2021/01/symmetric-binary-tree-examples.svg","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"source/assets/svgs/2016/breadth-first-traversal-2.svg","path":"assets/svgs/2016/breadth-first-traversal-2.svg","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_drafts/2021/flatten-binary-tree-to-linked-list","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1611540579914},{"_id":"source/.DS_Store","hash":"4e435d6781d075f84b5aca3f8cd327987b86d791","modified":1589047348506},{"_id":"source/app.yaml","hash":"8a556913d9632aa6993233c333d7a613744783cd","modified":1589051590773},{"_id":"source/favicon.ico","hash":"5dda187def7a492cc4b659e4f671a9f82c78e7d7","modified":1589045710470},{"_id":"source/robots.txt","hash":"c87003668ea52a5fa648d3d4f74f7c122ab33c21","modified":1589045710470},{"_id":"source/css/mystyles.css","hash":"f8a216343068753a1644b43e5b4bf89464e8bdf7","modified":1589057855457},{"_id":"source/about/index.md","hash":"f9a6dbbe7301321438c0c8e37f38314b22738f72","modified":1611623064008},{"_id":"source/assets/.DS_Store","hash":"4ba0e9bd311f19868fb33175430a609f39425f80","modified":1611863492001},{"_id":"source/tags/index.md","hash":"c57d940e3f5d249e119b9202aaad5c3558d42866","modified":1611902357424},{"_id":"source/assets/icons/android-chrome-192x192.png","hash":"0ee9b9e35d5ecae4fd66d5468e008862ba78b6c2","modified":1611814600000},{"_id":"source/assets/svgs/.DS_Store","hash":"90f013421afc84d0bfcae8c1aae812652d8e99ea","modified":1611863582285},{"_id":"source/assets/icons/android-chrome-512x512.png","hash":"a7b4e6b0c57af8927484d90a2c9447ee042333b9","modified":1611814600000},{"_id":"source/assets/icons/apple-touch-icon.png","hash":"e8ea3588f924f308e63801203a303fd3155b0a3e","modified":1611814600000},{"_id":"source/assets/icons/favicon-16x16.png","hash":"1da95ee24e57a333c2ca1747e24290686788d5ac","modified":1611814600000},{"_id":"source/assets/icons/favicon-32x32.png","hash":"5eefe83ed9153f1ccb7380c78723ed7a5f9affda","modified":1611814600000},{"_id":"source/assets/icons/logo-64.png","hash":"50c3bd9ee3f47c4c07ac584cf887759078ab230c","modified":1589045710458},{"_id":"source/assets/icons/favicon.ico","hash":"8576a6f8df519bb69763109a91dd11b7fbfc09d3","modified":1611814600000},{"_id":"source/assets/icons/logo-blue-short.png","hash":"ca6fc226e8551310b67785def22cfd6a2d29837a","modified":1589045710458},{"_id":"source/assets/icons/logo-blue.png","hash":"b9a634fa2f95b6510ccfc0973f75c4a754e26e71","modified":1589045710458},{"_id":"source/assets/icons/logo-green-short.png","hash":"dbd857a04a5f3e9f8d89757173973fe7651bdf38","modified":1589045710459},{"_id":"source/assets/icons/logo.png","hash":"8f9638efcfa4552583fc9e67eaef88a70433953c","modified":1589045710460},{"_id":"source/assets/icons/logo-green.png","hash":"699bd26a92d9931fb95de4a359fb5719c94ee609","modified":1589045710459},{"_id":"source/_drafts/2021/01/how-to-check-if-binary-tree-is-symmetric-or-not.md","hash":"2b0ed377b657c0054d642e78505f17fcbf7dd8e3","modified":1611876797001},{"_id":"source/assets/icons/site.webmanifest","hash":"bf31baf91bdd2fcde24a45e3f2a1be33733c6f69","modified":1611814600000},{"_id":"source/_posts/2016/04/restricting-ojinputtext-for-numericals.md","hash":"026d227964f4a255d5238db31c887116118b5571","modified":1611195070561},{"_id":"source/_posts/2016/04/disable-dynadmin-auth-dev-env-oracle-commerce.md","hash":"71f6fb50515d62dab73a2dfcd3696f7453523441","modified":1589045710449},{"_id":"source/_posts/2016/04/solving-jam-coins.md","hash":"c93be89edfa858ea5afc3d8cc0ff60614a0a264d","modified":1611969841592},{"_id":"source/_posts/2016/03/hello-world-for-oracle-commerce.md","hash":"41d259798caf785e6734b5d7f38757ef2feb73c4","modified":1611194526320},{"_id":"source/_posts/2016/05/non-recursive-breadth-first-traversal-binary-tree.md","hash":"b3e7b6cc1ec1b30a65d2e099fe60f244383f76e4","modified":1640502476498},{"_id":"source/_posts/2016/03/patch-utility-for-perforce.md","hash":"a46562ccaf7750c7d47c44c2b50ff07418f101af","modified":1611880926979},{"_id":"source/_posts/2016/07/nice-tool-for-algorithm-and-datastructure-visualisation.md","hash":"fe4c7b4fadb335a8d03124fe7cbf9cf506b9cb96","modified":1611863962600},{"_id":"source/_posts/2016/06/collapsible-panel-in-oracle-jet.md","hash":"0a81c90ef2499c126065e03e1615c8f631c0569e","modified":1611970526066},{"_id":"source/_posts/2018/04/creating-alexa-skill-with-java-aws-lambda.md","hash":"e8d7f2755ee2a7d0f8e1277bfdf1f509613bc8a7","modified":1611970223584},{"_id":"source/_posts/2016/07/top-view-of-binarytree-without-recursion.md","hash":"c52ffc2be98f770408cbbe07ff79a6eca4dff349","modified":1611970322972},{"_id":"source/_posts/2020/05/a-definitive-guide-to-aws-application-integration.md","hash":"0993c9b6b04e694097bc21949803125e8e990d21","modified":1589058895587},{"_id":"source/_posts/2016/07/right-view-of-binarytree-without-recursion.md","hash":"3cc6c523fc347a1ad209f206597f79cede17830a","modified":1611970263717},{"_id":"source/_posts/2020/06/expiring-localstorage-objects.md","hash":"d1e18b443ea64242494d8e90f2d723b8642f1ba0","modified":1611970139553},{"_id":"source/_posts/2021/01/writing-csv-files-from-s3-using-opencsv.md","hash":"7333587c89daa7a2fc37184fb8b15f0da2ee8628","modified":1611969942310},{"_id":"source/assets/svgs/2016/right-view-of-binarytree.svg","hash":"ea25fab5eba5588cae034d231514502d918abc03","modified":1611863730884},{"_id":"source/_posts/2021/01/reading-csv-files-from-s3-using-opencsv.md","hash":"060743d6df436de28e86a9021010738106577669","modified":1611969957672},{"_id":"source/assets/svgs/2016/breadth-first-traversal.svg","hash":"e25d2d1502ab2cb508bb72b53334cf21dcf0d66a","modified":1611878737276},{"_id":"source/assets/svgs/icons/icon-light-blue.svg","hash":"816942715eecd933d7ca0d585f656d72bc675f97","modified":1611620880989},{"_id":"source/assets/svgs/2016/top-view-of-binarytree.svg","hash":"25ed811733a2d43fcd27ffb16d22692f3ef8abee","modified":1611863565672},{"_id":"source/assets/svgs/icons/icon-dark-blue.svg","hash":"ed62a61fd1e187339f5e0e7ac091a55664e1c539","modified":1611621347244},{"_id":"source/assets/svgs/icons/icon-nano.svg","hash":"fa9da06f7ce10fb1b9f9cfa7d740ad733cc1f526","modified":1611622650395},{"_id":"source/assets/svgs/icons/icon-micro.svg","hash":"3b5911c599aa457801191a7216de8125522f69f2","modified":1611622575950},{"_id":"source/assets/svgs/icons/icon-short-black.svg","hash":"5ae97f977c95300d5b790b43bbbfc79b3d1b66f5","modified":1611621710792},{"_id":"source/assets/svgs/icons/icon-short-lean-black-no-text.svg","hash":"67288da3050ea3572625dfc252d979a196d40443","modified":1611621788212},{"_id":"source/assets/svgs/icons/icon-short-blue.svg","hash":"2f9b3f8f65ed7b9c5fe6142ba2d33d7fd17e087a","modified":1611621680372},{"_id":"source/assets/svgs/icons/icon-short-no-text.svg","hash":"6e4554e3d950e92bfc495ea0f5132661280667db","modified":1611621741043},{"_id":"source/assets/svgs/icons/icon-short-lean-blue-bg.svg","hash":"54864542a63ff290c457da3261742ba5e68814c7","modified":1611621869372},{"_id":"source/assets/svgs/2021/01/mirror-copies-not-matching.svg","hash":"7d9d01078b75f648e89cc47be4d39164450e3851","modified":1611477717769},{"_id":"source/assets/svgs/2021/01/non-symmetric-binary-tree-examples.svg","hash":"648f103b3e1c5421fa6b3407d5e87a2a527d93d4","modified":1611476947348},{"_id":"source/assets/svgs/2021/01/symmetric-binary-tree-examples.svg","hash":"9e162ba74a5bb97c92812d35eb0533c60193e5dc","modified":1611476444810},{"_id":"source/assets/svgs/2021/01/read-s3-files-using-opencsv-algorithm.svg","hash":"913ed8ad3f9aae8a650e33d712501b8756a36277","modified":1611104654637},{"_id":"source/assets/icons/logo.ai","hash":"dd07244f2ce823119c0847f35cc99216441025f7","modified":1589045710460},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1611877079772},{"_id":"themes/next/.gitignore","hash":"4600f2b61b2fe0d61f824bda9aa2b5d072f0e635","modified":1611877079780},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1611877079772},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1611877079771},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1611877079780},{"_id":"themes/next/_vendors.yml","hash":"d07d885e59ac5f0a56495c01a305ebe016431d53","modified":1611877079782},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1611877079780},{"_id":"themes/next/README.md","hash":"de109b73e09826f6bccceae60c618739a794f8f7","modified":1611877079781},{"_id":"themes/next/package.json","hash":"44f7ceb75f36ab8bd014f10d6f767c7f7a7759f3","modified":1611906760359},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1611877079824},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1611877079782},{"_id":"themes/next/_config.yml","hash":"874583c9d71fc97b1ab1903ff23c47ecc77693ba","modified":1611906760357},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"21cbff565a0445d3a880fff1ee417e309740a9ab","modified":1611877079773},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3e9fbb78e3dee0ca1dc886d0c28b0148ba0ca499","modified":1611877079775},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1611877079776},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"eefd073dfb68884cd946f7ec6d3b3619031d7650","modified":1611877079773},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1611877079776},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1611877079776},{"_id":"themes/next/.github/release-drafter.yml","hash":"7662e31224a24154c4fe06b95ccbdff51ab8f2cc","modified":1611877079777},{"_id":"themes/next/.github/labeler.yml","hash":"e7033752b1f7c35adb61c2b38aad0a9202cdd19b","modified":1611877079777},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1611877079783},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1611877079783},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1611877079786},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1611877079783},{"_id":"themes/next/languages/de.yml","hash":"dc448f724c7d436233e9567711a09e0d56e60e3b","modified":1611877079786},{"_id":"themes/next/languages/ar.yml","hash":"7a62243ec54196e3d1bea7364f05aded490bc234","modified":1611877079786},{"_id":"themes/next/languages/default.yml","hash":"48a76170d70ef7c1fac96720bc5064b43061708d","modified":1611877079787},{"_id":"themes/next/languages/en.yml","hash":"48a76170d70ef7c1fac96720bc5064b43061708d","modified":1611877079787},{"_id":"themes/next/languages/es.yml","hash":"c3506dfaa771e827ae6adb322477c6e835cd0f09","modified":1611877079787},{"_id":"themes/next/languages/fa.yml","hash":"649823297167b902455c0aec8ddebb462df71c7d","modified":1611877079787},{"_id":"themes/next/languages/id.yml","hash":"ac018805190bc4bdc06091f5a6444e612fc700b0","modified":1611877079788},{"_id":"themes/next/languages/it.yml","hash":"82a93c32b3fcf6517441cdc73f75bc6173beb392","modified":1611877079788},{"_id":"themes/next/languages/fr.yml","hash":"8ddfe98e7847ee8f1eaba9119f9fbdc42d7ec120","modified":1611877079788},{"_id":"themes/next/languages/ja.yml","hash":"99f6f84f5cb6631b7ae0b5594af2ea2940c3558e","modified":1611877079789},{"_id":"themes/next/languages/pt-BR.yml","hash":"47daeaa23c4db073e77761c9a6f62d3932af06ec","modified":1611877079789},{"_id":"themes/next/languages/nl.yml","hash":"0d3b56613197cb190900311507535db41daec7d4","modified":1611877079789},{"_id":"themes/next/languages/ko.yml","hash":"8342df2f4190ba4ee004b70d1d6ccd341033dbe7","modified":1611877079789},{"_id":"themes/next/languages/ru.yml","hash":"fdf5c623890db24cb56ab5ffe0c49db3542477c8","modified":1611877079790},{"_id":"themes/next/languages/si.yml","hash":"0afecef3d81b880cc19769062968d8562a1cd93b","modified":1611877079791},{"_id":"themes/next/languages/tr.yml","hash":"54de3d8d85e3c7b14b163c3d322411b7301a09b3","modified":1611877079791},{"_id":"themes/next/languages/pt.yml","hash":"e0e2675261e2e80f7ce7d19c945c08217b068d81","modified":1611877079790},{"_id":"themes/next/languages/uk.yml","hash":"1c9a0b8d8160c77cc62064207d57f460f365cae9","modified":1611877079791},{"_id":"themes/next/languages/vi.yml","hash":"1f9657b58e11db21f93eb895c90123b8f91751a7","modified":1611877079792},{"_id":"themes/next/languages/zh-CN.yml","hash":"6f7c742316c96d5b71da50fddfb060ff7ec1ea99","modified":1611877079792},{"_id":"themes/next/languages/zh-HK.yml","hash":"38b99be8cea1cfd79f36deca13be665dedfad9c5","modified":1611877079793},{"_id":"themes/next/layout/_layout.njk","hash":"6915e19058b4b4e2b71707cb5ac6c936ef075e89","modified":1611877079794},{"_id":"themes/next/languages/zh-TW.yml","hash":"8d6f8d90aedcc5c844da93e196bfde0c0161385b","modified":1611877079793},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1611877079821},{"_id":"themes/next/layout/category.njk","hash":"0a590e87af50e57b15fc37695c9a3bf4a97c3d92","modified":1611877079821},{"_id":"themes/next/layout/index.njk","hash":"37ec3d1bcd20b8ac1d18e0d68f990450890b46cd","modified":1611877079822},{"_id":"themes/next/layout/page.njk","hash":"9cd3eca2c468bb46c7c5bf391bea4b025af178f6","modified":1611877079823},{"_id":"themes/next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1611877079823},{"_id":"themes/next/layout/tag.njk","hash":"6cd707f846bfd6becbcfb060c26958bb4015c31f","modified":1611877079823},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"fc4dce84ed9a5d21d3a8833ff6d776c46f876115","modified":1611877079773},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4ecac91716eac59d7c2bc53cf6e95612d44da97b","modified":1611877079774},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1611877079774},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1611877079900},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"8cc5b5c116f6a052865a324512362f145d699202","modified":1611877079775},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"8b73c439dc796be141d521a4546bcfb7a5485534","modified":1611877079778},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"a33cd7c7644c8e89c885545ddafc437274ff64ff","modified":1611877079777},{"_id":"themes/next/.github/workflows/lock.yml","hash":"70bd0be3f33774e4b0ada3a59c901f8f9cff1013","modified":1611877079778},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"4f3af81009cb922be91f718a67425377515ea69d","modified":1611877079779},{"_id":"themes/next/.github/workflows/linter.yml","hash":"a3019edd2185c4c287a682fdd76043e107ed927b","modified":1611877079778},{"_id":"themes/next/.github/workflows/stale.yml","hash":"e1d9cc9addc35cfb53f971f14d9d04065c941df0","modified":1611877079779},{"_id":"themes/next/.github/workflows/tester.yml","hash":"7e01aae101be8726f869efbb29ba9ef9ad569cd1","modified":1611877079779},{"_id":"themes/next/docs/ru/README.md","hash":"63df0665005063108e1bc19df3cf8c4e46facb95","modified":1611877079784},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1611877079784},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"8ee5ca39ac4a372a5c0f16e344bbe578af4aeae4","modified":1611877079785},{"_id":"themes/next/docs/zh-CN/README.md","hash":"9abd8473985f2bf1557b1aac31b436c92d5450a7","modified":1611877079785},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1611877079794},{"_id":"themes/next/layout/_macro/post.njk","hash":"b106599106285ecd4c0c1e0ed11c46a36b5a69d5","modified":1611877079795},{"_id":"themes/next/layout/_partials/comments.njk","hash":"334e8d8117a46c8c097788811322a62627952219","modified":1611877079795},{"_id":"themes/next/layout/_partials/footer.njk","hash":"d16fdaf94d66efc0242b0c26ed539017e3b4f795","modified":1611877079796},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"cbf838ca59646f128c9111bb28921c1d04d8dcaf","modified":1611906713071},{"_id":"themes/next/layout/_partials/languages.njk","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1611877079799},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1611877079801},{"_id":"themes/next/layout/_scripts/noscript.njk","hash":"4f250d0bf80be06dd2c95c1d4c2ba2624b59cf2a","modified":1611877079807},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6f0433940680c0f9db37542ca36f76e4bb1c1d50","modified":1611877079806},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"dfd91d64ebc06b5b139ee97424f4f93e66938e34","modified":1611877079806},{"_id":"themes/next/layout/_scripts/pjax.njk","hash":"28a3bcb1ce50924a5a48b0f3756ac3a8736867f1","modified":1611877079807},{"_id":"themes/next/layout/_third-party/nprogress.njk","hash":"271139c3896a6d294f46f767cb21b2e848050841","modified":1611877079815},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"bada07da2a47ed6de6081796367b19dd9e906cfb","modified":1611877079807},{"_id":"themes/next/layout/_third-party/index.njk","hash":"467b45a4912369bcba77908151e76a3f3ad0fed2","modified":1611877079814},{"_id":"themes/next/scripts/events/index.js","hash":"89091bc943cd8b8c63b8af3d26fb0a027048e9ba","modified":1611877079825},{"_id":"themes/next/scripts/filters/locals.js","hash":"fa1e558f058f93455acdd553ab1be30b26f137e4","modified":1611877079833},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1611877079832},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"294b7f6a4fa566e369d8be0ce7b28f35b6c14563","modified":1611877079816},{"_id":"themes/next/scripts/filters/post.js","hash":"bac5646993153f9f6a630c9f0052bb17fa760a9c","modified":1611877079834},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1611877079816},{"_id":"themes/next/scripts/helpers/engine.js","hash":"819fc2707070b5ddbbb042986da25f4bcbe93a17","modified":1611877079834},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1611877079835},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"413c51fa3caa87fe95d1d8f95e6023f096515632","modified":1611877079835},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"577c510374cf9bcfa8d3a1027e42411a9324805e","modified":1611877079836},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1611877079836},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1611877079837},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1611877079837},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1611877079837},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"79102d9e9bccff6224e77a77c4d2d363094ae3df","modified":1611877079838},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1611877079838},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1611877079839},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"9e2c58d1a4d1dd84fa86144e5b4576b2fd10a37f","modified":1611877079839},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"464effc08e757ce8e1bb094707d06ad829af9d62","modified":1611877079840},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1611877079840},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1611877079840},{"_id":"themes/next/scripts/tags/tabs.js","hash":"2bf00d56b3b289a7dd27e9b5820430a2457a19f3","modified":1611877079841},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1611877079841},{"_id":"themes/next/scripts/filters/minify.js","hash":"be0574c64a38210e449c99d38a760452015060a3","modified":1611877079833},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1611877079899},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1611877079899},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1611877079900},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1611877079901},{"_id":"themes/next/test/helpers/next-url.js","hash":"abc4ee5149df6172b2c36b6e85d1993ec748ddea","modified":1611877079899},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1611877079900},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1611877079901},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1611877079902},{"_id":"themes/next/test/tags/group-pictures.js","hash":"f41640e5d0f552c0b0c4ac8876a2edb0fcf54e56","modified":1611877079901},{"_id":"themes/next/test/tags/link-grid.js","hash":"88ec69e4dc1d493d21254ed9296a2514e91f0f8b","modified":1611877079902},{"_id":"themes/next/test/tags/mermaid.js","hash":"ed5b5a70ee49842501c952c4d62483f1fc8eba6b","modified":1611877079902},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1611877079903},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1611877079904},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1611877079903},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1611877079903},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1611877079904},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1611877079890},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1611877079891},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1611877079890},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1611877079892},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1611877079891},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1611877079893},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1611877079892},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1611877079893},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1611877079893},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1611877079894},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1611877079894},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1611877079895},{"_id":"themes/next/source/css/_colors.styl","hash":"b37f9847d2f95632e911df670b51921a7d748068","modified":1611877079842},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1611877079894},{"_id":"themes/next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1611877079889},{"_id":"themes/next/source/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":1611877079896},{"_id":"themes/next/source/js/algolia-search.js","hash":"a360423984cdd915d04365c51bcab440e52d7223","modified":1611877079895},{"_id":"themes/next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1611877079896},{"_id":"themes/next/source/js/next-boot.js","hash":"c2a04055d8edec03dc74e1c45d83bd3b51467de0","modified":1611877079897},{"_id":"themes/next/source/js/local-search.js","hash":"da2051e7cab184ae4aa64457c5db7476b4645fdc","modified":1611877079896},{"_id":"themes/next/source/css/_mixins.styl","hash":"6bca0a5dc96fea392a0da53e0566ec2a113ec382","modified":1611877079878},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"37bdf020591feb0cf72327c9efd755bf78a0afd6","modified":1611877079796},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"8f6521714044676e15d924da387b2aef45fc8fe6","modified":1611877079797},{"_id":"themes/next/source/js/utils.js","hash":"97cb0ac75f354119caf75365456ae1806be1c0c9","modified":1611877079898},{"_id":"themes/next/source/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":1611877079897},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"ffb6c69a9c90793cbe9bf0544b55f7a41c016d8f","modified":1611877079797},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":1611877079798},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":1611877079798},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":1611877079799},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":1611877079798},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":1611877079799},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1611877079800},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"9d650333160ad1977fe42d9770869ff1660a95fe","modified":1611877079800},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1611877079800},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1611877079801},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1611877079802},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1611877079802},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1611877079802},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"1410fad73e0a08a45166e4a055ba150fd06e8636","modified":1611877079803},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1611877079803},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"a9bb52d0537d27cfe670d80e716da6780786ab8a","modified":1611877079804},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1611877079804},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1611877079804},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1611877079805},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1611877079808},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"c419158e19805e2db614a5f5651e3e534e4a5e4e","modified":1611877079805},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":1611877079808},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"ad197fd728dd7ac90f910fdf80ce848eab3ff187","modified":1611877079809},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"2d36a481a70d5f450f1f166dc556ac1218b18537","modified":1611877079810},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1611877079809},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1611877079810},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"5c2cd9b6f02bcb6248d3f18638a58e329fe8c0d1","modified":1611877079811},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"cc1450d62d76e59968bdd25836694b8339207384","modified":1611877079811},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1611877079810},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"c1ccd5ec907dffc2b4aeec81b0762ea1cc0d4505","modified":1611877079812},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"c1bf0753fc4bc5f21d61eaffbcc915a462c7d830","modified":1611877079812},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"6252b0353c6a36d03c68ebec1073293442221bd1","modified":1611877079813},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"54eab4840443262432ec7c47e56e9859ace2a902","modified":1611877079812},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"7a07bbfb09ddf70b919f0ebe1b00942c96152389","modified":1611877079813},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"b6746dfad32cc8a46ff8f4194a7a16ca41744803","modified":1611877079815},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"47a982aec8830c2f9711b2aff59ff83f09deb09e","modified":1611877079814},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"f4fd63b9f9230dadd1190f79d59313751925ed90","modified":1611877079815},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"97035261aa85c7d39c6ce1211cdefc6248c0446d","modified":1611877079817},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1611877079817},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1611877079818},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"811a3ad58c0a15550100bdc199bef8add1ad526c","modified":1611877079819},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"0ff61346dc1327054ea2c211ba6fb654cdcdfd8d","modified":1611877079819},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"007da98b913a62946c03a87f8fa25b3db856caa1","modified":1611877079820},{"_id":"themes/next/scripts/events/lib/config.js","hash":"09b58494e9d9d25542d1d218f2d0ffc4d2da9f30","modified":1611877079826},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1611877079819},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1611877079826},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"7b0ea8d28ced63977dc6539920eb044b1098adcb","modified":1611877079827},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"b281be775b693f9bf32766c8f6ef703c72ac9b00","modified":1611877079827},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"d1ecc44f9f6e236bf910e36150767d36be4658b2","modified":1611877079828},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"ecc93ba67af26b6715fc75001fa0c3131b726241","modified":1611877079828},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1611877079829},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1611877079829},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"cc1e2d5921c6990f94f3cf11b1ff7533a21da9b7","modified":1611877079830},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"32a1d9ad50621a78d0243e176c8b05ff7866fd5b","modified":1611877079830},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7c0533bac4400689a0d5ab3a188ce42b9375de46","modified":1611877079830},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1611877079831},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"60be56c9ba590e5bcb80d1607ca7eeedde9fdfaa","modified":1611877079831},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1611877079832},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"b6241ebbb091ef18b3d06cba08ac2e04e3f67a7d","modified":1611877079820},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1611877079888},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1611877079887},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1611877079889},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1611877079888},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ece860218125bdb2578f373ed4f5040c9670e4b1","modified":1611877079843},{"_id":"themes/next/source/js/schemes/muse.js","hash":"9d15d0d6a58b1df74827288f117af22b4b6aafe5","modified":1611877079898},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d4809783ded05625675b1b4bbd9e99d7f5f7d7f9","modified":1611877079842},{"_id":"themes/next/source/css/_variables/base.styl","hash":"32a1b73944561655087d80f025208a84e012b3cf","modified":1611877079889},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"3c7ae405dd30b9b46494a6b9a6cb1b7ec6138ba9","modified":1611877079843},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"ee8fb8348aa76a9b346927ba4cae5666d8d777f7","modified":1611877079857},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"9f88d350df8115d26c6adbc2025a27ef9a42d7ff","modified":1611877079864},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"0c9f72ad98807521cbdcee7b5bbe2e884311db39","modified":1611877079863},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1611877079869},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"db5ddaa8fd2101b0fd7108ce4bbcb9f0649fa223","modified":1611877079868},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1611877079869},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1611877079871},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"41cba8c4c5637a6b8f1b62e67673b33676f5d734","modified":1611877079872},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1611877079872},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1611877079873},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1611877079877},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1611877079879},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1611877079880},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":1611877079881},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1611877079880},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1611877079882},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":1611877079880},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1611877079881},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":1611877079883},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1611877079884},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"be5c46b983df08b9dbac1b4749b1a101b54b6b50","modified":1611877079885},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1611877079882},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1611877079885},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"dc68f16eceaa006e9735d7ff7821af7f4ef50979","modified":1611877079885},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"87e163de866938c668ec33e6ff8972b7a968e0af","modified":1611877079883},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1611877079884},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"2d337a12c5c668ee64447bda5a9ed64eaed5b29e","modified":1611877079886},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1611877079886},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1611877079887},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1611877079844},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1611877079845},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1611877079847},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"b3fa752f72ca1413289b76c56fbd33a00e3d25d7","modified":1611877079849},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1611877079845},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1611877079846},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1611877079850},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1611877079851},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"5d61dedb3bec1021d52894f9b379e4d0953f6a35","modified":1611877079849},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"76d0dfb3a8b873a6180604ac6daecf38b6a963a2","modified":1611877079851},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1611877079854},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"967021e5483495bdefac9e0b3e1c84c366c657fd","modified":1611877079853},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1611877079852},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"b1181c5f12a70b8bf710586fcb0d7959841ee512","modified":1611877079856},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"7102f8e819b62cf7d121fd063dc663fd068feaa6","modified":1611877079857},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1611877079856},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"b457756758f0632767e8a560e3033059cbe4a67b","modified":1611877079858},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"83c6588c51cd418336f4945813410a100ddfe2a4","modified":1611877079858},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"bf88d9c585d7b00463c46352402cfea415c29493","modified":1611877079860},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"f11dca93e334b68a29e792f7abe682993fab7568","modified":1611877079860},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"2896840ab8ac8ab2a7f76d18df893f290ac31625","modified":1611877079859},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"2c534d2b2dbc932ad65d335a720a7ba9612bac04","modified":1611877079859},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"d6d60f02b5e9f89dbfce180b3884030898022664","modified":1611877079861},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1611877079862},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"f1778d2c56974b96dae429456d5c55be325c4946","modified":1611877079861},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"cf194bea1c9e67fde871a04de3bc81df72c54277","modified":1611877079861},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"9a47c9045e443b8d20932f9c564a3a05fa4c6b51","modified":1611877079862},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"d180871d4440090241fc988736c1f3a7efb4b1ba","modified":1611877079864},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"9c8abc55c9d94d384a245013951aba5ecca2f4fe","modified":1611877079863},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1611877079864},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1611877079865},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"ab715dbf2b98bfeb5e7b7c43e92e5c02496cc2ea","modified":1611877079865},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1611877079866},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f7ff85fe6c4efb8ff036fab2c3277b7d8bed69a8","modified":1611877079866},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"6394340c28a21f6aa90e786f3bfe24fb26595653","modified":1611877079867},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1611877079865},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"432e73bc4f99322af6af1852e0ea6e674919c31a","modified":1611877079867},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"69eb1c282a8fd5dbab606cc09c34c5dc8e44e753","modified":1611877079868},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"08e79881d58d01afab6dbed37ab4f52356564d7e","modified":1611877079871},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1611877079874},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"cef4e779473daa3761709958243c6b8a57bbd814","modified":1611877079874},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1611877079870},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1611877079875},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"79ffcf92771cd48f4a686f9d8d7d610f39e9fc1f","modified":1611877079875},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"15a5e273a8137550c93c8d2a60f9fcf86e04a89e","modified":1611877079873},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"3c029a003e9bf747e1b9cc7c0c127f6028374876","modified":1611877079876},{"_id":"source/assets/icons/logo.psd","hash":"840e699db8779d806223d65d3afeef9acb6dd67c","modified":1589045710461},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"50b00218e854200c4ec0573a841e226d49c45cba","modified":1611877079877},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1611877079876},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"f53e6c12bd4805888f696386d00668f23cd335e7","modified":1611877079876},{"_id":"themes/next/package-lock.json","hash":"8ead32d45b17952b8eef60f6b5af432aacc50573","modified":1611902854140},{"_id":"public/css/mystyles.css","hash":"f8a216343068753a1644b43e5b4bf89464e8bdf7","modified":1640500446260},{"_id":"public/post-sitemap.xml","hash":"d00a35ef3ebf9392b729acc7b192b22e1f6efaea","modified":1640500446260},{"_id":"public/page-sitemap.xml","hash":"2f43728c22c9b299035eb9587c1c3bca8084b198","modified":1640500446260},{"_id":"public/tag-sitemap.xml","hash":"2e83affc2cbcc0fa217104cabf1cd61c11def006","modified":1640500446260},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1640500446260},{"_id":"public/sitemap.xml","hash":"f84339ad5fe426cb6cee642f0df6f3c9d4bc0b70","modified":1640500446260},{"_id":"public/search.xml","hash":"c23c9a31fca8a5d6d07fc062be0e681aa1c8158f","modified":1640502510758},{"_id":"public/about/index.html","hash":"19c947e456ddadb6fd8ab41d97d87bcd96c51f96","modified":1640500446260},{"_id":"public/tags/index.html","hash":"6ed885e20329e7d335dcdedf35b6f5f7f3953148","modified":1640500446260},{"_id":"public/2020/05/a-definitive-guide-to-aws-application-integration/index.html","hash":"4958a2eddb6a358c496df100f205d3f4973460d1","modified":1640500446260},{"_id":"public/2016/07/nice-tool-for-algorithm-and-datastructure-visualisation/index.html","hash":"dbae0f9680731b880d6bc169b778339062ee19a6","modified":1640500446260},{"_id":"public/2016/04/restricting-ojinputtext-for-numericals/index.html","hash":"d4a915634bdf6dd6547989abe72836c22c4d0a82","modified":1640500446260},{"_id":"public/archives/index.html","hash":"f1e6eb38d1349602687fd096067521f84ddb034e","modified":1640500446260},{"_id":"public/archives/page/2/index.html","hash":"8fefd03f8ee2c4234d4bde7557bf296b39e88150","modified":1640500446260},{"_id":"public/archives/page/3/index.html","hash":"e26ea486afb77a0f703bc39c6019c25eee06cc08","modified":1640500446260},{"_id":"public/archives/2016/index.html","hash":"ae67bff495d4832e6f0fc2fd43ac3cebe69cd16b","modified":1640500446260},{"_id":"public/archives/2016/page/2/index.html","hash":"9f4224ff010a8dae4a7273ff07f4ae708bb0dc13","modified":1640500446260},{"_id":"public/archives/2016/03/index.html","hash":"c2d7cb69258cbdaff7d27b041d0c0b5728e1acc5","modified":1640500446260},{"_id":"public/archives/2016/04/index.html","hash":"7195fa41a4a0b4bda71fef7cf4d9c5213aea89be","modified":1640500446260},{"_id":"public/archives/2016/05/index.html","hash":"444ea388fac58c2cc5cdbac799709726a95e088e","modified":1640500446260},{"_id":"public/archives/2016/06/index.html","hash":"69eb61ece0987f949bd286d97261fe4df9b004d8","modified":1640500446260},{"_id":"public/archives/2016/07/index.html","hash":"16a98642e189f9ff1fee0b783103746bc9e6f3c4","modified":1640500446260},{"_id":"public/archives/2018/index.html","hash":"ab68f8a49e8b7cab44031e271eb40fb0a56937cb","modified":1640500446260},{"_id":"public/archives/2018/04/index.html","hash":"3e9384ce15e246beb927cba06c2e2d242fae5ceb","modified":1640500446260},{"_id":"public/archives/2020/index.html","hash":"00a46fea12f8fea4050b551576b9a482975d28a7","modified":1640500446260},{"_id":"public/archives/2020/05/index.html","hash":"0f6ef50b1fd2811ce7032c73283658f7eb2a9d54","modified":1640500446260},{"_id":"public/archives/2020/06/index.html","hash":"5c4dfd0f9b481a105cc6191ff6c16db81f385253","modified":1640500446260},{"_id":"public/archives/2021/index.html","hash":"7da03013a363b644c1a8ba5145193fb94a9b4a57","modified":1640500446260},{"_id":"public/archives/2021/01/index.html","hash":"341a16fda191c946afd1d7bc115c8fa10955bf6b","modified":1640500446260},{"_id":"public/tags/java/index.html","hash":"135a2c3a0c0eda5a5675445f3b056b64e8ec2887","modified":1640500446260},{"_id":"public/tags/java/page/2/index.html","hash":"20f9d10c336a6838c43a0e987e26f0b7eb305328","modified":1640500446260},{"_id":"public/tags/algorithms/index.html","hash":"d83d0ca853dd2b6f36e4743733399d0fe42813e0","modified":1640500446260},{"_id":"public/tags/data-structures/index.html","hash":"3b0a44aad7515433348e8658a33036f84ff0bcb7","modified":1640500446260},{"_id":"public/tags/problem/index.html","hash":"f093b0208bb15fbc4cfb7182245209dbb8583d7b","modified":1640500446260},{"_id":"public/tags/interview-question/index.html","hash":"20abbe02c9a0d2a058eaeb17775def80ef1eea60","modified":1640500446260},{"_id":"public/tags/binary-tree/index.html","hash":"02ebc5496d0420665984a511f709a2c2bc7d0684","modified":1640500446260},{"_id":"public/tags/atg/index.html","hash":"5d335d79dc78d5089b2c81cce200be1c9c9c64aa","modified":1640500446260},{"_id":"public/tags/configuration/index.html","hash":"786504a8b437f8156713f4f7ec5212f951c3e40f","modified":1640500446260},{"_id":"public/tags/oraclecommerce/index.html","hash":"51fd3f45a1581e19a31d4038f30916dc46498037","modified":1640500446260},{"_id":"public/tags/hack/index.html","hash":"716969ecd9030df16a767cc2cdd2aa95ce69f848","modified":1640500446260},{"_id":"public/tags/oraclejet/index.html","hash":"e4935684e221a886bf016969e52f5c526f32fe8f","modified":1640500446260},{"_id":"public/tags/javascript/index.html","hash":"bd44397d59a625dd6f7a40ed5b5ff4778811e3be","modified":1640500446260},{"_id":"public/tags/html/index.html","hash":"5806f90ba2a166f0f89797b36fd4fc856fa192cf","modified":1640500446260},{"_id":"public/tags/problems/index.html","hash":"7f3a12e7dd52f4efa650bd7a52fb7b083383a83f","modified":1640500446260},{"_id":"public/tags/codejam/index.html","hash":"7b170853609ac3d186f2b50a7c1fd2ec77fb08e0","modified":1640500446260},{"_id":"public/tags/puzzle/index.html","hash":"ffd1129cf38d4999f67c156767c7dbbba4bcbf9f","modified":1640500446260},{"_id":"public/tags/competition/index.html","hash":"4a757f620d3d366e383416314e030e60b9f592ef","modified":1640500446260},{"_id":"public/tags/solution/index.html","hash":"7f29b05ed578bd7e2f63a8412709e31fff976f0e","modified":1640500446260},{"_id":"public/tags/javafx/index.html","hash":"ee053a57e770851764e2566e4e6eb67dcb87eeb2","modified":1640500446260},{"_id":"public/tags/opensource/index.html","hash":"787d9ab47d486bac88968bdf0ff85dba01e83d47","modified":1640500446260},{"_id":"public/tags/perforce/index.html","hash":"db0c6c35016685e19a0fc5e2966415b496527bc6","modified":1640500446260},{"_id":"public/tags/knockoutjs/index.html","hash":"9d6a280baceba799260e9fa58b6890c01083eb52","modified":1640500446260},{"_id":"public/tags/jquery/index.html","hash":"0de87130df1b204d7dd8821d2d37c5e3dfb30025","modified":1640500446260},{"_id":"public/tags/css/index.html","hash":"cba2977a0ca95a4bde987c398a472cf2648e2864","modified":1640500446260},{"_id":"public/tags/information/index.html","hash":"8322a3152b7c87739450633c156dbf0f70dcb2d6","modified":1640500446260},{"_id":"public/tags/alexa/index.html","hash":"b701d5a4327a1211010c0749d7d8609ec96965b7","modified":1640500446260},{"_id":"public/tags/aws/index.html","hash":"81539247fb118ddd1bd058c998688230ab6b0c45","modified":1640500446260},{"_id":"public/tags/dynamodb/index.html","hash":"646c0eee85bab741f4746c9c8bc33fac44c69cd1","modified":1640500446260},{"_id":"public/tags/ask/index.html","hash":"f5427ba7f5e46410d1d5ee8517a864c83ce0781d","modified":1640500446260},{"_id":"public/tags/book/index.html","hash":"6a7cdb23387dcd188557b07c3bbd6a044af99102","modified":1640500446260},{"_id":"public/tags/published/index.html","hash":"d16f17c850c37b8bce26675800939e7215594c2f","modified":1640500446260},{"_id":"public/tags/apress/index.html","hash":"163e476dd07ac289a35f87f9d66b1743d1c34fc9","modified":1640500446260},{"_id":"public/tags/amazon/index.html","hash":"c33821d338283d4ef3157e95b50990ae5b5a5785","modified":1640500446260},{"_id":"public/tags/sqs/index.html","hash":"c090ed9c96c0d2edee2b5e93f9c6a8b9d2df8a0c","modified":1640500446260},{"_id":"public/tags/sns/index.html","hash":"cb320651b027a4c1145ae4c4d555a0dbe1dd9095","modified":1640500446260},{"_id":"public/tags/swf/index.html","hash":"afc3168c16210598dccb4bbb2dd9c65f2583c1ec","modified":1640500446260},{"_id":"public/tags/step-functions/index.html","hash":"b5c06296036f5c984943a66aa41f845170a80f31","modified":1640500446260},{"_id":"public/tags/s3/index.html","hash":"28b01f4ebf18acee048eff9f70b0ac4ab7d070d9","modified":1640500446260},{"_id":"public/tags/opencsv/index.html","hash":"a92db587526a9debe49513800429dafd6043a284","modified":1640500446260},{"_id":"public/tags/data/index.html","hash":"bd419fe7f6968daf3e5424e5f32ca4eb70c10559","modified":1640500446260},{"_id":"public/tags/files/index.html","hash":"1732d625f35de7d521abb9f59350e9cdff78cfb8","modified":1640500446260},{"_id":"public/tags/example/index.html","hash":"92c295e44a238abb85c474bebd0695c909230463","modified":1640500446260},{"_id":"public/2021/01/writing-csv-files-from-s3-using-opencsv/index.html","hash":"26177fad739f71b56d2f6a1f349507b8b80f6659","modified":1640500446260},{"_id":"public/2021/01/reading-csv-files-from-s3-using-opencsv/index.html","hash":"a0599834425682a40829426585b535bfff812218","modified":1640500446260},{"_id":"public/2020/06/expiring-localstorage-objects/index.html","hash":"a1e0dd8f2e996b21cb86180012b53d756199cb5f","modified":1640500446260},{"_id":"public/2018/04/creating-alexa-skill-with-java-aws-lambda/index.html","hash":"1799e65584e246545c40f4f05ec0806fcc72422b","modified":1640500446260},{"_id":"public/2016/07/top-view-of-binarytree-without-recursion/index.html","hash":"d5e47eb5adcee51f1085051a3813acab42f2d9a9","modified":1640500446260},{"_id":"public/2016/07/right-view-of-binarytree-without-recursion/index.html","hash":"cc1e8589945bb6622e503d0cc932d6a9ecb57d89","modified":1640500446260},{"_id":"public/2016/06/collapsible-panel-in-oracle-jet/index.html","hash":"5a56e99efe42038339f22641f975b9fff905c386","modified":1640500446260},{"_id":"public/2016/05/non-recursive-breadth-first-traversal-binary-tree/index.html","hash":"abdb3d45d47692b159658433e27bb90ac77f3019","modified":1640502510758},{"_id":"public/2016/04/solving-jam-coins/index.html","hash":"9a8a767b972146060bf062ef1ddf0e7996e916c6","modified":1640500446260},{"_id":"public/2016/04/disable-dynadmin-auth-dev-env-oracle-commerce/index.html","hash":"5f4758dd7f4e276c6433f12f9db68b9cc328c44b","modified":1640500446260},{"_id":"public/2016/03/patch-utility-for-perforce/index.html","hash":"a63a4b4168ee38062ab8bb9c42a502f69037c49a","modified":1640500446260},{"_id":"public/2016/03/hello-world-for-oracle-commerce/index.html","hash":"ef7ba642d66959173ef1062caabeba1bf62b5090","modified":1640500446260},{"_id":"public/index.html","hash":"ae124dfe93bc29b25633e33e225335c156bd56ca","modified":1640500446260},{"_id":"public/page/2/index.html","hash":"1272c89776d3d8ab18aa4b8527fe0b2135c7be39","modified":1640502510758},{"_id":"public/page/3/index.html","hash":"5bb33425583c229db7bdfea9181857a93dc6224d","modified":1640500446260},{"_id":"public/app.yaml","hash":"8a556913d9632aa6993233c333d7a613744783cd","modified":1611955574116},{"_id":"public/favicon.ico","hash":"5dda187def7a492cc4b659e4f671a9f82c78e7d7","modified":1640500446260},{"_id":"public/robots.txt","hash":"c87003668ea52a5fa648d3d4f74f7c122ab33c21","modified":1640500446260},{"_id":"public/assets/icons/android-chrome-192x192.png","hash":"0ee9b9e35d5ecae4fd66d5468e008862ba78b6c2","modified":1640500446260},{"_id":"public/assets/icons/android-chrome-512x512.png","hash":"a7b4e6b0c57af8927484d90a2c9447ee042333b9","modified":1640500446260},{"_id":"public/assets/icons/apple-touch-icon.png","hash":"e8ea3588f924f308e63801203a303fd3155b0a3e","modified":1640500446260},{"_id":"public/assets/icons/favicon-16x16.png","hash":"1da95ee24e57a333c2ca1747e24290686788d5ac","modified":1640500446260},{"_id":"public/assets/icons/favicon-32x32.png","hash":"5eefe83ed9153f1ccb7380c78723ed7a5f9affda","modified":1640500446260},{"_id":"public/assets/icons/favicon.ico","hash":"8576a6f8df519bb69763109a91dd11b7fbfc09d3","modified":1640500446260},{"_id":"public/assets/icons/logo-64.png","hash":"50c3bd9ee3f47c4c07ac584cf887759078ab230c","modified":1640500446260},{"_id":"public/assets/icons/logo-blue-short.png","hash":"ca6fc226e8551310b67785def22cfd6a2d29837a","modified":1640500446260},{"_id":"public/assets/icons/logo-blue.png","hash":"b9a634fa2f95b6510ccfc0973f75c4a754e26e71","modified":1640500446260},{"_id":"public/assets/icons/logo-green-short.png","hash":"dbd857a04a5f3e9f8d89757173973fe7651bdf38","modified":1640500446260},{"_id":"public/assets/icons/logo-green.png","hash":"699bd26a92d9931fb95de4a359fb5719c94ee609","modified":1640500446260},{"_id":"public/assets/icons/logo.png","hash":"8f9638efcfa4552583fc9e67eaef88a70433953c","modified":1640500446260},{"_id":"public/assets/icons/site.webmanifest","hash":"bf31baf91bdd2fcde24a45e3f2a1be33733c6f69","modified":1640500446260},{"_id":"public/assets/svgs/2016/right-view-of-binarytree.svg","hash":"ea25fab5eba5588cae034d231514502d918abc03","modified":1640500446260},{"_id":"public/assets/svgs/icons/icon-light-blue.svg","hash":"816942715eecd933d7ca0d585f656d72bc675f97","modified":1640500446260},{"_id":"public/assets/svgs/2016/top-view-of-binarytree.svg","hash":"25ed811733a2d43fcd27ffb16d22692f3ef8abee","modified":1640500446260},{"_id":"public/assets/svgs/2016/breadth-first-traversal.svg","hash":"e25d2d1502ab2cb508bb72b53334cf21dcf0d66a","modified":1640500446260},{"_id":"public/assets/svgs/icons/icon-micro.svg","hash":"3b5911c599aa457801191a7216de8125522f69f2","modified":1640500446260},{"_id":"public/assets/svgs/icons/icon-nano.svg","hash":"fa9da06f7ce10fb1b9f9cfa7d740ad733cc1f526","modified":1640500446260},{"_id":"public/assets/svgs/icons/icon-dark-blue.svg","hash":"ed62a61fd1e187339f5e0e7ac091a55664e1c539","modified":1640500446260},{"_id":"public/assets/svgs/icons/icon-short-blue.svg","hash":"2f9b3f8f65ed7b9c5fe6142ba2d33d7fd17e087a","modified":1640500446260},{"_id":"public/assets/svgs/icons/icon-short-black.svg","hash":"5ae97f977c95300d5b790b43bbbfc79b3d1b66f5","modified":1640500446260},{"_id":"public/assets/svgs/icons/icon-short-lean-blue-bg.svg","hash":"54864542a63ff290c457da3261742ba5e68814c7","modified":1640500446260},{"_id":"public/assets/svgs/icons/icon-short-lean-black-no-text.svg","hash":"67288da3050ea3572625dfc252d979a196d40443","modified":1640500446260},{"_id":"public/assets/svgs/icons/icon-short-no-text.svg","hash":"6e4554e3d950e92bfc495ea0f5132661280667db","modified":1640500446260},{"_id":"public/assets/svgs/2021/01/mirror-copies-not-matching.svg","hash":"7d9d01078b75f648e89cc47be4d39164450e3851","modified":1640500446260},{"_id":"public/assets/svgs/2021/01/non-symmetric-binary-tree-examples.svg","hash":"648f103b3e1c5421fa6b3407d5e87a2a527d93d4","modified":1640500446260},{"_id":"public/assets/svgs/2021/01/read-s3-files-using-opencsv-algorithm.svg","hash":"913ed8ad3f9aae8a650e33d712501b8756a36277","modified":1640500446260},{"_id":"public/assets/svgs/2021/01/symmetric-binary-tree-examples.svg","hash":"9e162ba74a5bb97c92812d35eb0533c60193e5dc","modified":1640500446260},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1640500446260},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1640500446260},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1611955574116},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1611955574116},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1611955574116},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1611955574116},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1611955574116},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1611955574116},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1611955574116},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1640500446260},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1640500446260},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1640500446260},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1640500446260},{"_id":"public/assets/icons/logo.ai","hash":"dd07244f2ce823119c0847f35cc99216441025f7","modified":1640500446260},{"_id":"public/js/algolia-search.js","hash":"a360423984cdd915d04365c51bcab440e52d7223","modified":1611907987424},{"_id":"public/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":1611907987424},{"_id":"public/js/local-search.js","hash":"da2051e7cab184ae4aa64457c5db7476b4645fdc","modified":1611955574116},{"_id":"public/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1640500446260},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1640500446260},{"_id":"public/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1640500446260},{"_id":"public/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":1611907987424},{"_id":"public/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1640500446260},{"_id":"public/css/main.css","hash":"6621d51e5d5f4c1fb0b4fc91e43af77a6bf1d70e","modified":1640500446260},{"_id":"public/assets/icons/logo.psd","hash":"840e699db8779d806223d65d3afeef9acb6dd67c","modified":1640500446260},{"_id":"node_modules/hexo-theme-next/README.md","hash":"de109b73e09826f6bccceae60c618739a794f8f7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"874583c9d71fc97b1ab1903ff23c47ecc77693ba","modified":499162500000},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"d07d885e59ac5f0a56495c01a305ebe016431d53","modified":499162500000},{"_id":"node_modules/hexo-theme-next/package.json","hash":"f12317dea24b6e8e37f9b12c9341a2b27750f2a5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"7a62243ec54196e3d1bea7364f05aded490bc234","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"dc448f724c7d436233e9567711a09e0d56e60e3b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"48a76170d70ef7c1fac96720bc5064b43061708d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"c3506dfaa771e827ae6adb322477c6e835cd0f09","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"649823297167b902455c0aec8ddebb462df71c7d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"8ddfe98e7847ee8f1eaba9119f9fbdc42d7ec120","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"ac018805190bc4bdc06091f5a6444e612fc700b0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"82a93c32b3fcf6517441cdc73f75bc6173beb392","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"99f6f84f5cb6631b7ae0b5594af2ea2940c3558e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"8342df2f4190ba4ee004b70d1d6ccd341033dbe7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"0d3b56613197cb190900311507535db41daec7d4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"47daeaa23c4db073e77761c9a6f62d3932af06ec","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"e0e2675261e2e80f7ce7d19c945c08217b068d81","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"fdf5c623890db24cb56ab5ffe0c49db3542477c8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"0afecef3d81b880cc19769062968d8562a1cd93b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"54de3d8d85e3c7b14b163c3d322411b7301a09b3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"1c9a0b8d8160c77cc62064207d57f460f365cae9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"1f9657b58e11db21f93eb895c90123b8f91751a7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"6f7c742316c96d5b71da50fddfb060ff7ec1ea99","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"38b99be8cea1cfd79f36deca13be665dedfad9c5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"8d6f8d90aedcc5c844da93e196bfde0c0161385b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"23a4f9b0b768b04e66e60079f107471163f2e567","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"0a590e87af50e57b15fc37695c9a3bf4a97c3d92","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"37ec3d1bcd20b8ac1d18e0d68f990450890b46cd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"60bc943fc708c3b2a19fc4fe0a15af86529d1fcd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"6cd707f846bfd6becbcfb060c26958bb4015c31f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"63df0665005063108e1bc19df3cf8c4e46facb95","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"8ee5ca39ac4a372a5c0f16e344bbe578af4aeae4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"9abd8473985f2bf1557b1aac31b436c92d5450a7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"b5dd3bf172cd242b93f5461b989e97a7efc0ac89","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"cbf838ca59646f128c9111bb28921c1d04d8dcaf","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"334e8d8117a46c8c097788811322a62627952219","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"d16fdaf94d66efc0242b0c26ed539017e3b4f795","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"dfd91d64ebc06b5b139ee97424f4f93e66938e34","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6f0433940680c0f9db37542ca36f76e4bb1c1d50","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/noscript.njk","hash":"4f250d0bf80be06dd2c95c1d4c2ba2624b59cf2a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/pjax.njk","hash":"28a3bcb1ce50924a5a48b0f3756ac3a8736867f1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"bada07da2a47ed6de6081796367b19dd9e906cfb","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"467b45a4912369bcba77908151e76a3f3ad0fed2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/nprogress.njk","hash":"271139c3896a6d294f46f767cb21b2e848050841","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"294b7f6a4fa566e369d8be0ce7b28f35b6c14563","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/rating.njk","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"89091bc943cd8b8c63b8af3d26fb0a027048e9ba","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"fa1e558f058f93455acdd553ab1be30b26f137e4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"be0574c64a38210e449c99d38a760452015060a3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"bac5646993153f9f6a630c9f0052bb17fa760a9c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"682a8e16b5182c123c96b04222d967407e1fd6d6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"480e483fe12393f72c5a759b6ac281e000f23e21","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"413c51fa3caa87fe95d1d8f95e6023f096515632","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"577c510374cf9bcfa8d3a1027e42411a9324805e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"79102d9e9bccff6224e77a77c4d2d363094ae3df","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"9e2c58d1a4d1dd84fa86144e5b4576b2fd10a37f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"464effc08e757ce8e1bb094707d06ad829af9d62","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"2bf00d56b3b289a7dd27e9b5820430a2457a19f3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"b37f9847d2f95632e911df670b51921a7d748068","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"6bca0a5dc96fea392a0da53e0566ec2a113ec382","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/algolia-search.js","hash":"a360423984cdd915d04365c51bcab440e52d7223","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/local-search.js","hash":"da2051e7cab184ae4aa64457c5db7476b4645fdc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"c2a04055d8edec03dc74e1c45d83bd3b51467de0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"97cb0ac75f354119caf75365456ae1806be1c0c9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"37bdf020591feb0cf72327c9efd755bf78a0afd6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"8f6521714044676e15d924da387b2aef45fc8fe6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"ffb6c69a9c90793cbe9bf0544b55f7a41c016d8f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"9d650333160ad1977fe42d9770869ff1660a95fe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"1410fad73e0a08a45166e4a055ba150fd06e8636","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"a9bb52d0537d27cfe670d80e716da6780786ab8a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"c419158e19805e2db614a5f5651e3e534e4a5e4e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"ad197fd728dd7ac90f910fdf80ce848eab3ff187","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"2d36a481a70d5f450f1f166dc556ac1218b18537","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"5c2cd9b6f02bcb6248d3f18638a58e329fe8c0d1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"cc1450d62d76e59968bdd25836694b8339207384","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"54eab4840443262432ec7c47e56e9859ace2a902","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"c1ccd5ec907dffc2b4aeec81b0762ea1cc0d4505","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"c1bf0753fc4bc5f21d61eaffbcc915a462c7d830","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"6252b0353c6a36d03c68ebec1073293442221bd1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"7a07bbfb09ddf70b919f0ebe1b00942c96152389","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"47a982aec8830c2f9711b2aff59ff83f09deb09e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"b6746dfad32cc8a46ff8f4194a7a16ca41744803","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"f4fd63b9f9230dadd1190f79d59313751925ed90","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"97035261aa85c7d39c6ce1211cdefc6248c0446d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"0ff61346dc1327054ea2c211ba6fb654cdcdfd8d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"811a3ad58c0a15550100bdc199bef8add1ad526c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"007da98b913a62946c03a87f8fa25b3db856caa1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"b6241ebbb091ef18b3d06cba08ac2e04e3f67a7d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"09b58494e9d9d25542d1d218f2d0ffc4d2da9f30","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"7b0ea8d28ced63977dc6539920eb044b1098adcb","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"b281be775b693f9bf32766c8f6ef703c72ac9b00","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"f76c7e13fc4304f86260068c9d83d3477b64ee4b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"ecc93ba67af26b6715fc75001fa0c3131b726241","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"cc1e2d5921c6990f94f3cf11b1ff7533a21da9b7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"32a1d9ad50621a78d0243e176c8b05ff7866fd5b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7c0533bac4400689a0d5ab3a188ce42b9375de46","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"60be56c9ba590e5bcb80d1607ca7eeedde9fdfaa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"32a1b73944561655087d80f025208a84e012b3cf","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"9d15d0d6a58b1df74827288f117af22b4b6aafe5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d4809783ded05625675b1b4bbd9e99d7f5f7d7f9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"ece860218125bdb2578f373ed4f5040c9670e4b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"3c7ae405dd30b9b46494a6b9a6cb1b7ec6138ba9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"ee8fb8348aa76a9b346927ba4cae5666d8d777f7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"0c9f72ad98807521cbdcee7b5bbe2e884311db39","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"9f88d350df8115d26c6adbc2025a27ef9a42d7ff","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"33c47f5827ab11454778f3c28d35d202497743fe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"41cba8c4c5637a6b8f1b62e67673b33676f5d734","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"87e163de866938c668ec33e6ff8972b7a968e0af","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"be5c46b983df08b9dbac1b4749b1a101b54b6b50","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"dc68f16eceaa006e9735d7ff7821af7f4ef50979","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"2d337a12c5c668ee64447bda5a9ed64eaed5b29e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"b3fa752f72ca1413289b76c56fbd33a00e3d25d7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"5d61dedb3bec1021d52894f9b379e4d0953f6a35","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"76d0dfb3a8b873a6180604ac6daecf38b6a963a2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"967021e5483495bdefac9e0b3e1c84c366c657fd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"b1181c5f12a70b8bf710586fcb0d7959841ee512","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"7102f8e819b62cf7d121fd063dc663fd068feaa6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"b457756758f0632767e8a560e3033059cbe4a67b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"83c6588c51cd418336f4945813410a100ddfe2a4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"2c534d2b2dbc932ad65d335a720a7ba9612bac04","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"2896840ab8ac8ab2a7f76d18df893f290ac31625","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"bf88d9c585d7b00463c46352402cfea415c29493","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"f11dca93e334b68a29e792f7abe682993fab7568","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"d6d60f02b5e9f89dbfce180b3884030898022664","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"cf194bea1c9e67fde871a04de3bc81df72c54277","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"f1778d2c56974b96dae429456d5c55be325c4946","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"9a47c9045e443b8d20932f9c564a3a05fa4c6b51","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"9c8abc55c9d94d384a245013951aba5ecca2f4fe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"d180871d4440090241fc988736c1f3a7efb4b1ba","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"ab715dbf2b98bfeb5e7b7c43e92e5c02496cc2ea","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f7ff85fe6c4efb8ff036fab2c3277b7d8bed69a8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"6394340c28a21f6aa90e786f3bfe24fb26595653","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"432e73bc4f99322af6af1852e0ea6e674919c31a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"69eb1c282a8fd5dbab606cc09c34c5dc8e44e753","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"08e79881d58d01afab6dbed37ab4f52356564d7e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"15a5e273a8137550c93c8d2a60f9fcf86e04a89e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"cef4e779473daa3761709958243c6b8a57bbd814","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"79ffcf92771cd48f4a686f9d8d7d610f39e9fc1f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"3c029a003e9bf747e1b9cc7c0c127f6028374876","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"f53e6c12bd4805888f696386d00668f23cd335e7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"50b00218e854200c4ec0573a841e226d49c45cba","modified":499162500000},{"_id":"source/_data/head.njk","hash":"606a16136957b13f29ac97aba92a74de7530a421","modified":1611911648821},{"_id":"source/assets/svgs/2016/breadth-first-traversal-2.svg","hash":"acb209b5320924865bbda847a2f549a86cba9a41","modified":1640478307097},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"3dc4628efa6debd6490fc0ebddff2424a7b319d8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"c2326ee3e8b724d99c24a818ddee32813ea5bf89","modified":499162500000},{"_id":"public/assets/svgs/2016/breadth-first-traversal-2.svg","hash":"acb209b5320924865bbda847a2f549a86cba9a41","modified":1640500446260},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1640500446260},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1640500446260},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1640500446260},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1640500446260},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1640500446260},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1640500446260},{"_id":"public/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":1640500446260}],"Category":[],"Data":[{"_id":"head","data":""}],"Page":[{"title":"About","date":"2016-03-31T21:19:41.000Z","author":"Buddha","description":"About Ctrl+Space","comments":0,"page":true,"_content":"![Ctrl+Space](/assets/svgs/icons/icon-dark-blue.svg)\nCtrl+Space is the first shortcut every programmer learns and it becomes part of day to day workflow irrespective of the programming language they code in. This helps any programmer the most. We use this as involuntarily as we blink or breath.\n\nThis blog is about providing such helpful tutorials, tips, tricks every programmer needs. This blog ventures into multiple platforms, programming languages. There are no boundaries.\n\n\n\n\n\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2016-04-01 02:49:41\nauthor: Buddha\ndescription: About Ctrl+Space\ncomments: false\npage: true\n---\n![Ctrl+Space](/assets/svgs/icons/icon-dark-blue.svg)\nCtrl+Space is the first shortcut every programmer learns and it becomes part of day to day workflow irrespective of the programming language they code in. This helps any programmer the most. We use this as involuntarily as we blink or breath.\n\nThis blog is about providing such helpful tutorials, tips, tricks every programmer needs. This blog ventures into multiple platforms, programming languages. There are no boundaries.\n\n\n\n\n\n","updated":"2016-03-31T21:19:41.000Z","path":"about/index.html","layout":"page","_id":"ckki0ed2k0000nbs631c1h2zq","content":"<p><img src=\"/assets/svgs/icons/icon-dark-blue.svg\" alt=\"Ctrl+Space\"><br>Ctrl+Space is the first shortcut every programmer learns and it becomes part of day to day workflow irrespective of the programming language they code in. This helps any programmer the most. We use this as involuntarily as we blink or breath.</p>\n<p>This blog is about providing such helpful tutorials, tips, tricks every programmer needs. This blog ventures into multiple platforms, programming languages. There are no boundaries.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/assets/svgs/icons/icon-dark-blue.svg\" alt=\"Ctrl+Space\"><br>Ctrl+Space is the first shortcut every programmer learns and it becomes part of day to day workflow irrespective of the programming language they code in. This helps any programmer the most. We use this as involuntarily as we blink or breath.</p>\n<p>This blog is about providing such helpful tutorials, tips, tricks every programmer needs. This blog ventures into multiple platforms, programming languages. There are no boundaries.</p>\n"},{"_content":".admonition {\n  padding: 0 5px;\n  margin-bottom: 10px;\n  margin-left: 2.5em;\n  border: 1px solid transparent;\n  border-left: 4px solid;\n  border-radius: 1px;\n  text-align: left;\n}\n\n.admonition-title {\n  font-weight: bold;\n  text-align: left;\n}\n\n.admonition.note,\n.admonition.info,\n.admonition.tips {\n  color: #1d6fa5;\n  background-color: #a0cfee;\n  border-color: #3498db;\n}\n\n.admonition.warning,\n.admonition.warn,\n.admonition.important {\n  color: #a85913;\n  background-color: #f3c195;\n  border-color: #e67e22;\n}\n\n.admonition.danger,\n.admonition.critical {\n  color: #bf2718;\n  background-color: #f5b4ae;\n  border-color: #e74c3c;\n}\n\n.recents {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n#header-outer {\n  height: initial;\n}\n\n#banner {\n  background: center #000;\n}\n\n.center-children {\n  display: flex; \n  align-items: center; \n  justify-content: center;\n}\n\n.binary-tree-arrow {\n  z-index: 0; \n  cursor: inherit; \n  stroke: rgb(29, 27, 25); \n  stroke-width: 2px; \n  stroke-opacity: 1; \n  stroke-dasharray: none; \n  stroke-linecap: round; \n  stroke-linejoin: round;\n}\n\n.binary-tree-circle {\n  z-index: 1; \n  cursor: inherit; \n  stroke: rgb(29, 27, 25); \n  stroke-width: 3px; \n  stroke-opacity: 1; \n  stroke-dasharray: none; \n  stroke-linecap: round; \n  stroke-linejoin: round; \n  fill: rgb(204, 221, 255); \n  fill-opacity: 1;\n}\n\n.binary-tree-circle+text {\n  z-index: 2; \n  cursor: inherit; \n  font-family: Arial; \n  fill: black; \n  font-size: 16.40px; \n  font-weight: normal; \n  font-style: normal; \n  opacity: 1; \n  text-anchor: middle;\n}\n\n.-highlight {\n  fill: rgb(100, 100, 255); \n}\n\n.-highlight+text {\n  fill: white; \n}\n\n.-blink {\n  -webkit-animation-name: binary-tree-highlight;\n  -webkit-animation-duration: 2s;\n  animation-name: binary-tree-highlight;\n  animation-duration: 2s;\n  animation-iteration-count: 1;\n}\n\n.-blink+text {\n  -webkit-animation-name: binary-tree-highlight-text;\n  -webkit-animation-duration: 2s;\n  animation-name: binary-tree-highlight-text;\n  animation-duration: 1s;\n  animation-iteration-count: 1;\n}\n\n.dull+text {\n  opacity: 0.25\n}\n\n.dull {\n  opacity: 0.25\n}\n\n.repeat {\n  animation-iteration-count: infinite;\n}\n\n.alternate {\n  animation-direction: alternate;\n}\n\n.fast {\n  animation-duration: .5s;\n}\n\n.delay1 {\n    animation-delay: 1s;\n}\n\n.delay2 {\n    animation-delay: 2s;\n}\n\n.delay3 {\n    animation-delay: 3s;\n}\n\n.delay4 {\n    animation-delay: 4s;\n}\n\n.delay5 {\n    animation-delay: 5s;\n}\n\n.delay6 {\n    animation-delay: 6s;\n}\n\n.delay7 {\n    animation-delay: 7s;\n}\n\n.delay8 {\n    animation-delay: 8s;\n}\n\n.delay9 {\n    animation-delay: 9s;\n}\n\n.delay10 {\n    animation-delay: 10s;\n}\n\n@-webkit-keyframes binary-tree-highlight {\n    from {fill: rgb(100, 100, 255);}\n    to {fill: rgb(204, 221, 255);}\n}\n\n@keyframes binary-tree-highlight {\n    from {fill: rgb(100, 100, 255);}\n    to {fill: rgb(204, 221, 255);}\n}\n\n@-webkit-keyframes binary-tree-highlight-text {\n    from {fill: white;}\n    to {fill: black;}\n}\n\n@keyframes binary-tree-highlight-text {\n    from {fill: white;}\n    to {fill: black;}\n}","source":"css/mystyles.css","raw":".admonition {\n  padding: 0 5px;\n  margin-bottom: 10px;\n  margin-left: 2.5em;\n  border: 1px solid transparent;\n  border-left: 4px solid;\n  border-radius: 1px;\n  text-align: left;\n}\n\n.admonition-title {\n  font-weight: bold;\n  text-align: left;\n}\n\n.admonition.note,\n.admonition.info,\n.admonition.tips {\n  color: #1d6fa5;\n  background-color: #a0cfee;\n  border-color: #3498db;\n}\n\n.admonition.warning,\n.admonition.warn,\n.admonition.important {\n  color: #a85913;\n  background-color: #f3c195;\n  border-color: #e67e22;\n}\n\n.admonition.danger,\n.admonition.critical {\n  color: #bf2718;\n  background-color: #f5b4ae;\n  border-color: #e74c3c;\n}\n\n.recents {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n#header-outer {\n  height: initial;\n}\n\n#banner {\n  background: center #000;\n}\n\n.center-children {\n  display: flex; \n  align-items: center; \n  justify-content: center;\n}\n\n.binary-tree-arrow {\n  z-index: 0; \n  cursor: inherit; \n  stroke: rgb(29, 27, 25); \n  stroke-width: 2px; \n  stroke-opacity: 1; \n  stroke-dasharray: none; \n  stroke-linecap: round; \n  stroke-linejoin: round;\n}\n\n.binary-tree-circle {\n  z-index: 1; \n  cursor: inherit; \n  stroke: rgb(29, 27, 25); \n  stroke-width: 3px; \n  stroke-opacity: 1; \n  stroke-dasharray: none; \n  stroke-linecap: round; \n  stroke-linejoin: round; \n  fill: rgb(204, 221, 255); \n  fill-opacity: 1;\n}\n\n.binary-tree-circle+text {\n  z-index: 2; \n  cursor: inherit; \n  font-family: Arial; \n  fill: black; \n  font-size: 16.40px; \n  font-weight: normal; \n  font-style: normal; \n  opacity: 1; \n  text-anchor: middle;\n}\n\n.-highlight {\n  fill: rgb(100, 100, 255); \n}\n\n.-highlight+text {\n  fill: white; \n}\n\n.-blink {\n  -webkit-animation-name: binary-tree-highlight;\n  -webkit-animation-duration: 2s;\n  animation-name: binary-tree-highlight;\n  animation-duration: 2s;\n  animation-iteration-count: 1;\n}\n\n.-blink+text {\n  -webkit-animation-name: binary-tree-highlight-text;\n  -webkit-animation-duration: 2s;\n  animation-name: binary-tree-highlight-text;\n  animation-duration: 1s;\n  animation-iteration-count: 1;\n}\n\n.dull+text {\n  opacity: 0.25\n}\n\n.dull {\n  opacity: 0.25\n}\n\n.repeat {\n  animation-iteration-count: infinite;\n}\n\n.alternate {\n  animation-direction: alternate;\n}\n\n.fast {\n  animation-duration: .5s;\n}\n\n.delay1 {\n    animation-delay: 1s;\n}\n\n.delay2 {\n    animation-delay: 2s;\n}\n\n.delay3 {\n    animation-delay: 3s;\n}\n\n.delay4 {\n    animation-delay: 4s;\n}\n\n.delay5 {\n    animation-delay: 5s;\n}\n\n.delay6 {\n    animation-delay: 6s;\n}\n\n.delay7 {\n    animation-delay: 7s;\n}\n\n.delay8 {\n    animation-delay: 8s;\n}\n\n.delay9 {\n    animation-delay: 9s;\n}\n\n.delay10 {\n    animation-delay: 10s;\n}\n\n@-webkit-keyframes binary-tree-highlight {\n    from {fill: rgb(100, 100, 255);}\n    to {fill: rgb(204, 221, 255);}\n}\n\n@keyframes binary-tree-highlight {\n    from {fill: rgb(100, 100, 255);}\n    to {fill: rgb(204, 221, 255);}\n}\n\n@-webkit-keyframes binary-tree-highlight-text {\n    from {fill: white;}\n    to {fill: black;}\n}\n\n@keyframes binary-tree-highlight-text {\n    from {fill: white;}\n    to {fill: black;}\n}","date":"2020-08-12T02:27:11.929Z","updated":"2020-08-12T02:27:11.929Z","path":"css/mystyles.css","layout":"false","title":"","comments":1,"_id":"ckki0ed2q0002nbs66wbv2sk0","content":".admonition {\n  padding: 0 5px;\n  margin-bottom: 10px;\n  margin-left: 2.5em;\n  border: 1px solid transparent;\n  border-left: 4px solid;\n  border-radius: 1px;\n  text-align: left;\n}\n\n.admonition-title {\n  font-weight: bold;\n  text-align: left;\n}\n\n.admonition.note,\n.admonition.info,\n.admonition.tips {\n  color: #1d6fa5;\n  background-color: #a0cfee;\n  border-color: #3498db;\n}\n\n.admonition.warning,\n.admonition.warn,\n.admonition.important {\n  color: #a85913;\n  background-color: #f3c195;\n  border-color: #e67e22;\n}\n\n.admonition.danger,\n.admonition.critical {\n  color: #bf2718;\n  background-color: #f5b4ae;\n  border-color: #e74c3c;\n}\n\n.recents {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n#header-outer {\n  height: initial;\n}\n\n#banner {\n  background: center #000;\n}\n\n.center-children {\n  display: flex; \n  align-items: center; \n  justify-content: center;\n}\n\n.binary-tree-arrow {\n  z-index: 0; \n  cursor: inherit; \n  stroke: rgb(29, 27, 25); \n  stroke-width: 2px; \n  stroke-opacity: 1; \n  stroke-dasharray: none; \n  stroke-linecap: round; \n  stroke-linejoin: round;\n}\n\n.binary-tree-circle {\n  z-index: 1; \n  cursor: inherit; \n  stroke: rgb(29, 27, 25); \n  stroke-width: 3px; \n  stroke-opacity: 1; \n  stroke-dasharray: none; \n  stroke-linecap: round; \n  stroke-linejoin: round; \n  fill: rgb(204, 221, 255); \n  fill-opacity: 1;\n}\n\n.binary-tree-circle+text {\n  z-index: 2; \n  cursor: inherit; \n  font-family: Arial; \n  fill: black; \n  font-size: 16.40px; \n  font-weight: normal; \n  font-style: normal; \n  opacity: 1; \n  text-anchor: middle;\n}\n\n.-highlight {\n  fill: rgb(100, 100, 255); \n}\n\n.-highlight+text {\n  fill: white; \n}\n\n.-blink {\n  -webkit-animation-name: binary-tree-highlight;\n  -webkit-animation-duration: 2s;\n  animation-name: binary-tree-highlight;\n  animation-duration: 2s;\n  animation-iteration-count: 1;\n}\n\n.-blink+text {\n  -webkit-animation-name: binary-tree-highlight-text;\n  -webkit-animation-duration: 2s;\n  animation-name: binary-tree-highlight-text;\n  animation-duration: 1s;\n  animation-iteration-count: 1;\n}\n\n.dull+text {\n  opacity: 0.25\n}\n\n.dull {\n  opacity: 0.25\n}\n\n.repeat {\n  animation-iteration-count: infinite;\n}\n\n.alternate {\n  animation-direction: alternate;\n}\n\n.fast {\n  animation-duration: .5s;\n}\n\n.delay1 {\n    animation-delay: 1s;\n}\n\n.delay2 {\n    animation-delay: 2s;\n}\n\n.delay3 {\n    animation-delay: 3s;\n}\n\n.delay4 {\n    animation-delay: 4s;\n}\n\n.delay5 {\n    animation-delay: 5s;\n}\n\n.delay6 {\n    animation-delay: 6s;\n}\n\n.delay7 {\n    animation-delay: 7s;\n}\n\n.delay8 {\n    animation-delay: 8s;\n}\n\n.delay9 {\n    animation-delay: 9s;\n}\n\n.delay10 {\n    animation-delay: 10s;\n}\n\n@-webkit-keyframes binary-tree-highlight {\n    from {fill: rgb(100, 100, 255);}\n    to {fill: rgb(204, 221, 255);}\n}\n\n@keyframes binary-tree-highlight {\n    from {fill: rgb(100, 100, 255);}\n    to {fill: rgb(204, 221, 255);}\n}\n\n@-webkit-keyframes binary-tree-highlight-text {\n    from {fill: white;}\n    to {fill: black;}\n}\n\n@keyframes binary-tree-highlight-text {\n    from {fill: white;}\n    to {fill: black;}\n}","site":{"data":{}},"excerpt":"","more":".admonition {\n  padding: 0 5px;\n  margin-bottom: 10px;\n  margin-left: 2.5em;\n  border: 1px solid transparent;\n  border-left: 4px solid;\n  border-radius: 1px;\n  text-align: left;\n}\n\n.admonition-title {\n  font-weight: bold;\n  text-align: left;\n}\n\n.admonition.note,\n.admonition.info,\n.admonition.tips {\n  color: #1d6fa5;\n  background-color: #a0cfee;\n  border-color: #3498db;\n}\n\n.admonition.warning,\n.admonition.warn,\n.admonition.important {\n  color: #a85913;\n  background-color: #f3c195;\n  border-color: #e67e22;\n}\n\n.admonition.danger,\n.admonition.critical {\n  color: #bf2718;\n  background-color: #f5b4ae;\n  border-color: #e74c3c;\n}\n\n.recents {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n#header-outer {\n  height: initial;\n}\n\n#banner {\n  background: center #000;\n}\n\n.center-children {\n  display: flex; \n  align-items: center; \n  justify-content: center;\n}\n\n.binary-tree-arrow {\n  z-index: 0; \n  cursor: inherit; \n  stroke: rgb(29, 27, 25); \n  stroke-width: 2px; \n  stroke-opacity: 1; \n  stroke-dasharray: none; \n  stroke-linecap: round; \n  stroke-linejoin: round;\n}\n\n.binary-tree-circle {\n  z-index: 1; \n  cursor: inherit; \n  stroke: rgb(29, 27, 25); \n  stroke-width: 3px; \n  stroke-opacity: 1; \n  stroke-dasharray: none; \n  stroke-linecap: round; \n  stroke-linejoin: round; \n  fill: rgb(204, 221, 255); \n  fill-opacity: 1;\n}\n\n.binary-tree-circle+text {\n  z-index: 2; \n  cursor: inherit; \n  font-family: Arial; \n  fill: black; \n  font-size: 16.40px; \n  font-weight: normal; \n  font-style: normal; \n  opacity: 1; \n  text-anchor: middle;\n}\n\n.-highlight {\n  fill: rgb(100, 100, 255); \n}\n\n.-highlight+text {\n  fill: white; \n}\n\n.-blink {\n  -webkit-animation-name: binary-tree-highlight;\n  -webkit-animation-duration: 2s;\n  animation-name: binary-tree-highlight;\n  animation-duration: 2s;\n  animation-iteration-count: 1;\n}\n\n.-blink+text {\n  -webkit-animation-name: binary-tree-highlight-text;\n  -webkit-animation-duration: 2s;\n  animation-name: binary-tree-highlight-text;\n  animation-duration: 1s;\n  animation-iteration-count: 1;\n}\n\n.dull+text {\n  opacity: 0.25\n}\n\n.dull {\n  opacity: 0.25\n}\n\n.repeat {\n  animation-iteration-count: infinite;\n}\n\n.alternate {\n  animation-direction: alternate;\n}\n\n.fast {\n  animation-duration: .5s;\n}\n\n.delay1 {\n    animation-delay: 1s;\n}\n\n.delay2 {\n    animation-delay: 2s;\n}\n\n.delay3 {\n    animation-delay: 3s;\n}\n\n.delay4 {\n    animation-delay: 4s;\n}\n\n.delay5 {\n    animation-delay: 5s;\n}\n\n.delay6 {\n    animation-delay: 6s;\n}\n\n.delay7 {\n    animation-delay: 7s;\n}\n\n.delay8 {\n    animation-delay: 8s;\n}\n\n.delay9 {\n    animation-delay: 9s;\n}\n\n.delay10 {\n    animation-delay: 10s;\n}\n\n@-webkit-keyframes binary-tree-highlight {\n    from {fill: rgb(100, 100, 255);}\n    to {fill: rgb(204, 221, 255);}\n}\n\n@keyframes binary-tree-highlight {\n    from {fill: rgb(100, 100, 255);}\n    to {fill: rgb(204, 221, 255);}\n}\n\n@-webkit-keyframes binary-tree-highlight-text {\n    from {fill: white;}\n    to {fill: black;}\n}\n\n@keyframes binary-tree-highlight-text {\n    from {fill: white;}\n    to {fill: black;}\n}"},{"title":"tags","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: tags\ncomments: false\n---\n","date":"2021-01-29T06:39:17.424Z","updated":"2021-01-29T06:39:17.424Z","path":"tags/index.html","layout":"page","_id":"ckki0ed2t0005nbs66rxadtc0","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"How to check if a Binary Tree is Symmetric","date":"2021-01-26T18:30:00.000Z","author":"Jyothi Prasad Buddha","description":"This article discusses solutions for verifying if a binary tree is symmetric or not","_content":"\nAssuming that you are given a root node of a binary tree, you need to test if the tree is symmetric. This problem can be solved by both iterative and recursive approaches. Before we jump into learning how to test it. Let us look at some examples on to understand what is a symmetric or mirror binary tree.\n\n<img src=\"/assets/svgs/2021/01/symmetric-binary-tree-examples.svg\" onclick=\"return false\" alt=\"Examples for mirror/symmetric binary trees\">\n\nEach examples given above looks exactly same if we swap right and left nodes at every level. Take the second and third trees in the above picture, even if some nodes are missing. The nodes in the third level of the second binary tree is `[3, null, null, 3]` and when we reverse them the resulting list is going to be `[null, 3, 3, null]`, however as their parents are also going to be flipped, 1st & 2nd elements will become 3rd and 4th and viceversa so the end result will be `[3, null, 3, null]`.\n\n<img src=\"/assets/svgs/2021/01/non-symmetric-binary-tree-examples.svg\" alt=\"Examples that violate mirror/symmetric binary tree rules\">\n\nIn the above examples, first and third examples are very straight forward. The second example however may be little confusing. The list of elements in lever order is `[3, null, 3, null]`. When their parents are flipped the nodes will become `[3, null, 3, null]` but as in the process of finding mirror tree we also flip the leaf nodes so in the end the result is going to be `[null, 3, null, 3]` which is no where same as the original. I gave how to tree looks when we see the same in a mirror.examples\n\n<img src=\"/assets/svgs/2021/01/mirror-copies-not-matching.svg\" alt=\"Mirror tree no longer looks the same\">\n\nThere are numerous ways to solve this problem we will look at three different ways to solve this problem. I will provide the code samples using Java, but they should translate to any programming language with ease. <!-- more -->\n\n<!-- more -->\n\n### Still being written, come after few days\n","source":"_drafts/2021/01/how-to-check-if-binary-tree-is-symmetric-or-not.md","raw":"---\ntitle: How to check if a Binary Tree is Symmetric\ndate: 2021-01-27\ntags: ['java', 'algorithms', 'data-structures', 'problem', 'interview-question', 'binary-tree']\nauthor: Jyothi Prasad Buddha\ndescription: This article discusses solutions for verifying if a binary tree is symmetric or not\n---\n\nAssuming that you are given a root node of a binary tree, you need to test if the tree is symmetric. This problem can be solved by both iterative and recursive approaches. Before we jump into learning how to test it. Let us look at some examples on to understand what is a symmetric or mirror binary tree.\n\n<img src=\"/assets/svgs/2021/01/symmetric-binary-tree-examples.svg\" onclick=\"return false\" alt=\"Examples for mirror/symmetric binary trees\">\n\nEach examples given above looks exactly same if we swap right and left nodes at every level. Take the second and third trees in the above picture, even if some nodes are missing. The nodes in the third level of the second binary tree is `[3, null, null, 3]` and when we reverse them the resulting list is going to be `[null, 3, 3, null]`, however as their parents are also going to be flipped, 1st & 2nd elements will become 3rd and 4th and viceversa so the end result will be `[3, null, 3, null]`.\n\n<img src=\"/assets/svgs/2021/01/non-symmetric-binary-tree-examples.svg\" alt=\"Examples that violate mirror/symmetric binary tree rules\">\n\nIn the above examples, first and third examples are very straight forward. The second example however may be little confusing. The list of elements in lever order is `[3, null, 3, null]`. When their parents are flipped the nodes will become `[3, null, 3, null]` but as in the process of finding mirror tree we also flip the leaf nodes so in the end the result is going to be `[null, 3, null, 3]` which is no where same as the original. I gave how to tree looks when we see the same in a mirror.examples\n\n<img src=\"/assets/svgs/2021/01/mirror-copies-not-matching.svg\" alt=\"Mirror tree no longer looks the same\">\n\nThere are numerous ways to solve this problem we will look at three different ways to solve this problem. I will provide the code samples using Java, but they should translate to any programming language with ease. <!-- more -->\n\n<!-- more -->\n\n### Still being written, come after few days\n","slug":"2021/01/how-to-check-if-binary-tree-is-symmetric-or-not","published":0,"updated":"2021-01-26T18:30:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckki0ed2n0001nbs6da9191lc","content":"<p>Assuming that you are given a root node of a binary tree, you need to test if the tree is symmetric. This problem can be solved by both iterative and recursive approaches. Before we jump into learning how to test it. Let us look at some examples on to understand what is a symmetric or mirror binary tree.</p>\n<img src=\"/assets/svgs/2021/01/symmetric-binary-tree-examples.svg\" onclick=\"return false\" alt=\"Examples for mirror/symmetric binary trees\">\n\n<p>Each examples given above looks exactly same if we swap right and left nodes at every level. Take the second and third trees in the above picture, even if some nodes are missing. The nodes in the third level of the second binary tree is <code>[3, null, null, 3]</code> and when we reverse them the resulting list is going to be <code>[null, 3, 3, null]</code>, however as their parents are also going to be flipped, 1st &amp; 2nd elements will become 3rd and 4th and viceversa so the end result will be <code>[3, null, 3, null]</code>.</p>\n<img src=\"/assets/svgs/2021/01/non-symmetric-binary-tree-examples.svg\" alt=\"Examples that violate mirror/symmetric binary tree rules\">\n\n<p>In the above examples, first and third examples are very straight forward. The second example however may be little confusing. The list of elements in lever order is <code>[3, null, 3, null]</code>. When their parents are flipped the nodes will become <code>[3, null, 3, null]</code> but as in the process of finding mirror tree we also flip the leaf nodes so in the end the result is going to be <code>[null, 3, null, 3]</code> which is no where same as the original. I gave how to tree looks when we see the same in a mirror.examples</p>\n<img src=\"/assets/svgs/2021/01/mirror-copies-not-matching.svg\" alt=\"Mirror tree no longer looks the same\">\n\n<p>There are numerous ways to solve this problem we will look at three different ways to solve this problem. I will provide the code samples using Java, but they should translate to any programming language with ease. <a id=\"more\"></a></p>\n<!-- more -->\n\n<h3 id=\"Still-being-written-come-after-few-days\"><a href=\"#Still-being-written-come-after-few-days\" class=\"headerlink\" title=\"Still being written, come after few days\"></a>Still being written, come after few days</h3>","site":{"data":{}},"excerpt":"<p>Assuming that you are given a root node of a binary tree, you need to test if the tree is symmetric. This problem can be solved by both iterative and recursive approaches. Before we jump into learning how to test it. Let us look at some examples on to understand what is a symmetric or mirror binary tree.</p>\n<img src=\"/assets/svgs/2021/01/symmetric-binary-tree-examples.svg\" onclick=\"return false\" alt=\"Examples for mirror/symmetric binary trees\">\n\n<p>Each examples given above looks exactly same if we swap right and left nodes at every level. Take the second and third trees in the above picture, even if some nodes are missing. The nodes in the third level of the second binary tree is <code>[3, null, null, 3]</code> and when we reverse them the resulting list is going to be <code>[null, 3, 3, null]</code>, however as their parents are also going to be flipped, 1st &amp; 2nd elements will become 3rd and 4th and viceversa so the end result will be <code>[3, null, 3, null]</code>.</p>\n<img src=\"/assets/svgs/2021/01/non-symmetric-binary-tree-examples.svg\" alt=\"Examples that violate mirror/symmetric binary tree rules\">\n\n<p>In the above examples, first and third examples are very straight forward. The second example however may be little confusing. The list of elements in lever order is <code>[3, null, 3, null]</code>. When their parents are flipped the nodes will become <code>[3, null, 3, null]</code> but as in the process of finding mirror tree we also flip the leaf nodes so in the end the result is going to be <code>[null, 3, null, 3]</code> which is no where same as the original. I gave how to tree looks when we see the same in a mirror.examples</p>\n<img src=\"/assets/svgs/2021/01/mirror-copies-not-matching.svg\" alt=\"Mirror tree no longer looks the same\">\n\n<p>There are numerous ways to solve this problem we will look at three different ways to solve this problem. I will provide the code samples using Java, but they should translate to any programming language with ease.","more":"</p>\n<!-- more -->\n\n<h3 id=\"Still-being-written-come-after-few-days\"><a href=\"#Still-being-written-come-after-few-days\" class=\"headerlink\" title=\"Still being written, come after few days\"></a>Still being written, come after few days</h3>"},{"title":"Disable DynAdmin authentication of Oracle Commerce","date":"2016-03-31T18:30:00.000Z","author":"Buddha","description":"Couple of handy dandy tricks for bypassing the authentication mechanism of Dyn Admin for a quick opening of it.","_content":"We use Dyn/Admin for many of the development related tasks of Oracle Commerce(ATG). However, the log-in ticket expires too frequently forcing us to enter credentials repeatedly. Some times we will also have to give both application server(weblogic/jboss) credentials and dynamo administration credentials. As we are not in a production critical environment where multiple people may access our DynAdmin and create issues, it is not necessary to have this security check every time we try to open DynAdmin of our development environment. I have found following solutions to be free of this issue. This can come in handy when we are doing active development and have to frequently access dynamo administration.\n\n## Solution 1 - Enable lazyAthentication\nThis approach works by enabling Lazy Athentication which means login will only be asked once per session. This means, as long as the session is not expired, dyn/admin will not ask for credentials again. <!-- more -->I have observed that this means a very long time. Sometimes even the the authentication credentials are not asked after restarting the server. Follow the below steps to enable lazyAthentication.\n1. Navigate to %DYNAMO_HOME%/localconfig/atg/dynamo\n1. Create a folder named servlet if it doesn't already exist\n1. Create a folder named adminpipeline inside servlet folder if it doesn't already exist\n1. Create a properties files with the name Authenticator.properties with below content in it and restart the server.\n\n{% codeblock atg/dynamo/servlet/adminpipeline/Authenticator.properties lang:java %}\n$class=atg.servlet.pipeline.UserAuthorityAuthenticator\n$scope=global\nlazyAthentication=true\n{% endcodeblock %}\n\n## Solution 2 - Disable AuthenticationServlet\nFirst solution provides respite from entering DynAdmin credentials frequently, however we still have to enter it once per session. Here is a better approach, my personal favourite. If we would like to disable the authentication for much longer period, we can disable authentication altogether, it can be acheived by disabling AuthenticationServlet component. Below approach can be followed for achieving that.\n1. Navigate to %DYNAMO_HOME%/localconfig/atg/dynamo\n1. Create a folder named servlet if it doesn't already exist\n1. Create a folder named adminpipeline inside servlet folder if it doesn't already exist\n1. Create a properties files with the name AuthenticationServlet.properties with below content in it and restart the server.\n\n{% codeblock atg/dynamo/servlet/adminpipeline/AuthenticationServlet.properties  lang:java %}\n$class=atg.servlet.pipeline.BasicAuthenticationPipelineServlet\nenabled=false\n{% endcodeblock %}\n\nAuthentication can be enabled again by changing enabled=true in AuthenticationServlet.properties.\n\n{% admonition warning Watchout %}\nIt is a good idea to disable lazyAthentication and enable AuthenticationServlet component when testing some authentication related tests. Neither of the approaches have been tested with LDAP or other authentication mechanisms.\n{% endadmonition %}\n","source":"_posts/2016/04/disable-dynadmin-auth-dev-env-oracle-commerce.md","raw":"---\ntitle: Disable DynAdmin authentication of Oracle Commerce\ndate: 2016-04-01\ntags: ['atg', 'configuration', 'oraclecommerce', 'hack']\nauthor: Buddha\ndescription: Couple of handy dandy tricks for bypassing the authentication mechanism of Dyn Admin for a quick opening of it.\n---\nWe use Dyn/Admin for many of the development related tasks of Oracle Commerce(ATG). However, the log-in ticket expires too frequently forcing us to enter credentials repeatedly. Some times we will also have to give both application server(weblogic/jboss) credentials and dynamo administration credentials. As we are not in a production critical environment where multiple people may access our DynAdmin and create issues, it is not necessary to have this security check every time we try to open DynAdmin of our development environment. I have found following solutions to be free of this issue. This can come in handy when we are doing active development and have to frequently access dynamo administration.\n\n## Solution 1 - Enable lazyAthentication\nThis approach works by enabling Lazy Athentication which means login will only be asked once per session. This means, as long as the session is not expired, dyn/admin will not ask for credentials again. <!-- more -->I have observed that this means a very long time. Sometimes even the the authentication credentials are not asked after restarting the server. Follow the below steps to enable lazyAthentication.\n1. Navigate to %DYNAMO_HOME%/localconfig/atg/dynamo\n1. Create a folder named servlet if it doesn't already exist\n1. Create a folder named adminpipeline inside servlet folder if it doesn't already exist\n1. Create a properties files with the name Authenticator.properties with below content in it and restart the server.\n\n{% codeblock atg/dynamo/servlet/adminpipeline/Authenticator.properties lang:java %}\n$class=atg.servlet.pipeline.UserAuthorityAuthenticator\n$scope=global\nlazyAthentication=true\n{% endcodeblock %}\n\n## Solution 2 - Disable AuthenticationServlet\nFirst solution provides respite from entering DynAdmin credentials frequently, however we still have to enter it once per session. Here is a better approach, my personal favourite. If we would like to disable the authentication for much longer period, we can disable authentication altogether, it can be acheived by disabling AuthenticationServlet component. Below approach can be followed for achieving that.\n1. Navigate to %DYNAMO_HOME%/localconfig/atg/dynamo\n1. Create a folder named servlet if it doesn't already exist\n1. Create a folder named adminpipeline inside servlet folder if it doesn't already exist\n1. Create a properties files with the name AuthenticationServlet.properties with below content in it and restart the server.\n\n{% codeblock atg/dynamo/servlet/adminpipeline/AuthenticationServlet.properties  lang:java %}\n$class=atg.servlet.pipeline.BasicAuthenticationPipelineServlet\nenabled=false\n{% endcodeblock %}\n\nAuthentication can be enabled again by changing enabled=true in AuthenticationServlet.properties.\n\n{% admonition warning Watchout %}\nIt is a good idea to disable lazyAthentication and enable AuthenticationServlet component when testing some authentication related tests. Neither of the approaches have been tested with LDAP or other authentication mechanisms.\n{% endadmonition %}\n","slug":"2016/04/disable-dynadmin-auth-dev-env-oracle-commerce","published":1,"updated":"2016-03-31T18:30:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckki0ed2r0003nbs6862u29f4","content":"<p>We use Dyn/Admin for many of the development related tasks of Oracle Commerce(ATG). However, the log-in ticket expires too frequently forcing us to enter credentials repeatedly. Some times we will also have to give both application server(weblogic/jboss) credentials and dynamo administration credentials. As we are not in a production critical environment where multiple people may access our DynAdmin and create issues, it is not necessary to have this security check every time we try to open DynAdmin of our development environment. I have found following solutions to be free of this issue. This can come in handy when we are doing active development and have to frequently access dynamo administration.</p>\n<h2 id=\"Solution-1-Enable-lazyAthentication\"><a href=\"#Solution-1-Enable-lazyAthentication\" class=\"headerlink\" title=\"Solution 1 - Enable lazyAthentication\"></a>Solution 1 - Enable lazyAthentication</h2><p>This approach works by enabling Lazy Athentication which means login will only be asked once per session. This means, as long as the session is not expired, dyn/admin will not ask for credentials again. <a id=\"more\"></a>I have observed that this means a very long time. Sometimes even the the authentication credentials are not asked after restarting the server. Follow the below steps to enable lazyAthentication.</p>\n<ol>\n<li>Navigate to %DYNAMO_HOME%/localconfig/atg/dynamo</li>\n<li>Create a folder named servlet if it doesn’t already exist</li>\n<li>Create a folder named adminpipeline inside servlet folder if it doesn’t already exist</li>\n<li>Create a properties files with the name Authenticator.properties with below content in it and restart the server.</li>\n</ol>\n<figure class=\"highlight java\"><figcaption><span>atg/dynamo/servlet/adminpipeline/Authenticator.properties</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$<span class=\"class\"><span class=\"keyword\">class</span></span>=atg.servlet.pipeline.UserAuthorityAuthenticator</span><br><span class=\"line\">$scope=global</span><br><span class=\"line\">lazyAthentication=<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Solution-2-Disable-AuthenticationServlet\"><a href=\"#Solution-2-Disable-AuthenticationServlet\" class=\"headerlink\" title=\"Solution 2 - Disable AuthenticationServlet\"></a>Solution 2 - Disable AuthenticationServlet</h2><p>First solution provides respite from entering DynAdmin credentials frequently, however we still have to enter it once per session. Here is a better approach, my personal favourite. If we would like to disable the authentication for much longer period, we can disable authentication altogether, it can be acheived by disabling AuthenticationServlet component. Below approach can be followed for achieving that.</p>\n<ol>\n<li>Navigate to %DYNAMO_HOME%/localconfig/atg/dynamo</li>\n<li>Create a folder named servlet if it doesn’t already exist</li>\n<li>Create a folder named adminpipeline inside servlet folder if it doesn’t already exist</li>\n<li>Create a properties files with the name AuthenticationServlet.properties with below content in it and restart the server.</li>\n</ol>\n<figure class=\"highlight java\"><figcaption><span>atg/dynamo/servlet/adminpipeline/AuthenticationServlet.properties</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$<span class=\"class\"><span class=\"keyword\">class</span></span>=atg.servlet.pipeline.BasicAuthenticationPipelineServlet</span><br><span class=\"line\">enabled=<span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>Authentication can be enabled again by changing enabled=true in AuthenticationServlet.properties.</p>\n<div class=\"admonition warning\"><p class=\"admonition-title\">Watchout</p><p>It is a good idea to disable lazyAthentication and enable AuthenticationServlet component when testing some authentication related tests. Neither of the approaches have been tested with LDAP or other authentication mechanisms.</p>\n</div>\n","site":{"data":{}},"excerpt":"<p>We use Dyn/Admin for many of the development related tasks of Oracle Commerce(ATG). However, the log-in ticket expires too frequently forcing us to enter credentials repeatedly. Some times we will also have to give both application server(weblogic/jboss) credentials and dynamo administration credentials. As we are not in a production critical environment where multiple people may access our DynAdmin and create issues, it is not necessary to have this security check every time we try to open DynAdmin of our development environment. I have found following solutions to be free of this issue. This can come in handy when we are doing active development and have to frequently access dynamo administration.</p>\n<h2 id=\"Solution-1-Enable-lazyAthentication\"><a href=\"#Solution-1-Enable-lazyAthentication\" class=\"headerlink\" title=\"Solution 1 - Enable lazyAthentication\"></a>Solution 1 - Enable lazyAthentication</h2><p>This approach works by enabling Lazy Athentication which means login will only be asked once per session. This means, as long as the session is not expired, dyn/admin will not ask for credentials again.","more":"I have observed that this means a very long time. Sometimes even the the authentication credentials are not asked after restarting the server. Follow the below steps to enable lazyAthentication.</p>\n<ol>\n<li>Navigate to %DYNAMO_HOME%/localconfig/atg/dynamo</li>\n<li>Create a folder named servlet if it doesn’t already exist</li>\n<li>Create a folder named adminpipeline inside servlet folder if it doesn’t already exist</li>\n<li>Create a properties files with the name Authenticator.properties with below content in it and restart the server.</li>\n</ol>\n<figure class=\"highlight java\"><figcaption><span>atg/dynamo/servlet/adminpipeline/Authenticator.properties</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$<span class=\"class\"><span class=\"keyword\">class</span></span>=atg.servlet.pipeline.UserAuthorityAuthenticator</span><br><span class=\"line\">$scope=global</span><br><span class=\"line\">lazyAthentication=<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Solution-2-Disable-AuthenticationServlet\"><a href=\"#Solution-2-Disable-AuthenticationServlet\" class=\"headerlink\" title=\"Solution 2 - Disable AuthenticationServlet\"></a>Solution 2 - Disable AuthenticationServlet</h2><p>First solution provides respite from entering DynAdmin credentials frequently, however we still have to enter it once per session. Here is a better approach, my personal favourite. If we would like to disable the authentication for much longer period, we can disable authentication altogether, it can be acheived by disabling AuthenticationServlet component. Below approach can be followed for achieving that.</p>\n<ol>\n<li>Navigate to %DYNAMO_HOME%/localconfig/atg/dynamo</li>\n<li>Create a folder named servlet if it doesn’t already exist</li>\n<li>Create a folder named adminpipeline inside servlet folder if it doesn’t already exist</li>\n<li>Create a properties files with the name AuthenticationServlet.properties with below content in it and restart the server.</li>\n</ol>\n<figure class=\"highlight java\"><figcaption><span>atg/dynamo/servlet/adminpipeline/AuthenticationServlet.properties</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$<span class=\"class\"><span class=\"keyword\">class</span></span>=atg.servlet.pipeline.BasicAuthenticationPipelineServlet</span><br><span class=\"line\">enabled=<span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>Authentication can be enabled again by changing enabled=true in AuthenticationServlet.properties.</p>\n<div class=\"admonition warning\"><p class=\"admonition-title\">Watchout</p><p>It is a good idea to disable lazyAthentication and enable AuthenticationServlet component when testing some authentication related tests. Neither of the approaches have been tested with LDAP or other authentication mechanisms.</p>\n</div>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Mar 31 2016 11:30:00 GMT-0700 (Pacific Daylight Time)","title":"Disable DynAdmin authentication of Oracle Commerce","path":"2016/04/disable-dynadmin-auth-dev-env-oracle-commerce/","eyeCatchImage":null,"excerpt":"Couple of handy dandy tricks for bypassing the authentication mechanism of Dyn Admin for a quick opening of it.","date":{"_isAMomentObject":true,"_i":"2016-03-31T18:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2016-03-31T18:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["atg","configuration","oraclecommerce","hack"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Restricting an ojInputText to accept only numbers","date":"2016-04-21T18:30:00.000Z","author":"Buddha","description":"The ojInputText component of OracleJet doesn't let you restrict the input. Here is a solution that rejects any non numeric characters.","_content":"Oracle Jet is a beautiful toolkit for simplifying lot of tasks. ojInputText is a basic editor the framework provides, it can validate the text entered based on the regular expression we give, but validation only happens on blur and if we simply want to filter any keystrokes that don't match that, we can't do it by default.\n\nHere is the result before we go and learn how to do it.\n{% codepen mErVGe 'Allow only numbers in OjInputText' result wait %}\n\nOfcourse we can use ojInputNumber and use the example they gave for eating non-numbers, but what if we don't want the increment and decrement the arrows of ojInputNumber. One way to do it is to bind a keyUp event and check everytime a character is pressed. Infact this is the approach that is used for the example given in OracleJet cookbook.\n\nHere is an alternative approach using ojInputText. Instead of bindng to value, we can bind to rawValue attribute. This ensures that the observable gets updated on every keystroke. <!-- more -->To acheive the result, I have created a helper observable which is a computed observable depending on the value of text box. Whenever a new key is pressed, the computation of helper observable takes place. Here, I used simple javascript regex method to cleanup. Once the cleanup is done, I'm updating the original input text if the value has changed, otherwise I'm leaving it alone. See the below Pen, if you want to see the code and the ojInputText in action.\n\n{% codepen mErVGe 'Allow only numbers in OjInputText' html %}\n","source":"_posts/2016/04/restricting-ojinputtext-for-numericals.md","raw":"---\ntitle: Restricting an ojInputText to accept only numbers\ndate: 2016-04-22\ntags: ['oraclejet', 'javascript', 'html']\nauthor: Buddha\ndescription: The ojInputText component of OracleJet doesn't let you restrict the input. Here is a solution that rejects any non numeric characters.\n---\nOracle Jet is a beautiful toolkit for simplifying lot of tasks. ojInputText is a basic editor the framework provides, it can validate the text entered based on the regular expression we give, but validation only happens on blur and if we simply want to filter any keystrokes that don't match that, we can't do it by default.\n\nHere is the result before we go and learn how to do it.\n{% codepen mErVGe 'Allow only numbers in OjInputText' result wait %}\n\nOfcourse we can use ojInputNumber and use the example they gave for eating non-numbers, but what if we don't want the increment and decrement the arrows of ojInputNumber. One way to do it is to bind a keyUp event and check everytime a character is pressed. Infact this is the approach that is used for the example given in OracleJet cookbook.\n\nHere is an alternative approach using ojInputText. Instead of bindng to value, we can bind to rawValue attribute. This ensures that the observable gets updated on every keystroke. <!-- more -->To acheive the result, I have created a helper observable which is a computed observable depending on the value of text box. Whenever a new key is pressed, the computation of helper observable takes place. Here, I used simple javascript regex method to cleanup. Once the cleanup is done, I'm updating the original input text if the value has changed, otherwise I'm leaving it alone. See the below Pen, if you want to see the code and the ojInputText in action.\n\n{% codepen mErVGe 'Allow only numbers in OjInputText' html %}\n","slug":"2016/04/restricting-ojinputtext-for-numericals","published":1,"updated":"2016-04-21T18:30:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckki0ed2t0006nbs67dikg00m","content":"<p>Oracle Jet is a beautiful toolkit for simplifying lot of tasks. ojInputText is a basic editor the framework provides, it can validate the text entered based on the regular expression we give, but validation only happens on blur and if we simply want to filter any keystrokes that don’t match that, we can’t do it by default.</p>\n<p>Here is the result before we go and learn how to do it.</p>\n<p data-height=\"350\" data-theme-id=\"0\" data-slug-hash=\"mErVGe\" data-default-tab=\"result\" data-user=\"jbuddha\" data-embed-version=\"2\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/jbuddha/pen/mErVGe/\">Allow only numbers in OjInputText</a> by Buddha (<a href=\"http://codepen.io/jbuddha\">@jbuddha</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n<p>Ofcourse we can use ojInputNumber and use the example they gave for eating non-numbers, but what if we don’t want the increment and decrement the arrows of ojInputNumber. One way to do it is to bind a keyUp event and check everytime a character is pressed. Infact this is the approach that is used for the example given in OracleJet cookbook.</p>\n<p>Here is an alternative approach using ojInputText. Instead of bindng to value, we can bind to rawValue attribute. This ensures that the observable gets updated on every keystroke. <a id=\"more\"></a>To acheive the result, I have created a helper observable which is a computed observable depending on the value of text box. Whenever a new key is pressed, the computation of helper observable takes place. Here, I used simple javascript regex method to cleanup. Once the cleanup is done, I’m updating the original input text if the value has changed, otherwise I’m leaving it alone. See the below Pen, if you want to see the code and the ojInputText in action.</p>\n<p data-height=\"350\" data-theme-id=\"0\" data-slug-hash=\"mErVGe\" data-default-tab=\"html\" data-user=\"jbuddha\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/jbuddha/pen/mErVGe/\">Allow only numbers in OjInputText</a> by Buddha (<a href=\"http://codepen.io/jbuddha\">@jbuddha</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n","site":{"data":{}},"excerpt":"<p>Oracle Jet is a beautiful toolkit for simplifying lot of tasks. ojInputText is a basic editor the framework provides, it can validate the text entered based on the regular expression we give, but validation only happens on blur and if we simply want to filter any keystrokes that don’t match that, we can’t do it by default.</p>\n<p>Here is the result before we go and learn how to do it.</p>\n<p data-height=\"350\" data-theme-id=\"0\" data-slug-hash=\"mErVGe\" data-default-tab=\"result\" data-user=\"jbuddha\" data-embed-version=\"2\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/jbuddha/pen/mErVGe/\">Allow only numbers in OjInputText</a> by Buddha (<a href=\"http://codepen.io/jbuddha\">@jbuddha</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n<p>Ofcourse we can use ojInputNumber and use the example they gave for eating non-numbers, but what if we don’t want the increment and decrement the arrows of ojInputNumber. One way to do it is to bind a keyUp event and check everytime a character is pressed. Infact this is the approach that is used for the example given in OracleJet cookbook.</p>\n<p>Here is an alternative approach using ojInputText. Instead of bindng to value, we can bind to rawValue attribute. This ensures that the observable gets updated on every keystroke.","more":"To acheive the result, I have created a helper observable which is a computed observable depending on the value of text box. Whenever a new key is pressed, the computation of helper observable takes place. Here, I used simple javascript regex method to cleanup. Once the cleanup is done, I’m updating the original input text if the value has changed, otherwise I’m leaving it alone. See the below Pen, if you want to see the code and the ojInputText in action.</p>\n<p data-height=\"350\" data-theme-id=\"0\" data-slug-hash=\"mErVGe\" data-default-tab=\"html\" data-user=\"jbuddha\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/jbuddha/pen/mErVGe/\">Allow only numbers in OjInputText</a> by Buddha (<a href=\"http://codepen.io/jbuddha\">@jbuddha</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Apr 21 2016 11:30:00 GMT-0700 (Pacific Daylight Time)","title":"Restricting an ojInputText to accept only numbers","path":"2016/04/restricting-ojinputtext-for-numericals/","eyeCatchImage":null,"excerpt":"The ojInputText component of OracleJet doesn't let you restrict the input. Here is a solution that rejects any non numeric characters.","date":{"_isAMomentObject":true,"_i":"2016-04-21T18:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2016-04-21T18:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["oraclejet","javascript","html"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Generating the Jam Coins","date":"2016-04-11T18:30:00.000Z","author":"Buddha","description":"I'm going to show you how to solve JamCoins problem of 2016 Google codejam for both small as well as large datasets within time limit.","sourcecode":"https://github.com/jbuddha/competitions/blob/master/codejam/src/year2016/JamCoins.java","sourcetype":"g","_content":"\nHere is a moderate problem of CodeJam's qualification round of 2016. The Jam Coins. It is an interesting problem which gives a glimpse into another popular virtual currency, bit-coin mining. Here is the description of the problem. You need to generate jamcoins of either 16 digits for small dataset or 32 digits for large datasets. Jam Coins follow the given rules...\n1. A Jam Coin is only made up of 1's & 0's of the required number of digits.\n1. It begins and ends with 1.\n1. If that interpreted from base 2 to base 10, it should not be a prime number in any of them.\n\nFor Small dataset, you need to generate 50 jam coins of 16 digits and for large dataset, you need to generate 500 jam coins of 32 digits following above rules.\n<!-- more -->\nOutput should be the list of Jam Coins where each is followed by a divisor of that number in each base.\n\nLet us say that we want to test if `11001101` is a jam coin or not.\n\nIf we assume that the number is in base 2, it's decimal equivalent is 2^7+2^6+2^3+2^2+1 = 205 => Not a prime number => Divisible by 5\nIf we assume that the number is in base 3, it's decimal equivalent is 3^7+3^6+3^3+3^2+1 = 2953 => Prime Number => Hence not a jam coin\n\nLet us test `1010101`\n\n{% raw %}\n<div style=\"width: 50%;\">\n{% endraw %}\n\n|Base|Decimal Equivalent|Divisior|\n|-|-|-|\n|2| 85      |5 |\n|3| 820     |2|\n|4| 4369    |17|\n|5| 16276   |2|\n|6| 47989   |37|\n|7| 120100  |2|\n|8| 266305  |5|\n|9| 538084  |2|\n|10|1010101 |73|\n\n{% raw %}\n</div>\n{% endraw %}\n\nIt is divisible by some or number in all bases from 2 to 10. Hence it is a Jam Coin. We need to generate such coins with given number of digits.\n\nHence this can be included in output as below if the input is `7 10`\n\n```\nCase #1:\n1000001 5 2 17 2 13 2 5 2 101\n1001011 3 2 5 2 7 2 3 2 11\n1010101 5 2 17 2 37 2 5 2 73\n1011101 3 7 11 3 5 43 3 11 7\n1011111 5 2 3 2 37 2 5 2 3\n1100011 3 2 5 2 7 2 3 2 11\n1101001 3 2 5 2 7 2 3 2 11\n1101111 3 2 3 2 7 2 3 2 3\n1110111 7 2 3 2 43 2 17 2 3\n1111011 3 2 3 2 7 2 3 2 3\n```\n\n## My solution\nLet us begin with breaking the problem into manageable chunks before we try to solve it.\n\n{% codeblock Solution Pseudo Code  %}\nGenerate a number with required number of digits\n    - Convert it to decimal assuming it is base 2\n    - Test if it is a prime number\n    - If it is a prime number, go to step 1 else continue\n    - Convert it to decimal assuming it is base 3\n    - Test if it is a prime number\n    - If it is a prime number, go to step 1 else continue\n    - .... repeat till you reach base 10\nFind Divisors in each base\nPrint the number\nPrint all divisors\n{% endcodeblock %}\n\nThere are several complex problems inside the deceptively simple pseudocode\n\n1. Handle large numbers. 16 digits are way too big for a long datatype.\n1. Generate a number of required digits of 1's & 0's\n2. Convert the number to decimal from given base\n3. Testing if it is prime number\n4. Finding a divisor\n\nLet us solve them one by one\n\n##### [1/5]Handling insanely large numbers\nIt depends on the programming language of your choice. For this solution, I have chosen Java, which has java.math.BigInteger class that can store numbers and provides a very useful methods for prime number calculations. Example usage is as below.\n{% codeblock HelloWorldComponent.java lang:java  %}\nBigInteger num = new BigInteger(\"101010110000011\");\nnum.nextProbablePrime();\nnum.isProbablePrime(10);\nnum = new BigInteger(\"100001\",3);   // converts 100001 to base 10 from base 3\nnum.toString(2);                    // converts the num to base 2 from base 10\n{% endcodeblock %}\n\n##### [2/5]Generating combination of 1s and 0s that begin and end with 1\nFollowing is the algorithm I followed.\n1. Generate a string of zeroes of size n-2, assuming n is the length required\n1. Append 1 before and after the string of zeroes\n1. To Generate another number, imagine the number if in binary, adding two(10 in binary format) will give next odd number. Any number ending with 1 in binary number is an odd number.\n\n```\n100000000001\n           +\n          10\n------------\n100000000011\n           +\n          10\n------------\n100000000101\n\n```\nHow do you add 10 in binary format? Just convert that base 2 number to base 10 and add 2 and convert it back to binary number, which leads us to the following question.\n\n##### [3/5]Convert the number to decimal from given base\n```\nBigInteger incrementInBinaryByTwo(BigInteger num)\n{\n\treturn new BigInteger(new BigInteger(num.toString(),2).add(ONE).add(ONE).toString(2));\n}\n```\nConverting from a decimal number to binary format is as simple as calling toString method with 2 as the parameter.\n\n##### [4/5]Testing if it is a prime number\nBigInteger class of Java provides a nice API to work with prime numbers\n\nBigInteger.isProbablePrime() will return false if it is definately not a prime and returns true, if the probablity for this number to be a prime number is less than 2^-100. Hence for our purpose of finding it is not a prime number this would serve the purpose.\n```\nstatic boolean isComposite(BigInteger num) {\n    for (int base = 2; base < 11; base++) {\n        if (new BigInteger(num.toString(), base).isProbablePrime(10)) {\n            return false;\n        }\n    }\n    return true;\n}\n```\n\n##### [5/5]Finding a divisor\nBigInteger has nextProbablePrime method that returns a prime number after the given number. So, if we use it on a prime number, we can get the next prime number and so on. As we can now get all prime numbers one after the another, we can divide our number with each prime number and return the first divisor. However, going indefinately till all primes are verified is inefficient for this problem. There will be simpler jam coins to mine. So, we will test for first 10000 prime numbers. If it is not divisible by any of it, we ignore that number and continue with next number. Here is the code.\n\n```\nstatic BigInteger findSmallestFactor(BigInteger n) {\n    BigInteger half = sqrt(n);\n    BigInteger factor = new BigInteger(\"2\");\n    int counter = 0;\n    while (factor.compareTo(half) < 0 && !n.mod(factor).equals(BigInteger.ZERO)) {\n        factor = factor.nextProbablePrime();\n        counter++;\n        if (counter == 10000) {\n            break;\n        }\n    }\n    if (!n.mod(factor).equals(BigInteger.ZERO)) {\n        throw new RuntimeException();\n    }\n    return factor;\n}\n```\n\n{% codeblock JamCoins.java lang:java  %}\npackage year2016;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport static java.math.BigInteger.ONE;\nimport java.nio.charset.Charset;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class JamCoins {\n\n    static List<BigInteger> coins = new ArrayList<>();\n\n    public static void processTest(String test) {\n\n        int size = Integer.parseInt(test.split(\" \")[0]);\n        int count = Integer.parseInt(test.split(\" \")[1]);\n\n        List<BigInteger> jamCoins = new ArrayList<>();\n        String zeroes = \"\";\n        for (int i = 2; i < size; i++) {\n            zeroes += \"0\";\n        }\n\n        BigInteger num = new BigInteger(\"1\" + zeroes + \"1\");\n        String entry = \"\";\n\n        while (num.toString().length() == size && jamCoins.size() < count) {\n            if (isComposite(num)) {\n                try {\n                    entry = num.toString();\n                    for (int base = 2; base < 11; base++) {\n                        entry += \" \" + findSmallestFactor(new BigInteger(num.toString(), base));\n                    }\n                    addOutput(entry);\n                    jamCoins.add(num);\n                } catch (Exception e) {\n                }\n            }\n\n            num = incrementInBinaryByTwo(num);\n        }\n    }\n\n    static BigInteger findSmallestFactor(BigInteger n) {\n        BigInteger half = sqrt(n);\n        BigInteger factor = new BigInteger(\"2\");\n        int counter = 0;\n        while (factor.compareTo(half) < 0 && !n.mod(factor).equals(BigInteger.ZERO)) {\n            factor = factor.nextProbablePrime();\n            counter++;\n            if (counter == 10000) {\n                break;\n            }\n        }\n        if (!n.mod(factor).equals(BigInteger.ZERO)) {\n            throw new RuntimeException();\n        }\n        return factor;\n    }\n\n    static BigInteger sqrt(BigInteger n) {\n        BigInteger div = BigInteger.ZERO.setBit(n.bitLength() / 2);\n        BigInteger div2 = div;\n        while (true) {\n            BigInteger y = div.add(n.divide(div)).shiftRight(1);\n            if (y.equals(div) || y.equals(div2)) {\n                return y;\n            }\n            div2 = div;\n            div = y;\n        }\n    }\n\n    static boolean isComposite(BigInteger num) {\n        for (int base = 2; base < 11; base++) {\n            if (new BigInteger(num.toString(), base).isProbablePrime(10)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    static final int max = 32;\n\n    static BigInteger incrementInBinaryByTwo(BigInteger num) {\n        return new BigInteger(new BigInteger(num.toString(), 2).add(ONE).add(ONE).toString(2));\n    }\n\n    static BigInteger decrementInBinary(BigInteger num) {\n        return new BigInteger(new BigInteger(num.toString(), 2).subtract(ONE).toString(2));\n    }\n\n    // Fixed Code Begins *********\n    private static int count = 0;\n    private static final String INPUT_FILE = \"input.txt\";\n    private static final Path OUTPUT_PATH = Paths.get(\"output.txt\");\n\n    private static final List<String> TESTS = new ArrayList<>();\n    private static final List<String> OUTPUT = new ArrayList<>();\n\n    public static void main(String[] args) throws IOException {\n        OUTPUT.clear();\n        OUTPUT.add(\"Case #1:\");\n        processInputFile();\n        Files.write(OUTPUT_PATH, OUTPUT, Charset.defaultCharset());\n    }\n\n    public static void addOutput(String answer) {\n        int c = OUTPUT.size() + 1;\n        OUTPUT.add(answer);\n    }\n\n    private static void processInputFile() throws IOException {\n        try (BufferedReader br = new BufferedReader(new FileReader(INPUT_FILE))) {\n            String line;\n            count = Integer.parseInt(br.readLine());\n            while ((line = br.readLine()) != null) {\n                processTest(line);\n            }\n        }\n    }\n}\n\n{% endcodeblock %}\n","source":"_posts/2016/04/solving-jam-coins.md","raw":"---\ntitle: Generating the Jam Coins\ndate: 2016-04-12\ntags: ['problems', 'codejam', 'java', 'puzzle', 'competition', 'solution']\nauthor: Buddha\ndescription: I'm going to show you how to solve JamCoins problem of 2016 Google codejam for both small as well as large datasets within time limit.\nsourcecode: https://github.com/jbuddha/competitions/blob/master/codejam/src/year2016/JamCoins.java\nsourcetype: g\n---\n\nHere is a moderate problem of CodeJam's qualification round of 2016. The Jam Coins. It is an interesting problem which gives a glimpse into another popular virtual currency, bit-coin mining. Here is the description of the problem. You need to generate jamcoins of either 16 digits for small dataset or 32 digits for large datasets. Jam Coins follow the given rules...\n1. A Jam Coin is only made up of 1's & 0's of the required number of digits.\n1. It begins and ends with 1.\n1. If that interpreted from base 2 to base 10, it should not be a prime number in any of them.\n\nFor Small dataset, you need to generate 50 jam coins of 16 digits and for large dataset, you need to generate 500 jam coins of 32 digits following above rules.\n<!-- more -->\nOutput should be the list of Jam Coins where each is followed by a divisor of that number in each base.\n\nLet us say that we want to test if `11001101` is a jam coin or not.\n\nIf we assume that the number is in base 2, it's decimal equivalent is 2^7+2^6+2^3+2^2+1 = 205 => Not a prime number => Divisible by 5\nIf we assume that the number is in base 3, it's decimal equivalent is 3^7+3^6+3^3+3^2+1 = 2953 => Prime Number => Hence not a jam coin\n\nLet us test `1010101`\n\n{% raw %}\n<div style=\"width: 50%;\">\n{% endraw %}\n\n|Base|Decimal Equivalent|Divisior|\n|-|-|-|\n|2| 85      |5 |\n|3| 820     |2|\n|4| 4369    |17|\n|5| 16276   |2|\n|6| 47989   |37|\n|7| 120100  |2|\n|8| 266305  |5|\n|9| 538084  |2|\n|10|1010101 |73|\n\n{% raw %}\n</div>\n{% endraw %}\n\nIt is divisible by some or number in all bases from 2 to 10. Hence it is a Jam Coin. We need to generate such coins with given number of digits.\n\nHence this can be included in output as below if the input is `7 10`\n\n```\nCase #1:\n1000001 5 2 17 2 13 2 5 2 101\n1001011 3 2 5 2 7 2 3 2 11\n1010101 5 2 17 2 37 2 5 2 73\n1011101 3 7 11 3 5 43 3 11 7\n1011111 5 2 3 2 37 2 5 2 3\n1100011 3 2 5 2 7 2 3 2 11\n1101001 3 2 5 2 7 2 3 2 11\n1101111 3 2 3 2 7 2 3 2 3\n1110111 7 2 3 2 43 2 17 2 3\n1111011 3 2 3 2 7 2 3 2 3\n```\n\n## My solution\nLet us begin with breaking the problem into manageable chunks before we try to solve it.\n\n{% codeblock Solution Pseudo Code  %}\nGenerate a number with required number of digits\n    - Convert it to decimal assuming it is base 2\n    - Test if it is a prime number\n    - If it is a prime number, go to step 1 else continue\n    - Convert it to decimal assuming it is base 3\n    - Test if it is a prime number\n    - If it is a prime number, go to step 1 else continue\n    - .... repeat till you reach base 10\nFind Divisors in each base\nPrint the number\nPrint all divisors\n{% endcodeblock %}\n\nThere are several complex problems inside the deceptively simple pseudocode\n\n1. Handle large numbers. 16 digits are way too big for a long datatype.\n1. Generate a number of required digits of 1's & 0's\n2. Convert the number to decimal from given base\n3. Testing if it is prime number\n4. Finding a divisor\n\nLet us solve them one by one\n\n##### [1/5]Handling insanely large numbers\nIt depends on the programming language of your choice. For this solution, I have chosen Java, which has java.math.BigInteger class that can store numbers and provides a very useful methods for prime number calculations. Example usage is as below.\n{% codeblock HelloWorldComponent.java lang:java  %}\nBigInteger num = new BigInteger(\"101010110000011\");\nnum.nextProbablePrime();\nnum.isProbablePrime(10);\nnum = new BigInteger(\"100001\",3);   // converts 100001 to base 10 from base 3\nnum.toString(2);                    // converts the num to base 2 from base 10\n{% endcodeblock %}\n\n##### [2/5]Generating combination of 1s and 0s that begin and end with 1\nFollowing is the algorithm I followed.\n1. Generate a string of zeroes of size n-2, assuming n is the length required\n1. Append 1 before and after the string of zeroes\n1. To Generate another number, imagine the number if in binary, adding two(10 in binary format) will give next odd number. Any number ending with 1 in binary number is an odd number.\n\n```\n100000000001\n           +\n          10\n------------\n100000000011\n           +\n          10\n------------\n100000000101\n\n```\nHow do you add 10 in binary format? Just convert that base 2 number to base 10 and add 2 and convert it back to binary number, which leads us to the following question.\n\n##### [3/5]Convert the number to decimal from given base\n```\nBigInteger incrementInBinaryByTwo(BigInteger num)\n{\n\treturn new BigInteger(new BigInteger(num.toString(),2).add(ONE).add(ONE).toString(2));\n}\n```\nConverting from a decimal number to binary format is as simple as calling toString method with 2 as the parameter.\n\n##### [4/5]Testing if it is a prime number\nBigInteger class of Java provides a nice API to work with prime numbers\n\nBigInteger.isProbablePrime() will return false if it is definately not a prime and returns true, if the probablity for this number to be a prime number is less than 2^-100. Hence for our purpose of finding it is not a prime number this would serve the purpose.\n```\nstatic boolean isComposite(BigInteger num) {\n    for (int base = 2; base < 11; base++) {\n        if (new BigInteger(num.toString(), base).isProbablePrime(10)) {\n            return false;\n        }\n    }\n    return true;\n}\n```\n\n##### [5/5]Finding a divisor\nBigInteger has nextProbablePrime method that returns a prime number after the given number. So, if we use it on a prime number, we can get the next prime number and so on. As we can now get all prime numbers one after the another, we can divide our number with each prime number and return the first divisor. However, going indefinately till all primes are verified is inefficient for this problem. There will be simpler jam coins to mine. So, we will test for first 10000 prime numbers. If it is not divisible by any of it, we ignore that number and continue with next number. Here is the code.\n\n```\nstatic BigInteger findSmallestFactor(BigInteger n) {\n    BigInteger half = sqrt(n);\n    BigInteger factor = new BigInteger(\"2\");\n    int counter = 0;\n    while (factor.compareTo(half) < 0 && !n.mod(factor).equals(BigInteger.ZERO)) {\n        factor = factor.nextProbablePrime();\n        counter++;\n        if (counter == 10000) {\n            break;\n        }\n    }\n    if (!n.mod(factor).equals(BigInteger.ZERO)) {\n        throw new RuntimeException();\n    }\n    return factor;\n}\n```\n\n{% codeblock JamCoins.java lang:java  %}\npackage year2016;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport static java.math.BigInteger.ONE;\nimport java.nio.charset.Charset;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class JamCoins {\n\n    static List<BigInteger> coins = new ArrayList<>();\n\n    public static void processTest(String test) {\n\n        int size = Integer.parseInt(test.split(\" \")[0]);\n        int count = Integer.parseInt(test.split(\" \")[1]);\n\n        List<BigInteger> jamCoins = new ArrayList<>();\n        String zeroes = \"\";\n        for (int i = 2; i < size; i++) {\n            zeroes += \"0\";\n        }\n\n        BigInteger num = new BigInteger(\"1\" + zeroes + \"1\");\n        String entry = \"\";\n\n        while (num.toString().length() == size && jamCoins.size() < count) {\n            if (isComposite(num)) {\n                try {\n                    entry = num.toString();\n                    for (int base = 2; base < 11; base++) {\n                        entry += \" \" + findSmallestFactor(new BigInteger(num.toString(), base));\n                    }\n                    addOutput(entry);\n                    jamCoins.add(num);\n                } catch (Exception e) {\n                }\n            }\n\n            num = incrementInBinaryByTwo(num);\n        }\n    }\n\n    static BigInteger findSmallestFactor(BigInteger n) {\n        BigInteger half = sqrt(n);\n        BigInteger factor = new BigInteger(\"2\");\n        int counter = 0;\n        while (factor.compareTo(half) < 0 && !n.mod(factor).equals(BigInteger.ZERO)) {\n            factor = factor.nextProbablePrime();\n            counter++;\n            if (counter == 10000) {\n                break;\n            }\n        }\n        if (!n.mod(factor).equals(BigInteger.ZERO)) {\n            throw new RuntimeException();\n        }\n        return factor;\n    }\n\n    static BigInteger sqrt(BigInteger n) {\n        BigInteger div = BigInteger.ZERO.setBit(n.bitLength() / 2);\n        BigInteger div2 = div;\n        while (true) {\n            BigInteger y = div.add(n.divide(div)).shiftRight(1);\n            if (y.equals(div) || y.equals(div2)) {\n                return y;\n            }\n            div2 = div;\n            div = y;\n        }\n    }\n\n    static boolean isComposite(BigInteger num) {\n        for (int base = 2; base < 11; base++) {\n            if (new BigInteger(num.toString(), base).isProbablePrime(10)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    static final int max = 32;\n\n    static BigInteger incrementInBinaryByTwo(BigInteger num) {\n        return new BigInteger(new BigInteger(num.toString(), 2).add(ONE).add(ONE).toString(2));\n    }\n\n    static BigInteger decrementInBinary(BigInteger num) {\n        return new BigInteger(new BigInteger(num.toString(), 2).subtract(ONE).toString(2));\n    }\n\n    // Fixed Code Begins *********\n    private static int count = 0;\n    private static final String INPUT_FILE = \"input.txt\";\n    private static final Path OUTPUT_PATH = Paths.get(\"output.txt\");\n\n    private static final List<String> TESTS = new ArrayList<>();\n    private static final List<String> OUTPUT = new ArrayList<>();\n\n    public static void main(String[] args) throws IOException {\n        OUTPUT.clear();\n        OUTPUT.add(\"Case #1:\");\n        processInputFile();\n        Files.write(OUTPUT_PATH, OUTPUT, Charset.defaultCharset());\n    }\n\n    public static void addOutput(String answer) {\n        int c = OUTPUT.size() + 1;\n        OUTPUT.add(answer);\n    }\n\n    private static void processInputFile() throws IOException {\n        try (BufferedReader br = new BufferedReader(new FileReader(INPUT_FILE))) {\n            String line;\n            count = Integer.parseInt(br.readLine());\n            while ((line = br.readLine()) != null) {\n                processTest(line);\n            }\n        }\n    }\n}\n\n{% endcodeblock %}\n","slug":"2016/04/solving-jam-coins","published":1,"updated":"2016-04-11T18:30:00.000Z","_id":"ckki0ed2u0007nbs68unacytn","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Here is a moderate problem of CodeJam’s qualification round of 2016. The Jam Coins. It is an interesting problem which gives a glimpse into another popular virtual currency, bit-coin mining. Here is the description of the problem. You need to generate jamcoins of either 16 digits for small dataset or 32 digits for large datasets. Jam Coins follow the given rules…</p>\n<ol>\n<li>A Jam Coin is only made up of 1’s &amp; 0’s of the required number of digits.</li>\n<li>It begins and ends with 1.</li>\n<li>If that interpreted from base 2 to base 10, it should not be a prime number in any of them.</li>\n</ol>\n<p>For Small dataset, you need to generate 50 jam coins of 16 digits and for large dataset, you need to generate 500 jam coins of 32 digits following above rules.</p>\n<a id=\"more\"></a>\n<p>Output should be the list of Jam Coins where each is followed by a divisor of that number in each base.</p>\n<p>Let us say that we want to test if <code>11001101</code> is a jam coin or not.</p>\n<p>If we assume that the number is in base 2, it’s decimal equivalent is 2^7+2^6+2^3+2^2+1 = 205 =&gt; Not a prime number =&gt; Divisible by 5<br>If we assume that the number is in base 3, it’s decimal equivalent is 3^7+3^6+3^3+3^2+1 = 2953 =&gt; Prime Number =&gt; Hence not a jam coin</p>\n<p>Let us test <code>1010101</code></p>\n\n<div style=\"width: 50%;\">\n\n\n<table>\n<thead>\n<tr>\n<th>Base</th>\n<th>Decimal Equivalent</th>\n<th>Divisior</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2</td>\n<td>85</td>\n<td>5</td>\n</tr>\n<tr>\n<td>3</td>\n<td>820</td>\n<td>2</td>\n</tr>\n<tr>\n<td>4</td>\n<td>4369</td>\n<td>17</td>\n</tr>\n<tr>\n<td>5</td>\n<td>16276</td>\n<td>2</td>\n</tr>\n<tr>\n<td>6</td>\n<td>47989</td>\n<td>37</td>\n</tr>\n<tr>\n<td>7</td>\n<td>120100</td>\n<td>2</td>\n</tr>\n<tr>\n<td>8</td>\n<td>266305</td>\n<td>5</td>\n</tr>\n<tr>\n<td>9</td>\n<td>538084</td>\n<td>2</td>\n</tr>\n<tr>\n<td>10</td>\n<td>1010101</td>\n<td>73</td>\n</tr>\n</tbody></table>\n\n</div>\n\n\n<p>It is divisible by some or number in all bases from 2 to 10. Hence it is a Jam Coin. We need to generate such coins with given number of digits.</p>\n<p>Hence this can be included in output as below if the input is <code>7 10</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Case #1:</span><br><span class=\"line\">1000001 5 2 17 2 13 2 5 2 101</span><br><span class=\"line\">1001011 3 2 5 2 7 2 3 2 11</span><br><span class=\"line\">1010101 5 2 17 2 37 2 5 2 73</span><br><span class=\"line\">1011101 3 7 11 3 5 43 3 11 7</span><br><span class=\"line\">1011111 5 2 3 2 37 2 5 2 3</span><br><span class=\"line\">1100011 3 2 5 2 7 2 3 2 11</span><br><span class=\"line\">1101001 3 2 5 2 7 2 3 2 11</span><br><span class=\"line\">1101111 3 2 3 2 7 2 3 2 3</span><br><span class=\"line\">1110111 7 2 3 2 43 2 17 2 3</span><br><span class=\"line\">1111011 3 2 3 2 7 2 3 2 3</span><br></pre></td></tr></table></figure>\n<h2 id=\"My-solution\"><a href=\"#My-solution\" class=\"headerlink\" title=\"My solution\"></a>My solution</h2><p>Let us begin with breaking the problem into manageable chunks before we try to solve it.</p>\n<figure class=\"highlight plain\"><figcaption><span>Solution Pseudo Code</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Generate a number with required number of digits</span><br><span class=\"line\">    - Convert it to decimal assuming it is base 2</span><br><span class=\"line\">    - Test if it is a prime number</span><br><span class=\"line\">    - If it is a prime number, go to step 1 else continue</span><br><span class=\"line\">    - Convert it to decimal assuming it is base 3</span><br><span class=\"line\">    - Test if it is a prime number</span><br><span class=\"line\">    - If it is a prime number, go to step 1 else continue</span><br><span class=\"line\">    - .... repeat till you reach base 10</span><br><span class=\"line\">Find Divisors in each base</span><br><span class=\"line\">Print the number</span><br><span class=\"line\">Print all divisors</span><br></pre></td></tr></table></figure>\n\n<p>There are several complex problems inside the deceptively simple pseudocode</p>\n<ol>\n<li>Handle large numbers. 16 digits are way too big for a long datatype.</li>\n<li>Generate a number of required digits of 1’s &amp; 0’s</li>\n<li>Convert the number to decimal from given base</li>\n<li>Testing if it is prime number</li>\n<li>Finding a divisor</li>\n</ol>\n<p>Let us solve them one by one</p>\n<h5 id=\"1-5-Handling-insanely-large-numbers\"><a href=\"#1-5-Handling-insanely-large-numbers\" class=\"headerlink\" title=\"[1/5]Handling insanely large numbers\"></a>[1/5]Handling insanely large numbers</h5><p>It depends on the programming language of your choice. For this solution, I have chosen Java, which has java.math.BigInteger class that can store numbers and provides a very useful methods for prime number calculations. Example usage is as below.</p>\n<figure class=\"highlight java\"><figcaption><span>HelloWorldComponent.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigInteger num = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">&quot;101010110000011&quot;</span>);</span><br><span class=\"line\">num.nextProbablePrime();</span><br><span class=\"line\">num.isProbablePrime(<span class=\"number\">10</span>);</span><br><span class=\"line\">num = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">&quot;100001&quot;</span>,<span class=\"number\">3</span>);   <span class=\"comment\">// converts 100001 to base 10 from base 3</span></span><br><span class=\"line\">num.toString(<span class=\"number\">2</span>);                    <span class=\"comment\">// converts the num to base 2 from base 10</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-5-Generating-combination-of-1s-and-0s-that-begin-and-end-with-1\"><a href=\"#2-5-Generating-combination-of-1s-and-0s-that-begin-and-end-with-1\" class=\"headerlink\" title=\"[2/5]Generating combination of 1s and 0s that begin and end with 1\"></a>[2/5]Generating combination of 1s and 0s that begin and end with 1</h5><p>Following is the algorithm I followed.</p>\n<ol>\n<li>Generate a string of zeroes of size n-2, assuming n is the length required</li>\n<li>Append 1 before and after the string of zeroes</li>\n<li>To Generate another number, imagine the number if in binary, adding two(10 in binary format) will give next odd number. Any number ending with 1 in binary number is an odd number.</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">100000000001</span><br><span class=\"line\">           +</span><br><span class=\"line\">          10</span><br><span class=\"line\">------------</span><br><span class=\"line\">100000000011</span><br><span class=\"line\">           +</span><br><span class=\"line\">          10</span><br><span class=\"line\">------------</span><br><span class=\"line\">100000000101</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>How do you add 10 in binary format? Just convert that base 2 number to base 10 and add 2 and convert it back to binary number, which leads us to the following question.</p>\n<h5 id=\"3-5-Convert-the-number-to-decimal-from-given-base\"><a href=\"#3-5-Convert-the-number-to-decimal-from-given-base\" class=\"headerlink\" title=\"[3/5]Convert the number to decimal from given base\"></a>[3/5]Convert the number to decimal from given base</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigInteger incrementInBinaryByTwo(BigInteger num)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\treturn new BigInteger(new BigInteger(num.toString(),2).add(ONE).add(ONE).toString(2));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Converting from a decimal number to binary format is as simple as calling toString method with 2 as the parameter.</p>\n<h5 id=\"4-5-Testing-if-it-is-a-prime-number\"><a href=\"#4-5-Testing-if-it-is-a-prime-number\" class=\"headerlink\" title=\"[4/5]Testing if it is a prime number\"></a>[4/5]Testing if it is a prime number</h5><p>BigInteger class of Java provides a nice API to work with prime numbers</p>\n<p>BigInteger.isProbablePrime() will return false if it is definately not a prime and returns true, if the probablity for this number to be a prime number is less than 2^-100. Hence for our purpose of finding it is not a prime number this would serve the purpose.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static boolean isComposite(BigInteger num) &#123;</span><br><span class=\"line\">    for (int base &#x3D; 2; base &lt; 11; base++) &#123;</span><br><span class=\"line\">        if (new BigInteger(num.toString(), base).isProbablePrime(10)) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-5-Finding-a-divisor\"><a href=\"#5-5-Finding-a-divisor\" class=\"headerlink\" title=\"[5/5]Finding a divisor\"></a>[5/5]Finding a divisor</h5><p>BigInteger has nextProbablePrime method that returns a prime number after the given number. So, if we use it on a prime number, we can get the next prime number and so on. As we can now get all prime numbers one after the another, we can divide our number with each prime number and return the first divisor. However, going indefinately till all primes are verified is inefficient for this problem. There will be simpler jam coins to mine. So, we will test for first 10000 prime numbers. If it is not divisible by any of it, we ignore that number and continue with next number. Here is the code.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static BigInteger findSmallestFactor(BigInteger n) &#123;</span><br><span class=\"line\">    BigInteger half &#x3D; sqrt(n);</span><br><span class=\"line\">    BigInteger factor &#x3D; new BigInteger(&quot;2&quot;);</span><br><span class=\"line\">    int counter &#x3D; 0;</span><br><span class=\"line\">    while (factor.compareTo(half) &lt; 0 &amp;&amp; !n.mod(factor).equals(BigInteger.ZERO)) &#123;</span><br><span class=\"line\">        factor &#x3D; factor.nextProbablePrime();</span><br><span class=\"line\">        counter++;</span><br><span class=\"line\">        if (counter &#x3D;&#x3D; 10000) &#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!n.mod(factor).equals(BigInteger.ZERO)) &#123;</span><br><span class=\"line\">        throw new RuntimeException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return factor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><figcaption><span>JamCoins.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> year2016;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigInteger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.math.BigInteger.ONE;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Path;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Paths;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JamCoins</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> List&lt;BigInteger&gt; coins = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">processTest</span><span class=\"params\">(String test)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = Integer.parseInt(test.split(<span class=\"string\">&quot; &quot;</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = Integer.parseInt(test.split(<span class=\"string\">&quot; &quot;</span>)[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;BigInteger&gt; jamCoins = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        String zeroes = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            zeroes += <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        BigInteger num = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">&quot;1&quot;</span> + zeroes + <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        String entry = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (num.toString().length() == size &amp;&amp; jamCoins.size() &lt; count) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isComposite(num)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    entry = num.toString();</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> base = <span class=\"number\">2</span>; base &lt; <span class=\"number\">11</span>; base++) &#123;</span><br><span class=\"line\">                        entry += <span class=\"string\">&quot; &quot;</span> + findSmallestFactor(<span class=\"keyword\">new</span> BigInteger(num.toString(), base));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    addOutput(entry);</span><br><span class=\"line\">                    jamCoins.add(num);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            num = incrementInBinaryByTwo(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> BigInteger <span class=\"title\">findSmallestFactor</span><span class=\"params\">(BigInteger n)</span> </span>&#123;</span><br><span class=\"line\">        BigInteger half = sqrt(n);</span><br><span class=\"line\">        BigInteger factor = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (factor.compareTo(half) &lt; <span class=\"number\">0</span> &amp;&amp; !n.mod(factor).equals(BigInteger.ZERO)) &#123;</span><br><span class=\"line\">            factor = factor.nextProbablePrime();</span><br><span class=\"line\">            counter++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (counter == <span class=\"number\">10000</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!n.mod(factor).equals(BigInteger.ZERO)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> factor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> BigInteger <span class=\"title\">sqrt</span><span class=\"params\">(BigInteger n)</span> </span>&#123;</span><br><span class=\"line\">        BigInteger div = BigInteger.ZERO.setBit(n.bitLength() / <span class=\"number\">2</span>);</span><br><span class=\"line\">        BigInteger div2 = div;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            BigInteger y = div.add(n.divide(div)).shiftRight(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (y.equals(div) || y.equals(div2)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            div2 = div;</span><br><span class=\"line\">            div = y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isComposite</span><span class=\"params\">(BigInteger num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> base = <span class=\"number\">2</span>; base &lt; <span class=\"number\">11</span>; base++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> BigInteger(num.toString(), base).isProbablePrime(<span class=\"number\">10</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> max = <span class=\"number\">32</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> BigInteger <span class=\"title\">incrementInBinaryByTwo</span><span class=\"params\">(BigInteger num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BigInteger(<span class=\"keyword\">new</span> BigInteger(num.toString(), <span class=\"number\">2</span>).add(ONE).add(ONE).toString(<span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> BigInteger <span class=\"title\">decrementInBinary</span><span class=\"params\">(BigInteger num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BigInteger(<span class=\"keyword\">new</span> BigInteger(num.toString(), <span class=\"number\">2</span>).subtract(ONE).toString(<span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Fixed Code Begins *********</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String INPUT_FILE = <span class=\"string\">&quot;input.txt&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Path OUTPUT_PATH = Paths.get(<span class=\"string\">&quot;output.txt&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> List&lt;String&gt; TESTS = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> List&lt;String&gt; OUTPUT = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        OUTPUT.clear();</span><br><span class=\"line\">        OUTPUT.add(<span class=\"string\">&quot;Case #1:&quot;</span>);</span><br><span class=\"line\">        processInputFile();</span><br><span class=\"line\">        Files.write(OUTPUT_PATH, OUTPUT, Charset.defaultCharset());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">addOutput</span><span class=\"params\">(String answer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c = OUTPUT.size() + <span class=\"number\">1</span>;</span><br><span class=\"line\">        OUTPUT.add(answer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">processInputFile</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(INPUT_FILE))) &#123;</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            count = Integer.parseInt(br.readLine());</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((line = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                processTest(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{"head":""}},"excerpt":"<p>Here is a moderate problem of CodeJam’s qualification round of 2016. The Jam Coins. It is an interesting problem which gives a glimpse into another popular virtual currency, bit-coin mining. Here is the description of the problem. You need to generate jamcoins of either 16 digits for small dataset or 32 digits for large datasets. Jam Coins follow the given rules…</p>\n<ol>\n<li>A Jam Coin is only made up of 1’s &amp; 0’s of the required number of digits.</li>\n<li>It begins and ends with 1.</li>\n<li>If that interpreted from base 2 to base 10, it should not be a prime number in any of them.</li>\n</ol>\n<p>For Small dataset, you need to generate 50 jam coins of 16 digits and for large dataset, you need to generate 500 jam coins of 32 digits following above rules.</p>","more":"<p>Output should be the list of Jam Coins where each is followed by a divisor of that number in each base.</p>\n<p>Let us say that we want to test if <code>11001101</code> is a jam coin or not.</p>\n<p>If we assume that the number is in base 2, it’s decimal equivalent is 2^7+2^6+2^3+2^2+1 = 205 =&gt; Not a prime number =&gt; Divisible by 5<br>If we assume that the number is in base 3, it’s decimal equivalent is 3^7+3^6+3^3+3^2+1 = 2953 =&gt; Prime Number =&gt; Hence not a jam coin</p>\n<p>Let us test <code>1010101</code></p>\n\n<div style=\"width: 50%;\">\n\n\n<table>\n<thead>\n<tr>\n<th>Base</th>\n<th>Decimal Equivalent</th>\n<th>Divisior</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2</td>\n<td>85</td>\n<td>5</td>\n</tr>\n<tr>\n<td>3</td>\n<td>820</td>\n<td>2</td>\n</tr>\n<tr>\n<td>4</td>\n<td>4369</td>\n<td>17</td>\n</tr>\n<tr>\n<td>5</td>\n<td>16276</td>\n<td>2</td>\n</tr>\n<tr>\n<td>6</td>\n<td>47989</td>\n<td>37</td>\n</tr>\n<tr>\n<td>7</td>\n<td>120100</td>\n<td>2</td>\n</tr>\n<tr>\n<td>8</td>\n<td>266305</td>\n<td>5</td>\n</tr>\n<tr>\n<td>9</td>\n<td>538084</td>\n<td>2</td>\n</tr>\n<tr>\n<td>10</td>\n<td>1010101</td>\n<td>73</td>\n</tr>\n</tbody></table>\n\n</div>\n\n\n<p>It is divisible by some or number in all bases from 2 to 10. Hence it is a Jam Coin. We need to generate such coins with given number of digits.</p>\n<p>Hence this can be included in output as below if the input is <code>7 10</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Case #1:</span><br><span class=\"line\">1000001 5 2 17 2 13 2 5 2 101</span><br><span class=\"line\">1001011 3 2 5 2 7 2 3 2 11</span><br><span class=\"line\">1010101 5 2 17 2 37 2 5 2 73</span><br><span class=\"line\">1011101 3 7 11 3 5 43 3 11 7</span><br><span class=\"line\">1011111 5 2 3 2 37 2 5 2 3</span><br><span class=\"line\">1100011 3 2 5 2 7 2 3 2 11</span><br><span class=\"line\">1101001 3 2 5 2 7 2 3 2 11</span><br><span class=\"line\">1101111 3 2 3 2 7 2 3 2 3</span><br><span class=\"line\">1110111 7 2 3 2 43 2 17 2 3</span><br><span class=\"line\">1111011 3 2 3 2 7 2 3 2 3</span><br></pre></td></tr></table></figure>\n<h2 id=\"My-solution\"><a href=\"#My-solution\" class=\"headerlink\" title=\"My solution\"></a>My solution</h2><p>Let us begin with breaking the problem into manageable chunks before we try to solve it.</p>\n<figure class=\"highlight plain\"><figcaption><span>Solution Pseudo Code</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Generate a number with required number of digits</span><br><span class=\"line\">    - Convert it to decimal assuming it is base 2</span><br><span class=\"line\">    - Test if it is a prime number</span><br><span class=\"line\">    - If it is a prime number, go to step 1 else continue</span><br><span class=\"line\">    - Convert it to decimal assuming it is base 3</span><br><span class=\"line\">    - Test if it is a prime number</span><br><span class=\"line\">    - If it is a prime number, go to step 1 else continue</span><br><span class=\"line\">    - .... repeat till you reach base 10</span><br><span class=\"line\">Find Divisors in each base</span><br><span class=\"line\">Print the number</span><br><span class=\"line\">Print all divisors</span><br></pre></td></tr></table></figure>\n\n<p>There are several complex problems inside the deceptively simple pseudocode</p>\n<ol>\n<li>Handle large numbers. 16 digits are way too big for a long datatype.</li>\n<li>Generate a number of required digits of 1’s &amp; 0’s</li>\n<li>Convert the number to decimal from given base</li>\n<li>Testing if it is prime number</li>\n<li>Finding a divisor</li>\n</ol>\n<p>Let us solve them one by one</p>\n<h5 id=\"1-5-Handling-insanely-large-numbers\"><a href=\"#1-5-Handling-insanely-large-numbers\" class=\"headerlink\" title=\"[1/5]Handling insanely large numbers\"></a>[1/5]Handling insanely large numbers</h5><p>It depends on the programming language of your choice. For this solution, I have chosen Java, which has java.math.BigInteger class that can store numbers and provides a very useful methods for prime number calculations. Example usage is as below.</p>\n<figure class=\"highlight java\"><figcaption><span>HelloWorldComponent.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigInteger num = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">&quot;101010110000011&quot;</span>);</span><br><span class=\"line\">num.nextProbablePrime();</span><br><span class=\"line\">num.isProbablePrime(<span class=\"number\">10</span>);</span><br><span class=\"line\">num = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">&quot;100001&quot;</span>,<span class=\"number\">3</span>);   <span class=\"comment\">// converts 100001 to base 10 from base 3</span></span><br><span class=\"line\">num.toString(<span class=\"number\">2</span>);                    <span class=\"comment\">// converts the num to base 2 from base 10</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-5-Generating-combination-of-1s-and-0s-that-begin-and-end-with-1\"><a href=\"#2-5-Generating-combination-of-1s-and-0s-that-begin-and-end-with-1\" class=\"headerlink\" title=\"[2/5]Generating combination of 1s and 0s that begin and end with 1\"></a>[2/5]Generating combination of 1s and 0s that begin and end with 1</h5><p>Following is the algorithm I followed.</p>\n<ol>\n<li>Generate a string of zeroes of size n-2, assuming n is the length required</li>\n<li>Append 1 before and after the string of zeroes</li>\n<li>To Generate another number, imagine the number if in binary, adding two(10 in binary format) will give next odd number. Any number ending with 1 in binary number is an odd number.</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">100000000001</span><br><span class=\"line\">           +</span><br><span class=\"line\">          10</span><br><span class=\"line\">------------</span><br><span class=\"line\">100000000011</span><br><span class=\"line\">           +</span><br><span class=\"line\">          10</span><br><span class=\"line\">------------</span><br><span class=\"line\">100000000101</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>How do you add 10 in binary format? Just convert that base 2 number to base 10 and add 2 and convert it back to binary number, which leads us to the following question.</p>\n<h5 id=\"3-5-Convert-the-number-to-decimal-from-given-base\"><a href=\"#3-5-Convert-the-number-to-decimal-from-given-base\" class=\"headerlink\" title=\"[3/5]Convert the number to decimal from given base\"></a>[3/5]Convert the number to decimal from given base</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigInteger incrementInBinaryByTwo(BigInteger num)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\treturn new BigInteger(new BigInteger(num.toString(),2).add(ONE).add(ONE).toString(2));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Converting from a decimal number to binary format is as simple as calling toString method with 2 as the parameter.</p>\n<h5 id=\"4-5-Testing-if-it-is-a-prime-number\"><a href=\"#4-5-Testing-if-it-is-a-prime-number\" class=\"headerlink\" title=\"[4/5]Testing if it is a prime number\"></a>[4/5]Testing if it is a prime number</h5><p>BigInteger class of Java provides a nice API to work with prime numbers</p>\n<p>BigInteger.isProbablePrime() will return false if it is definately not a prime and returns true, if the probablity for this number to be a prime number is less than 2^-100. Hence for our purpose of finding it is not a prime number this would serve the purpose.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static boolean isComposite(BigInteger num) &#123;</span><br><span class=\"line\">    for (int base &#x3D; 2; base &lt; 11; base++) &#123;</span><br><span class=\"line\">        if (new BigInteger(num.toString(), base).isProbablePrime(10)) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-5-Finding-a-divisor\"><a href=\"#5-5-Finding-a-divisor\" class=\"headerlink\" title=\"[5/5]Finding a divisor\"></a>[5/5]Finding a divisor</h5><p>BigInteger has nextProbablePrime method that returns a prime number after the given number. So, if we use it on a prime number, we can get the next prime number and so on. As we can now get all prime numbers one after the another, we can divide our number with each prime number and return the first divisor. However, going indefinately till all primes are verified is inefficient for this problem. There will be simpler jam coins to mine. So, we will test for first 10000 prime numbers. If it is not divisible by any of it, we ignore that number and continue with next number. Here is the code.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static BigInteger findSmallestFactor(BigInteger n) &#123;</span><br><span class=\"line\">    BigInteger half &#x3D; sqrt(n);</span><br><span class=\"line\">    BigInteger factor &#x3D; new BigInteger(&quot;2&quot;);</span><br><span class=\"line\">    int counter &#x3D; 0;</span><br><span class=\"line\">    while (factor.compareTo(half) &lt; 0 &amp;&amp; !n.mod(factor).equals(BigInteger.ZERO)) &#123;</span><br><span class=\"line\">        factor &#x3D; factor.nextProbablePrime();</span><br><span class=\"line\">        counter++;</span><br><span class=\"line\">        if (counter &#x3D;&#x3D; 10000) &#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!n.mod(factor).equals(BigInteger.ZERO)) &#123;</span><br><span class=\"line\">        throw new RuntimeException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return factor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><figcaption><span>JamCoins.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> year2016;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigInteger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.math.BigInteger.ONE;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Path;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Paths;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JamCoins</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> List&lt;BigInteger&gt; coins = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">processTest</span><span class=\"params\">(String test)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = Integer.parseInt(test.split(<span class=\"string\">&quot; &quot;</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = Integer.parseInt(test.split(<span class=\"string\">&quot; &quot;</span>)[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;BigInteger&gt; jamCoins = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        String zeroes = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            zeroes += <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        BigInteger num = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">&quot;1&quot;</span> + zeroes + <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        String entry = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (num.toString().length() == size &amp;&amp; jamCoins.size() &lt; count) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isComposite(num)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    entry = num.toString();</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> base = <span class=\"number\">2</span>; base &lt; <span class=\"number\">11</span>; base++) &#123;</span><br><span class=\"line\">                        entry += <span class=\"string\">&quot; &quot;</span> + findSmallestFactor(<span class=\"keyword\">new</span> BigInteger(num.toString(), base));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    addOutput(entry);</span><br><span class=\"line\">                    jamCoins.add(num);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            num = incrementInBinaryByTwo(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> BigInteger <span class=\"title\">findSmallestFactor</span><span class=\"params\">(BigInteger n)</span> </span>&#123;</span><br><span class=\"line\">        BigInteger half = sqrt(n);</span><br><span class=\"line\">        BigInteger factor = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (factor.compareTo(half) &lt; <span class=\"number\">0</span> &amp;&amp; !n.mod(factor).equals(BigInteger.ZERO)) &#123;</span><br><span class=\"line\">            factor = factor.nextProbablePrime();</span><br><span class=\"line\">            counter++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (counter == <span class=\"number\">10000</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!n.mod(factor).equals(BigInteger.ZERO)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> factor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> BigInteger <span class=\"title\">sqrt</span><span class=\"params\">(BigInteger n)</span> </span>&#123;</span><br><span class=\"line\">        BigInteger div = BigInteger.ZERO.setBit(n.bitLength() / <span class=\"number\">2</span>);</span><br><span class=\"line\">        BigInteger div2 = div;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            BigInteger y = div.add(n.divide(div)).shiftRight(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (y.equals(div) || y.equals(div2)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            div2 = div;</span><br><span class=\"line\">            div = y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isComposite</span><span class=\"params\">(BigInteger num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> base = <span class=\"number\">2</span>; base &lt; <span class=\"number\">11</span>; base++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> BigInteger(num.toString(), base).isProbablePrime(<span class=\"number\">10</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> max = <span class=\"number\">32</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> BigInteger <span class=\"title\">incrementInBinaryByTwo</span><span class=\"params\">(BigInteger num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BigInteger(<span class=\"keyword\">new</span> BigInteger(num.toString(), <span class=\"number\">2</span>).add(ONE).add(ONE).toString(<span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> BigInteger <span class=\"title\">decrementInBinary</span><span class=\"params\">(BigInteger num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BigInteger(<span class=\"keyword\">new</span> BigInteger(num.toString(), <span class=\"number\">2</span>).subtract(ONE).toString(<span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Fixed Code Begins *********</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String INPUT_FILE = <span class=\"string\">&quot;input.txt&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Path OUTPUT_PATH = Paths.get(<span class=\"string\">&quot;output.txt&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> List&lt;String&gt; TESTS = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> List&lt;String&gt; OUTPUT = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        OUTPUT.clear();</span><br><span class=\"line\">        OUTPUT.add(<span class=\"string\">&quot;Case #1:&quot;</span>);</span><br><span class=\"line\">        processInputFile();</span><br><span class=\"line\">        Files.write(OUTPUT_PATH, OUTPUT, Charset.defaultCharset());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">addOutput</span><span class=\"params\">(String answer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c = OUTPUT.size() + <span class=\"number\">1</span>;</span><br><span class=\"line\">        OUTPUT.add(answer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">processInputFile</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(INPUT_FILE))) &#123;</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            count = Integer.parseInt(br.readLine());</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((line = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                processTest(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Mon Apr 11 2016 11:30:00 GMT-0700 (Pacific Daylight Time)","title":"Generating the Jam Coins","path":"2016/04/solving-jam-coins/","eyeCatchImage":null,"excerpt":"I'm going to show you how to solve JamCoins problem of 2016 Google codejam for both small as well as large datasets within time limit.","date":{"_isAMomentObject":true,"_i":"2016-04-11T18:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2016-04-11T18:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["java","problems","codejam","puzzle","competition","solution"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Hello World for Oracle Commerce (ATG)","date":"2016-03-05T18:30:00.000Z","author":"Buddha","description":"Oracle Commerce or ATG is an Ocean. There are so many new things to learn before you can write a program that runs on this platform. This article helps you learn how to begin with creating new components in Oracle Commerce.","_content":"There are so many concepts in Oracle Commerce (previously known as ATG), that makes coming up with Hello World program little difficult. Do you mean to create one JSP page and deploy it like commerce reference store? Do you want to create a component just to see in Dyn/Admin? Do you want to create a hello world repository? Depending on what you want to do, the approach to take will be different.\n![Too many options to begin with](https://farm2.staticflickr.com/1633/25195316629_65c8162a37_n.jpg)\nTo work with Oracle Commerce, you don’t have to know about persisting data in database. If you approach Oracle Commerce programming with J2EE & MVC experience, you may find it little difficult to cope with it unless you start with a fresh mind, because things are very different in this platform.\n\nToday, I will demonstrate how to create a simple component so that it can be viewed in Dyn/Admin. Let us assume that you are trying to create it in your own module instead of existing module like DAS or DAF. Follow the the steps shown below.\n\n## Step 1: Create an Eclipse project\n\nCreate an Eclipse project and make sure you add all the necessary class files to the build path. Add classes.jar or DAS at the least.\n<!-- more -->\n![Sample Eclipse Project Structure](http://i.stack.imgur.com/OP8b7.png)\n## Step 2: Create the Java Class\n\nA component in Oracle Commerce is combination of two files. A Java Class and a Properties File. The Java class can be a simple bean or can be a service that performs several tasks based on a schedule. Simplest way to create the necessary Java class is to extend GenericService.\n\n\n{% codeblock HelloWorldComponent.java lang:java  %}\npackage com.buddha.components;\n\nimport atg.nucleus.GenericService;\nimport atg.nucleus.ServiceException;\n\npublic class HelloWorldComponent extends GenericService {\n\n    public String firstStr = \"Dummy Value\";\n\n    public String getFirstStr() {\n        return firstStr;\n    }\n\n    public void setFirstStr(String firstStr) {\n        this.firstStr = firstStr;\n    }\n\n    @Override\n    public void doStartService() throws ServiceException {\n        super.doStartService();\n        System.out.println(\"Hello ATG Component!\");\n    }\n\n    @Override\n    public void doStopService() throws ServiceException {\n        super.doStopService();\n        System.out.println(\"Hello ATG Component! Stops now!\");\n    }\n}\n{% endcodeblock %}\n\n## Step 3: Create the properties file\n\nThe Properties file must be providing the values to the properties in the component. This initialises the bean. `$class` property will link the property file with the class file we have created in previous step. Location of the propety file decides the path of the component instead of the java class. Follow the example below to create the property file.\n\n{% codeblock HelloWorldComponent.properties lang:java  %}\n$class=com.buddha.components.HelloWorldComponent\nfirstStr=HelloWorld\n{% endcodeblock %}\n\nMultiple components can be created from the same class file. A different properties file can have same `$class` but initialise firstStr to a different value. This creates a different component.\n\n## Step 4: Create a Manifest file\n\nManifest files is like a configuration for the module. What all are its dependencies when it is running in webserver, where are the compiled classes placed etc.,\n\n{% codeblock Manifest.MF  %}\nManifest-Version: 1.0\nATG-Required: DafEar.Admin\nATG-Config-Path: config/\nATG-Class-Path: ./bin/\n{% endcodeblock %}\n## Step 5: Build & Deploy\nBuild the project and copy the project folder into ${DYNAMO_ROOT} and run the following command to generate an ear file of your project and deploy it in your jboss server. No need to generate any ear file if you are running it on Tomcat. Just start the respective server with the given module.\n\n```\nrunAssembler.bat -jboss HelloWorld.ear -m EXP_HelloATGComponentWorld\n```\n## Step 6: Access the Component\n\nNavigate to Dyn/Admin and search for the component HelloWorldComponent and click on the component listed in the search results.\n\n![Search Results in DynAdmin](http://i.stack.imgur.com/urvDL.png)\n\nClick on it to go to the component page to see the property we have created and its value given in properties file.\n\n![Component & the property we have created earlier](http://i.stack.imgur.com/sWi9t.png)\n\nYou can see the server log to find a line similar to this.\n\n```\nINFO  [stdout] /dyn/admin/nucleus//com/buddha/components/HelloWorldComponent Hello ATG Component!\n.....\nINFO  [stdout] /dyn/admin/nucleus//com/buddha/components/HelloWorldComponent Hello ATG Component! Stops now!\n```\nThis line is generated because of the sysout in our doStartService(); You can also give other methods that can be called through dyn/admin or interact with other components. However in production, avoid using System.out.println, instead use loggingDebug or loggingInfo. Best of Luck.\n\n----\n\nHere is an interesting non-technical blog post that I came across recently: [Reading a book vs Watching a Movie Adaption](https://unfurledpages.wordpress.com/2016/03/21/turning-pages-or-tuning-channels/)\n","source":"_posts/2016/03/hello-world-for-oracle-commerce.md","raw":"---\ntitle: Hello World for Oracle Commerce (ATG)\ndate: 2016-03-06\ntags: ['atg', 'java', 'oraclecommerce']\nauthor: Buddha\ndescription: Oracle Commerce or ATG is an Ocean. There are so many new things to learn before you can write a program that runs on this platform. This article helps you learn how to begin with creating new components in Oracle Commerce.\n---\nThere are so many concepts in Oracle Commerce (previously known as ATG), that makes coming up with Hello World program little difficult. Do you mean to create one JSP page and deploy it like commerce reference store? Do you want to create a component just to see in Dyn/Admin? Do you want to create a hello world repository? Depending on what you want to do, the approach to take will be different.\n![Too many options to begin with](https://farm2.staticflickr.com/1633/25195316629_65c8162a37_n.jpg)\nTo work with Oracle Commerce, you don’t have to know about persisting data in database. If you approach Oracle Commerce programming with J2EE & MVC experience, you may find it little difficult to cope with it unless you start with a fresh mind, because things are very different in this platform.\n\nToday, I will demonstrate how to create a simple component so that it can be viewed in Dyn/Admin. Let us assume that you are trying to create it in your own module instead of existing module like DAS or DAF. Follow the the steps shown below.\n\n## Step 1: Create an Eclipse project\n\nCreate an Eclipse project and make sure you add all the necessary class files to the build path. Add classes.jar or DAS at the least.\n<!-- more -->\n![Sample Eclipse Project Structure](http://i.stack.imgur.com/OP8b7.png)\n## Step 2: Create the Java Class\n\nA component in Oracle Commerce is combination of two files. A Java Class and a Properties File. The Java class can be a simple bean or can be a service that performs several tasks based on a schedule. Simplest way to create the necessary Java class is to extend GenericService.\n\n\n{% codeblock HelloWorldComponent.java lang:java  %}\npackage com.buddha.components;\n\nimport atg.nucleus.GenericService;\nimport atg.nucleus.ServiceException;\n\npublic class HelloWorldComponent extends GenericService {\n\n    public String firstStr = \"Dummy Value\";\n\n    public String getFirstStr() {\n        return firstStr;\n    }\n\n    public void setFirstStr(String firstStr) {\n        this.firstStr = firstStr;\n    }\n\n    @Override\n    public void doStartService() throws ServiceException {\n        super.doStartService();\n        System.out.println(\"Hello ATG Component!\");\n    }\n\n    @Override\n    public void doStopService() throws ServiceException {\n        super.doStopService();\n        System.out.println(\"Hello ATG Component! Stops now!\");\n    }\n}\n{% endcodeblock %}\n\n## Step 3: Create the properties file\n\nThe Properties file must be providing the values to the properties in the component. This initialises the bean. `$class` property will link the property file with the class file we have created in previous step. Location of the propety file decides the path of the component instead of the java class. Follow the example below to create the property file.\n\n{% codeblock HelloWorldComponent.properties lang:java  %}\n$class=com.buddha.components.HelloWorldComponent\nfirstStr=HelloWorld\n{% endcodeblock %}\n\nMultiple components can be created from the same class file. A different properties file can have same `$class` but initialise firstStr to a different value. This creates a different component.\n\n## Step 4: Create a Manifest file\n\nManifest files is like a configuration for the module. What all are its dependencies when it is running in webserver, where are the compiled classes placed etc.,\n\n{% codeblock Manifest.MF  %}\nManifest-Version: 1.0\nATG-Required: DafEar.Admin\nATG-Config-Path: config/\nATG-Class-Path: ./bin/\n{% endcodeblock %}\n## Step 5: Build & Deploy\nBuild the project and copy the project folder into ${DYNAMO_ROOT} and run the following command to generate an ear file of your project and deploy it in your jboss server. No need to generate any ear file if you are running it on Tomcat. Just start the respective server with the given module.\n\n```\nrunAssembler.bat -jboss HelloWorld.ear -m EXP_HelloATGComponentWorld\n```\n## Step 6: Access the Component\n\nNavigate to Dyn/Admin and search for the component HelloWorldComponent and click on the component listed in the search results.\n\n![Search Results in DynAdmin](http://i.stack.imgur.com/urvDL.png)\n\nClick on it to go to the component page to see the property we have created and its value given in properties file.\n\n![Component & the property we have created earlier](http://i.stack.imgur.com/sWi9t.png)\n\nYou can see the server log to find a line similar to this.\n\n```\nINFO  [stdout] /dyn/admin/nucleus//com/buddha/components/HelloWorldComponent Hello ATG Component!\n.....\nINFO  [stdout] /dyn/admin/nucleus//com/buddha/components/HelloWorldComponent Hello ATG Component! Stops now!\n```\nThis line is generated because of the sysout in our doStartService(); You can also give other methods that can be called through dyn/admin or interact with other components. However in production, avoid using System.out.println, instead use loggingDebug or loggingInfo. Best of Luck.\n\n----\n\nHere is an interesting non-technical blog post that I came across recently: [Reading a book vs Watching a Movie Adaption](https://unfurledpages.wordpress.com/2016/03/21/turning-pages-or-tuning-channels/)\n","slug":"2016/03/hello-world-for-oracle-commerce","published":1,"updated":"2016-03-05T18:30:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckki0ed2u0008nbs66qpb0ny1","content":"<p>There are so many concepts in Oracle Commerce (previously known as ATG), that makes coming up with Hello World program little difficult. Do you mean to create one JSP page and deploy it like commerce reference store? Do you want to create a component just to see in Dyn/Admin? Do you want to create a hello world repository? Depending on what you want to do, the approach to take will be different.<br><img src=\"https://farm2.staticflickr.com/1633/25195316629_65c8162a37_n.jpg\" alt=\"Too many options to begin with\"><br>To work with Oracle Commerce, you don’t have to know about persisting data in database. If you approach Oracle Commerce programming with J2EE &amp; MVC experience, you may find it little difficult to cope with it unless you start with a fresh mind, because things are very different in this platform.</p>\n<p>Today, I will demonstrate how to create a simple component so that it can be viewed in Dyn/Admin. Let us assume that you are trying to create it in your own module instead of existing module like DAS or DAF. Follow the the steps shown below.</p>\n<h2 id=\"Step-1-Create-an-Eclipse-project\"><a href=\"#Step-1-Create-an-Eclipse-project\" class=\"headerlink\" title=\"Step 1: Create an Eclipse project\"></a>Step 1: Create an Eclipse project</h2><p>Create an Eclipse project and make sure you add all the necessary class files to the build path. Add classes.jar or DAS at the least.</p>\n<a id=\"more\"></a>\n<p><img src=\"http://i.stack.imgur.com/OP8b7.png\" alt=\"Sample Eclipse Project Structure\"></p>\n<h2 id=\"Step-2-Create-the-Java-Class\"><a href=\"#Step-2-Create-the-Java-Class\" class=\"headerlink\" title=\"Step 2: Create the Java Class\"></a>Step 2: Create the Java Class</h2><p>A component in Oracle Commerce is combination of two files. A Java Class and a Properties File. The Java class can be a simple bean or can be a service that performs several tasks based on a schedule. Simplest way to create the necessary Java class is to extend GenericService.</p>\n<figure class=\"highlight java\"><figcaption><span>HelloWorldComponent.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.buddha.components;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> atg.nucleus.GenericService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> atg.nucleus.ServiceException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">GenericService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String firstStr = <span class=\"string\">&quot;Dummy Value&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFirstStr</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstStr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFirstStr</span><span class=\"params\">(String firstStr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.firstStr = firstStr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doStartService</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ServiceException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.doStartService();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello ATG Component!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doStopService</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ServiceException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.doStopService();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello ATG Component! Stops now!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Step-3-Create-the-properties-file\"><a href=\"#Step-3-Create-the-properties-file\" class=\"headerlink\" title=\"Step 3: Create the properties file\"></a>Step 3: Create the properties file</h2><p>The Properties file must be providing the values to the properties in the component. This initialises the bean. <code>$class</code> property will link the property file with the class file we have created in previous step. Location of the propety file decides the path of the component instead of the java class. Follow the example below to create the property file.</p>\n<figure class=\"highlight java\"><figcaption><span>HelloWorldComponent.properties</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$<span class=\"class\"><span class=\"keyword\">class</span></span>=com.buddha.components.HelloWorldComponent</span><br><span class=\"line\">firstStr=HelloWorld</span><br></pre></td></tr></table></figure>\n\n<p>Multiple components can be created from the same class file. A different properties file can have same <code>$class</code> but initialise firstStr to a different value. This creates a different component.</p>\n<h2 id=\"Step-4-Create-a-Manifest-file\"><a href=\"#Step-4-Create-a-Manifest-file\" class=\"headerlink\" title=\"Step 4: Create a Manifest file\"></a>Step 4: Create a Manifest file</h2><p>Manifest files is like a configuration for the module. What all are its dependencies when it is running in webserver, where are the compiled classes placed etc.,</p>\n<figure class=\"highlight plain\"><figcaption><span>Manifest.MF</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">ATG-Required: DafEar.Admin</span><br><span class=\"line\">ATG-Config-Path: config&#x2F;</span><br><span class=\"line\">ATG-Class-Path: .&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-5-Build-amp-Deploy\"><a href=\"#Step-5-Build-amp-Deploy\" class=\"headerlink\" title=\"Step 5: Build &amp; Deploy\"></a>Step 5: Build &amp; Deploy</h2><p>Build the project and copy the project folder into ${DYNAMO_ROOT} and run the following command to generate an ear file of your project and deploy it in your jboss server. No need to generate any ear file if you are running it on Tomcat. Just start the respective server with the given module.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runAssembler.bat -jboss HelloWorld.ear -m EXP_HelloATGComponentWorld</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-6-Access-the-Component\"><a href=\"#Step-6-Access-the-Component\" class=\"headerlink\" title=\"Step 6: Access the Component\"></a>Step 6: Access the Component</h2><p>Navigate to Dyn/Admin and search for the component HelloWorldComponent and click on the component listed in the search results.</p>\n<p><img src=\"http://i.stack.imgur.com/urvDL.png\" alt=\"Search Results in DynAdmin\"></p>\n<p>Click on it to go to the component page to see the property we have created and its value given in properties file.</p>\n<p><img src=\"http://i.stack.imgur.com/sWi9t.png\" alt=\"Component &amp; the property we have created earlier\"></p>\n<p>You can see the server log to find a line similar to this.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  [stdout] &#x2F;dyn&#x2F;admin&#x2F;nucleus&#x2F;&#x2F;com&#x2F;buddha&#x2F;components&#x2F;HelloWorldComponent Hello ATG Component!</span><br><span class=\"line\">.....</span><br><span class=\"line\">INFO  [stdout] &#x2F;dyn&#x2F;admin&#x2F;nucleus&#x2F;&#x2F;com&#x2F;buddha&#x2F;components&#x2F;HelloWorldComponent Hello ATG Component! Stops now!</span><br></pre></td></tr></table></figure>\n<p>This line is generated because of the sysout in our doStartService(); You can also give other methods that can be called through dyn/admin or interact with other components. However in production, avoid using System.out.println, instead use loggingDebug or loggingInfo. Best of Luck.</p>\n<hr>\n<p>Here is an interesting non-technical blog post that I came across recently: <a href=\"https://unfurledpages.wordpress.com/2016/03/21/turning-pages-or-tuning-channels/\">Reading a book vs Watching a Movie Adaption</a></p>\n","site":{"data":{}},"excerpt":"<p>There are so many concepts in Oracle Commerce (previously known as ATG), that makes coming up with Hello World program little difficult. Do you mean to create one JSP page and deploy it like commerce reference store? Do you want to create a component just to see in Dyn/Admin? Do you want to create a hello world repository? Depending on what you want to do, the approach to take will be different.<br><img src=\"https://farm2.staticflickr.com/1633/25195316629_65c8162a37_n.jpg\" alt=\"Too many options to begin with\"><br>To work with Oracle Commerce, you don’t have to know about persisting data in database. If you approach Oracle Commerce programming with J2EE &amp; MVC experience, you may find it little difficult to cope with it unless you start with a fresh mind, because things are very different in this platform.</p>\n<p>Today, I will demonstrate how to create a simple component so that it can be viewed in Dyn/Admin. Let us assume that you are trying to create it in your own module instead of existing module like DAS or DAF. Follow the the steps shown below.</p>\n<h2 id=\"Step-1-Create-an-Eclipse-project\"><a href=\"#Step-1-Create-an-Eclipse-project\" class=\"headerlink\" title=\"Step 1: Create an Eclipse project\"></a>Step 1: Create an Eclipse project</h2><p>Create an Eclipse project and make sure you add all the necessary class files to the build path. Add classes.jar or DAS at the least.</p>","more":"<p><img src=\"http://i.stack.imgur.com/OP8b7.png\" alt=\"Sample Eclipse Project Structure\"></p>\n<h2 id=\"Step-2-Create-the-Java-Class\"><a href=\"#Step-2-Create-the-Java-Class\" class=\"headerlink\" title=\"Step 2: Create the Java Class\"></a>Step 2: Create the Java Class</h2><p>A component in Oracle Commerce is combination of two files. A Java Class and a Properties File. The Java class can be a simple bean or can be a service that performs several tasks based on a schedule. Simplest way to create the necessary Java class is to extend GenericService.</p>\n<figure class=\"highlight java\"><figcaption><span>HelloWorldComponent.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.buddha.components;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> atg.nucleus.GenericService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> atg.nucleus.ServiceException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">GenericService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String firstStr = <span class=\"string\">&quot;Dummy Value&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFirstStr</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstStr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFirstStr</span><span class=\"params\">(String firstStr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.firstStr = firstStr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doStartService</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ServiceException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.doStartService();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello ATG Component!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doStopService</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ServiceException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.doStopService();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello ATG Component! Stops now!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Step-3-Create-the-properties-file\"><a href=\"#Step-3-Create-the-properties-file\" class=\"headerlink\" title=\"Step 3: Create the properties file\"></a>Step 3: Create the properties file</h2><p>The Properties file must be providing the values to the properties in the component. This initialises the bean. <code>$class</code> property will link the property file with the class file we have created in previous step. Location of the propety file decides the path of the component instead of the java class. Follow the example below to create the property file.</p>\n<figure class=\"highlight java\"><figcaption><span>HelloWorldComponent.properties</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$<span class=\"class\"><span class=\"keyword\">class</span></span>=com.buddha.components.HelloWorldComponent</span><br><span class=\"line\">firstStr=HelloWorld</span><br></pre></td></tr></table></figure>\n\n<p>Multiple components can be created from the same class file. A different properties file can have same <code>$class</code> but initialise firstStr to a different value. This creates a different component.</p>\n<h2 id=\"Step-4-Create-a-Manifest-file\"><a href=\"#Step-4-Create-a-Manifest-file\" class=\"headerlink\" title=\"Step 4: Create a Manifest file\"></a>Step 4: Create a Manifest file</h2><p>Manifest files is like a configuration for the module. What all are its dependencies when it is running in webserver, where are the compiled classes placed etc.,</p>\n<figure class=\"highlight plain\"><figcaption><span>Manifest.MF</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">ATG-Required: DafEar.Admin</span><br><span class=\"line\">ATG-Config-Path: config&#x2F;</span><br><span class=\"line\">ATG-Class-Path: .&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-5-Build-amp-Deploy\"><a href=\"#Step-5-Build-amp-Deploy\" class=\"headerlink\" title=\"Step 5: Build &amp; Deploy\"></a>Step 5: Build &amp; Deploy</h2><p>Build the project and copy the project folder into ${DYNAMO_ROOT} and run the following command to generate an ear file of your project and deploy it in your jboss server. No need to generate any ear file if you are running it on Tomcat. Just start the respective server with the given module.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runAssembler.bat -jboss HelloWorld.ear -m EXP_HelloATGComponentWorld</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-6-Access-the-Component\"><a href=\"#Step-6-Access-the-Component\" class=\"headerlink\" title=\"Step 6: Access the Component\"></a>Step 6: Access the Component</h2><p>Navigate to Dyn/Admin and search for the component HelloWorldComponent and click on the component listed in the search results.</p>\n<p><img src=\"http://i.stack.imgur.com/urvDL.png\" alt=\"Search Results in DynAdmin\"></p>\n<p>Click on it to go to the component page to see the property we have created and its value given in properties file.</p>\n<p><img src=\"http://i.stack.imgur.com/sWi9t.png\" alt=\"Component &amp; the property we have created earlier\"></p>\n<p>You can see the server log to find a line similar to this.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  [stdout] &#x2F;dyn&#x2F;admin&#x2F;nucleus&#x2F;&#x2F;com&#x2F;buddha&#x2F;components&#x2F;HelloWorldComponent Hello ATG Component!</span><br><span class=\"line\">.....</span><br><span class=\"line\">INFO  [stdout] &#x2F;dyn&#x2F;admin&#x2F;nucleus&#x2F;&#x2F;com&#x2F;buddha&#x2F;components&#x2F;HelloWorldComponent Hello ATG Component! Stops now!</span><br></pre></td></tr></table></figure>\n<p>This line is generated because of the sysout in our doStartService(); You can also give other methods that can be called through dyn/admin or interact with other components. However in production, avoid using System.out.println, instead use loggingDebug or loggingInfo. Best of Luck.</p>\n<hr>\n<p>Here is an interesting non-technical blog post that I came across recently: <a href=\"https://unfurledpages.wordpress.com/2016/03/21/turning-pages-or-tuning-channels/\">Reading a book vs Watching a Movie Adaption</a></p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://farm2.staticflickr.com/1633/25195316629_65c8162a37_n.jpg","popularPost_tmp_gaData":{"updated":"Sat Mar 05 2016 10:30:00 GMT-0800 (Pacific Standard Time)","title":"Hello World for Oracle Commerce (ATG)","path":"2016/03/hello-world-for-oracle-commerce/","eyeCatchImage":"https://farm2.staticflickr.com/1633/25195316629_65c8162a37_n.jpg","excerpt":"Oracle Commerce or ATG is an Ocean. There are so many new things to learn before you can write a program that runs on this platform. This article helps you learn how to begin with creating new components in Oracle Commerce.","date":{"_isAMomentObject":true,"_i":"2016-03-05T18:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2016-03-05T18:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["java","atg","oraclecommerce"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Breadth First Traversal In a Binary Tree Without Recursion","date":"2016-05-16T18:30:00.000Z","author":"Buddha","description":"Breadth first Traversal in a binary tree is a famous problem related to binary trees tree","_content":"\n<img src=\"/blog/assets/svgs/2016/breadth-first-traversal-2.svg\" alt=\"Breadth first/Level order traversal of a binary tree\"/>\n<span class=\"caption\">Breadth first/Level order traversal of a binary tree</span>\n\n## The Problem\n\nImagine you have a binary tree where as shown above. You may be aware of InOrder traversal where you follow a scheme of visiting left subtree and then visit root node and finally visit right subtree. With small variations in order same is done in pre-order as well as post-order traversal. How do you do a breadth first traversal? It is slightly more tricky. Doing it non-recursively is even more difficult at first sight. Let me first explain what is breadthfirst traversal.\n\nDifferent traversals produce different output as shown below\n\n{% codeblock In-Order Traversal lang:java %}\n10 15 20 25 28 30 32 35 45 50 55 60 62 65 70 75 80 90 95\n{% endcodeblock %}\n\n{% codeblock Post-Order Traversal lang:java %}\n10 20 15 28 32 30 45 35 25 55 62 70 65 60 80 95 90 75 50\n{% endcodeblock %}\n\n{% codeblock Pre-Order Traversal lang:java %}\n50 25 15 10 20 35 30 28 32 45 75 60 55 65 62 70 90 80 95\n{% endcodeblock %}\n\n{% codeblock Level-Order Traversal lang:java %}\n50 25 75 15 35 60 90 10 20 30 45 55 65 80 95 28 32 62 70\n{% endcodeblock %}\n\n\n<!-- more -->\nTrick to solve any binary tree problem without Recursion is to use an auxiliary datastructure like Queue or Stack. For this problem, we shall use Queue as shown below code snippet.\n\nLogic is actually pretty simple, at every level after the root node, add left and right elements to the queue and repeat the process for child levels. As Queue, will give us the elements in FIFO order, when we pop the elements, we will be getting them in the order they are added, which is breadth wise.\n\n{% codeblock lang:java %}\npublic void levelOrderTraversal(BinaryTree<Integer> tree) {\n  Queue<BinaryTreeNode<Integer>> q = new LinkedBlockingQueue<>();\n  q.add((tree.getRootNode()));\n  while(true) {\n    BinaryTreeNode<Integer> temp = q.poll();\n\n    if(temp == null)\n      break;\n\n    System.out.println(temp.getValue());\n\n    if(temp.left != null)\n      q.add(temp.left);\n    if(temp.right != null)\n      q.add(temp.right);\n  }\n}\n{% endcodeblock %}\n\nWhat do you think of this solution? Can you think of a simpler solution? Let me know in the comments.\n","source":"_posts/2016/05/non-recursive-breadth-first-traversal-binary-tree.md","raw":"---\ntitle: Breadth First Traversal In a Binary Tree Without Recursion\ndate: 2016-05-17\ntags: ['java', 'algorithms', 'data-structures', 'problem', 'interview-question', 'binary-tree']\nauthor: Buddha\ndescription: Breadth first Traversal in a binary tree is a famous problem related to binary trees tree\n---\n\n<img src=\"/blog/assets/svgs/2016/breadth-first-traversal-2.svg\" alt=\"Breadth first/Level order traversal of a binary tree\"/>\n<span class=\"caption\">Breadth first/Level order traversal of a binary tree</span>\n\n## The Problem\n\nImagine you have a binary tree where as shown above. You may be aware of InOrder traversal where you follow a scheme of visiting left subtree and then visit root node and finally visit right subtree. With small variations in order same is done in pre-order as well as post-order traversal. How do you do a breadth first traversal? It is slightly more tricky. Doing it non-recursively is even more difficult at first sight. Let me first explain what is breadthfirst traversal.\n\nDifferent traversals produce different output as shown below\n\n{% codeblock In-Order Traversal lang:java %}\n10 15 20 25 28 30 32 35 45 50 55 60 62 65 70 75 80 90 95\n{% endcodeblock %}\n\n{% codeblock Post-Order Traversal lang:java %}\n10 20 15 28 32 30 45 35 25 55 62 70 65 60 80 95 90 75 50\n{% endcodeblock %}\n\n{% codeblock Pre-Order Traversal lang:java %}\n50 25 15 10 20 35 30 28 32 45 75 60 55 65 62 70 90 80 95\n{% endcodeblock %}\n\n{% codeblock Level-Order Traversal lang:java %}\n50 25 75 15 35 60 90 10 20 30 45 55 65 80 95 28 32 62 70\n{% endcodeblock %}\n\n\n<!-- more -->\nTrick to solve any binary tree problem without Recursion is to use an auxiliary datastructure like Queue or Stack. For this problem, we shall use Queue as shown below code snippet.\n\nLogic is actually pretty simple, at every level after the root node, add left and right elements to the queue and repeat the process for child levels. As Queue, will give us the elements in FIFO order, when we pop the elements, we will be getting them in the order they are added, which is breadth wise.\n\n{% codeblock lang:java %}\npublic void levelOrderTraversal(BinaryTree<Integer> tree) {\n  Queue<BinaryTreeNode<Integer>> q = new LinkedBlockingQueue<>();\n  q.add((tree.getRootNode()));\n  while(true) {\n    BinaryTreeNode<Integer> temp = q.poll();\n\n    if(temp == null)\n      break;\n\n    System.out.println(temp.getValue());\n\n    if(temp.left != null)\n      q.add(temp.left);\n    if(temp.right != null)\n      q.add(temp.right);\n  }\n}\n{% endcodeblock %}\n\nWhat do you think of this solution? Can you think of a simpler solution? Let me know in the comments.\n","slug":"2016/05/non-recursive-breadth-first-traversal-binary-tree","published":1,"updated":"2016-05-16T18:30:00.000Z","_id":"ckki0ed2v000anbs6hcp6bp0k","comments":1,"layout":"post","photos":[],"link":"","content":"<img data-src=\"/blog/assets/svgs/2016/breadth-first-traversal-2.svg\" alt=\"Breadth first/Level order traversal of a binary tree\"/>\n<span class=\"caption\">Breadth first/Level order traversal of a binary tree</span>\n\n<h2 id=\"The-Problem\"><a href=\"#The-Problem\" class=\"headerlink\" title=\"The Problem\"></a>The Problem</h2><p>Imagine you have a binary tree where as shown above. You may be aware of InOrder traversal where you follow a scheme of visiting left subtree and then visit root node and finally visit right subtree. With small variations in order same is done in pre-order as well as post-order traversal. How do you do a breadth first traversal? It is slightly more tricky. Doing it non-recursively is even more difficult at first sight. Let me first explain what is breadthfirst traversal.</p>\n<p>Different traversals produce different output as shown below</p>\n<figure class=\"highlight java\"><figcaption><span>In-Order Traversal</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">15</span> <span class=\"number\">20</span> <span class=\"number\">25</span> <span class=\"number\">28</span> <span class=\"number\">30</span> <span class=\"number\">32</span> <span class=\"number\">35</span> <span class=\"number\">45</span> <span class=\"number\">50</span> <span class=\"number\">55</span> <span class=\"number\">60</span> <span class=\"number\">62</span> <span class=\"number\">65</span> <span class=\"number\">70</span> <span class=\"number\">75</span> <span class=\"number\">80</span> <span class=\"number\">90</span> <span class=\"number\">95</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><figcaption><span>Post-Order Traversal</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">20</span> <span class=\"number\">15</span> <span class=\"number\">28</span> <span class=\"number\">32</span> <span class=\"number\">30</span> <span class=\"number\">45</span> <span class=\"number\">35</span> <span class=\"number\">25</span> <span class=\"number\">55</span> <span class=\"number\">62</span> <span class=\"number\">70</span> <span class=\"number\">65</span> <span class=\"number\">60</span> <span class=\"number\">80</span> <span class=\"number\">95</span> <span class=\"number\">90</span> <span class=\"number\">75</span> <span class=\"number\">50</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><figcaption><span>Pre-Order Traversal</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">50</span> <span class=\"number\">25</span> <span class=\"number\">15</span> <span class=\"number\">10</span> <span class=\"number\">20</span> <span class=\"number\">35</span> <span class=\"number\">30</span> <span class=\"number\">28</span> <span class=\"number\">32</span> <span class=\"number\">45</span> <span class=\"number\">75</span> <span class=\"number\">60</span> <span class=\"number\">55</span> <span class=\"number\">65</span> <span class=\"number\">62</span> <span class=\"number\">70</span> <span class=\"number\">90</span> <span class=\"number\">80</span> <span class=\"number\">95</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><figcaption><span>Level-Order Traversal</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">50</span> <span class=\"number\">25</span> <span class=\"number\">75</span> <span class=\"number\">15</span> <span class=\"number\">35</span> <span class=\"number\">60</span> <span class=\"number\">90</span> <span class=\"number\">10</span> <span class=\"number\">20</span> <span class=\"number\">30</span> <span class=\"number\">45</span> <span class=\"number\">55</span> <span class=\"number\">65</span> <span class=\"number\">80</span> <span class=\"number\">95</span> <span class=\"number\">28</span> <span class=\"number\">32</span> <span class=\"number\">62</span> <span class=\"number\">70</span></span><br></pre></td></tr></table></figure>\n\n\n<span id=\"more\"></span>\n<p>Trick to solve any binary tree problem without Recursion is to use an auxiliary datastructure like Queue or Stack. For this problem, we shall use Queue as shown below code snippet.</p>\n<p>Logic is actually pretty simple, at every level after the root node, add left and right elements to the queue and repeat the process for child levels. As Queue, will give us the elements in FIFO order, when we pop the elements, we will be getting them in the order they are added, which is breadth wise.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">levelOrderTraversal</span><span class=\"params\">(BinaryTree&lt;Integer&gt; tree)</span> </span>&#123;</span><br><span class=\"line\">  Queue&lt;BinaryTreeNode&lt;Integer&gt;&gt; q = <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;&gt;();</span><br><span class=\"line\">  q.add((tree.getRootNode()));</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">    BinaryTreeNode&lt;Integer&gt; temp = q.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(temp.getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp.left != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      q.add(temp.left);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp.right != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      q.add(temp.right);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>What do you think of this solution? Can you think of a simpler solution? Let me know in the comments.</p>\n","site":{"data":{"head":""}},"excerpt":"<img src=\"/blog/assets/svgs/2016/breadth-first-traversal-2.svg\" alt=\"Breadth first/Level order traversal of a binary tree\"/>\n<span class=\"caption\">Breadth first/Level order traversal of a binary tree</span>\n\n<h2 id=\"The-Problem\"><a href=\"#The-Problem\" class=\"headerlink\" title=\"The Problem\"></a>The Problem</h2><p>Imagine you have a binary tree where as shown above. You may be aware of InOrder traversal where you follow a scheme of visiting left subtree and then visit root node and finally visit right subtree. With small variations in order same is done in pre-order as well as post-order traversal. How do you do a breadth first traversal? It is slightly more tricky. Doing it non-recursively is even more difficult at first sight. Let me first explain what is breadthfirst traversal.</p>\n<p>Different traversals produce different output as shown below</p>\n<figure class=\"highlight java\"><figcaption><span>In-Order Traversal</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">15</span> <span class=\"number\">20</span> <span class=\"number\">25</span> <span class=\"number\">28</span> <span class=\"number\">30</span> <span class=\"number\">32</span> <span class=\"number\">35</span> <span class=\"number\">45</span> <span class=\"number\">50</span> <span class=\"number\">55</span> <span class=\"number\">60</span> <span class=\"number\">62</span> <span class=\"number\">65</span> <span class=\"number\">70</span> <span class=\"number\">75</span> <span class=\"number\">80</span> <span class=\"number\">90</span> <span class=\"number\">95</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><figcaption><span>Post-Order Traversal</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">20</span> <span class=\"number\">15</span> <span class=\"number\">28</span> <span class=\"number\">32</span> <span class=\"number\">30</span> <span class=\"number\">45</span> <span class=\"number\">35</span> <span class=\"number\">25</span> <span class=\"number\">55</span> <span class=\"number\">62</span> <span class=\"number\">70</span> <span class=\"number\">65</span> <span class=\"number\">60</span> <span class=\"number\">80</span> <span class=\"number\">95</span> <span class=\"number\">90</span> <span class=\"number\">75</span> <span class=\"number\">50</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><figcaption><span>Pre-Order Traversal</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">50</span> <span class=\"number\">25</span> <span class=\"number\">15</span> <span class=\"number\">10</span> <span class=\"number\">20</span> <span class=\"number\">35</span> <span class=\"number\">30</span> <span class=\"number\">28</span> <span class=\"number\">32</span> <span class=\"number\">45</span> <span class=\"number\">75</span> <span class=\"number\">60</span> <span class=\"number\">55</span> <span class=\"number\">65</span> <span class=\"number\">62</span> <span class=\"number\">70</span> <span class=\"number\">90</span> <span class=\"number\">80</span> <span class=\"number\">95</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><figcaption><span>Level-Order Traversal</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">50</span> <span class=\"number\">25</span> <span class=\"number\">75</span> <span class=\"number\">15</span> <span class=\"number\">35</span> <span class=\"number\">60</span> <span class=\"number\">90</span> <span class=\"number\">10</span> <span class=\"number\">20</span> <span class=\"number\">30</span> <span class=\"number\">45</span> <span class=\"number\">55</span> <span class=\"number\">65</span> <span class=\"number\">80</span> <span class=\"number\">95</span> <span class=\"number\">28</span> <span class=\"number\">32</span> <span class=\"number\">62</span> <span class=\"number\">70</span></span><br></pre></td></tr></table></figure>","more":"<p>Trick to solve any binary tree problem without Recursion is to use an auxiliary datastructure like Queue or Stack. For this problem, we shall use Queue as shown below code snippet.</p>\n<p>Logic is actually pretty simple, at every level after the root node, add left and right elements to the queue and repeat the process for child levels. As Queue, will give us the elements in FIFO order, when we pop the elements, we will be getting them in the order they are added, which is breadth wise.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">levelOrderTraversal</span><span class=\"params\">(BinaryTree&lt;Integer&gt; tree)</span> </span>&#123;</span><br><span class=\"line\">  Queue&lt;BinaryTreeNode&lt;Integer&gt;&gt; q = <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;&gt;();</span><br><span class=\"line\">  q.add((tree.getRootNode()));</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">    BinaryTreeNode&lt;Integer&gt; temp = q.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(temp.getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp.left != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      q.add(temp.left);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp.right != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      q.add(temp.right);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>What do you think of this solution? Can you think of a simpler solution? Let me know in the comments.</p>","popularPost_tmp_postPath":true,"eyeCatchImage":"/blog/assets/svgs/2016/breadth-first-traversal-2.svg","popularPost_tmp_gaData":{"updated":"Mon May 16 2016 11:30:00 GMT-0700 (Pacific Daylight Time)","title":"Breadth First Traversal In a Binary Tree Without Recursion","path":"2016/05/non-recursive-breadth-first-traversal-binary-tree/","eyeCatchImage":"/blog/assets/svgs/2016/breadth-first-traversal-2.svg","excerpt":"Breadth first Traversal in a binary tree is a famous problem related to binary trees tree","date":{"_isAMomentObject":true,"_i":"2016-05-16T18:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2016-05-16T18:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["java","algorithms","data-structures","problem","interview-question","binary-tree"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Open Source Patch Utility For Perforce","date":"2016-03-07T18:30:00.000Z","description":"Introduction to an opensource utility for generating patch files for pending changelists in perforce version controlling system","author":"Buddha","_content":"\nPerforce is a proprietary version controlling system. It has been around for more than 20 years. However, one glaring limitation always bugs the users. The inability to generate proper diff files.\n![Where is my patch?](https://farm2.staticflickr.com/1441/25563016955_8a691e760b_n.jpg)\nI can anticipate what is going on in your mind, we can generate a diff file by using the command line interface. `p4 diff` helps us generate a diff file. However if you ever had a misfortune of trying to generate patch files on regular basis. You would understand the pain. It works fine as long as you just modify existing files. However, if you have new files added to the workspace to be checked into to the depot, you quickly run out of luck. One more problem is that you can’t control the files included in the diff file based on change list. It gives you diff file for all the files that are modified. Of course, you can give individual file names, but you have to repeat it either one by one or by using common wildcard. To overcome this, I have come up with a simple JavaFX utility.  Using this utility is as simple as it can get.\n\nFirst step is to download the [Perforce Patcher jar](https://github.com/jbuddha/perforce-patcher/blob/master/dist/perforce-patcher.jar?raw=true). Just double click the jar file to run it.\n{% admonition warning Watchout %}\nYou Need JRE 8 to run this without any additional configuration. If you are using JRE 7, please keep jfxrt.jar in class path or simply copy it to your jre/lib/ext folder. jfxrt.jar is available inside your {jre or jdk}/lib folder.\n{% endadmonition %}\n\nUpon opening the application you will be presented with the login screen. Login with your regular perforce credentials, deselect Remember me, if you don’t want to store the data entered by you locally. By leaving the default value your credentials will be saved in the application cache so that you need not enter it again.\n![Login Pane](https://farm2.staticflickr.com/1626/25596793045_91c403dfd9_z.jpg)\n\n\n If the login is successful, you will be taken to the next screen otherwise check the Log pane for error. Select the local perforce workspace name and the change list id and click Generate Patch button and save the file at your preferred location through the Save dialog which pops up.\n![Patch Generation Pane](https://farm2.staticflickr.com/1501/25229331639_f3324f01b4_z.jpg)\n{% admonition info %}\nYou will be logged out upon closing the application automatically.You can download the utility as a runnable jar from the github repository folder.\n{% endadmonition %}\n\nYou can find the [project and its source](https://github.com/jbuddha/perforce-patcher) in github. If you like the project, and want to contribute by adding more features, please fork the github repo. It is a maven project so building it is as quick as a wink.\n","source":"_posts/2016/03/patch-utility-for-perforce.md","raw":"---\ntitle: Open Source Patch Utility For Perforce\ndate: 2016-03-08\ntags: ['javafx','opensource','perforce','java']\ndescription: Introduction to an opensource utility for generating patch files for pending changelists in perforce version controlling system\nauthor: Buddha\n---\n\nPerforce is a proprietary version controlling system. It has been around for more than 20 years. However, one glaring limitation always bugs the users. The inability to generate proper diff files.\n![Where is my patch?](https://farm2.staticflickr.com/1441/25563016955_8a691e760b_n.jpg)\nI can anticipate what is going on in your mind, we can generate a diff file by using the command line interface. `p4 diff` helps us generate a diff file. However if you ever had a misfortune of trying to generate patch files on regular basis. You would understand the pain. It works fine as long as you just modify existing files. However, if you have new files added to the workspace to be checked into to the depot, you quickly run out of luck. One more problem is that you can’t control the files included in the diff file based on change list. It gives you diff file for all the files that are modified. Of course, you can give individual file names, but you have to repeat it either one by one or by using common wildcard. To overcome this, I have come up with a simple JavaFX utility.  Using this utility is as simple as it can get.\n\nFirst step is to download the [Perforce Patcher jar](https://github.com/jbuddha/perforce-patcher/blob/master/dist/perforce-patcher.jar?raw=true). Just double click the jar file to run it.\n{% admonition warning Watchout %}\nYou Need JRE 8 to run this without any additional configuration. If you are using JRE 7, please keep jfxrt.jar in class path or simply copy it to your jre/lib/ext folder. jfxrt.jar is available inside your {jre or jdk}/lib folder.\n{% endadmonition %}\n\nUpon opening the application you will be presented with the login screen. Login with your regular perforce credentials, deselect Remember me, if you don’t want to store the data entered by you locally. By leaving the default value your credentials will be saved in the application cache so that you need not enter it again.\n![Login Pane](https://farm2.staticflickr.com/1626/25596793045_91c403dfd9_z.jpg)\n\n\n If the login is successful, you will be taken to the next screen otherwise check the Log pane for error. Select the local perforce workspace name and the change list id and click Generate Patch button and save the file at your preferred location through the Save dialog which pops up.\n![Patch Generation Pane](https://farm2.staticflickr.com/1501/25229331639_f3324f01b4_z.jpg)\n{% admonition info %}\nYou will be logged out upon closing the application automatically.You can download the utility as a runnable jar from the github repository folder.\n{% endadmonition %}\n\nYou can find the [project and its source](https://github.com/jbuddha/perforce-patcher) in github. If you like the project, and want to contribute by adding more features, please fork the github repo. It is a maven project so building it is as quick as a wink.\n","slug":"2016/03/patch-utility-for-perforce","published":1,"updated":"2016-03-07T18:30:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckki0ed2w000bnbs6gn1eby8u","content":"<p>Perforce is a proprietary version controlling system. It has been around for more than 20 years. However, one glaring limitation always bugs the users. The inability to generate proper diff files.<br><img src=\"https://farm2.staticflickr.com/1441/25563016955_8a691e760b_n.jpg\" alt=\"Where is my patch?\"><br>I can anticipate what is going on in your mind, we can generate a diff file by using the command line interface. <code>p4 diff</code> helps us generate a diff file. However if you ever had a misfortune of trying to generate patch files on regular basis. You would understand the pain. It works fine as long as you just modify existing files. However, if you have new files added to the workspace to be checked into to the depot, you quickly run out of luck. One more problem is that you can’t control the files included in the diff file based on change list. It gives you diff file for all the files that are modified. Of course, you can give individual file names, but you have to repeat it either one by one or by using common wildcard. To overcome this, I have come up with a simple JavaFX utility.  Using this utility is as simple as it can get.</p>\n<p>First step is to download the <a href=\"https://github.com/jbuddha/perforce-patcher/blob/master/dist/perforce-patcher.jar?raw=true\">Perforce Patcher jar</a>. Just double click the jar file to run it.</p>\n<div class=\"admonition warning\"><p class=\"admonition-title\">Watchout</p><p>You Need JRE 8 to run this without any additional configuration. If you are using JRE 7, please keep jfxrt.jar in class path or simply copy it to your jre/lib/ext folder. jfxrt.jar is available inside your {jre or jdk}/lib folder.</p>\n</div>\n\n<p>Upon opening the application you will be presented with the login screen. Login with your regular perforce credentials, deselect Remember me, if you don’t want to store the data entered by you locally. By leaving the default value your credentials will be saved in the application cache so that you need not enter it again.<br><img src=\"https://farm2.staticflickr.com/1626/25596793045_91c403dfd9_z.jpg\" alt=\"Login Pane\"></p>\n<p> If the login is successful, you will be taken to the next screen otherwise check the Log pane for error. Select the local perforce workspace name and the change list id and click Generate Patch button and save the file at your preferred location through the Save dialog which pops up.<br><img src=\"https://farm2.staticflickr.com/1501/25229331639_f3324f01b4_z.jpg\" alt=\"Patch Generation Pane\"></p>\n<div class=\"admonition info\"><p class=\"admonition-title\">Note</p><p>You will be logged out upon closing the application automatically.You can download the utility as a runnable jar from the github repository folder.</p>\n</div>\n\n<p>You can find the <a href=\"https://github.com/jbuddha/perforce-patcher\">project and its source</a> in github. If you like the project, and want to contribute by adding more features, please fork the github repo. It is a maven project so building it is as quick as a wink.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Perforce is a proprietary version controlling system. It has been around for more than 20 years. However, one glaring limitation always bugs the users. The inability to generate proper diff files.<br><img src=\"https://farm2.staticflickr.com/1441/25563016955_8a691e760b_n.jpg\" alt=\"Where is my patch?\"><br>I can anticipate what is going on in your mind, we can generate a diff file by using the command line interface. <code>p4 diff</code> helps us generate a diff file. However if you ever had a misfortune of trying to generate patch files on regular basis. You would understand the pain. It works fine as long as you just modify existing files. However, if you have new files added to the workspace to be checked into to the depot, you quickly run out of luck. One more problem is that you can’t control the files included in the diff file based on change list. It gives you diff file for all the files that are modified. Of course, you can give individual file names, but you have to repeat it either one by one or by using common wildcard. To overcome this, I have come up with a simple JavaFX utility.  Using this utility is as simple as it can get.</p>\n<p>First step is to download the <a href=\"https://github.com/jbuddha/perforce-patcher/blob/master/dist/perforce-patcher.jar?raw=true\">Perforce Patcher jar</a>. Just double click the jar file to run it.</p>\n<div class=\"admonition warning\"><p class=\"admonition-title\">Watchout</p><p>You Need JRE 8 to run this without any additional configuration. If you are using JRE 7, please keep jfxrt.jar in class path or simply copy it to your jre/lib/ext folder. jfxrt.jar is available inside your {jre or jdk}/lib folder.</p>\n</div>\n\n<p>Upon opening the application you will be presented with the login screen. Login with your regular perforce credentials, deselect Remember me, if you don’t want to store the data entered by you locally. By leaving the default value your credentials will be saved in the application cache so that you need not enter it again.<br><img src=\"https://farm2.staticflickr.com/1626/25596793045_91c403dfd9_z.jpg\" alt=\"Login Pane\"></p>\n<p> If the login is successful, you will be taken to the next screen otherwise check the Log pane for error. Select the local perforce workspace name and the change list id and click Generate Patch button and save the file at your preferred location through the Save dialog which pops up.<br><img src=\"https://farm2.staticflickr.com/1501/25229331639_f3324f01b4_z.jpg\" alt=\"Patch Generation Pane\"></p>\n<div class=\"admonition info\"><p class=\"admonition-title\">Note</p><p>You will be logged out upon closing the application automatically.You can download the utility as a runnable jar from the github repository folder.</p>\n</div>\n\n<p>You can find the <a href=\"https://github.com/jbuddha/perforce-patcher\">project and its source</a> in github. If you like the project, and want to contribute by adding more features, please fork the github repo. It is a maven project so building it is as quick as a wink.</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://farm2.staticflickr.com/1441/25563016955_8a691e760b_n.jpg","popularPost_tmp_gaData":{"updated":"Mon Mar 07 2016 10:30:00 GMT-0800 (Pacific Standard Time)","title":"Open Source Patch Utility For Perforce","path":"2016/03/patch-utility-for-perforce/","eyeCatchImage":"https://farm2.staticflickr.com/1441/25563016955_8a691e760b_n.jpg","excerpt":"Introduction to an opensource utility for generating patch files for pending changelists in perforce version controlling system","date":{"_isAMomentObject":true,"_i":"2016-03-07T18:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2016-03-07T18:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["java","javafx","opensource","perforce"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Collapsible panel using OJet & jQuery","date":"2016-06-10T18:30:00.000Z","author":"Buddha","description":"If you have ever wanted to develop a div/panel that can be minimized or maximized and close by clicking on respective icons, this article shows you how to do it.","_content":"Before we begin, let me show you the final output we are going to get. Click Run Pen button if you want to see the collapsible panel in action\n\n{% codepen PzGZMW 'Collapsible and Expandable Panels' result wait 265 %}\n\nThe panel can be minimized or maximized by clicking on the arrow button. It can also be removed completely by clicking close button. How do we achieve this? I have used KnockoutJS, OracleJET and jQuery to achieve the result. RequireJS is also used but only to get the required libraries from CDN. However, OracleJet is predomantly is used for styling alone. Rest of the bindings can be achieved by regular KnockoutJS and jQuery. Read forward to learn how to get the above result.\n<!-- more -->\nIf you are not familiar with RequireJS and OracleJet, some of the things are bit tricky at first, hence basic knowledge on this is expected.\n## The View\nView mainly consists of Two elements. One is title bar and another is collapsible div. We can use font-awesome to get the icons.\n### Title bar\nTitle bar itself presents several problems. How can we push the icons to the right. We can achieve this very easily by seperating the title bar into 3 parts. The Title text, The icons, and the gap. We can very easily fix the icons and title text at their respective ends by making the gap a flex item that grows where as the other two remain fixed.\n\nOracle Jet provides Flex Bar for this kind of purposes. We can make a div a flex bar by applying `.oj-flex-bar` class. For the children, we have to use `.oj-flex-bar-start` and `.oj-flex-bar-end` classes for title text and icons div. However, we have to keep an empty div and give it `.oj-flex-item` class so that it grows or shrinks automatically when ever the title bar changes its size. This will ensure that icons stay at the end of title bar. Lines 3, 4 & 5 demonstrate the usage of these classes.\n\nFor icons, `fa-chevron-circle-down` and `fa-chevron-circle-up` from font-awesome library are used depending on state of the panel. No need to have two different icons as only one of them is used all the time. So, these classes are conditionally added to html based on collapsed state. Used regualar knockout css binding. Observe lines 4 and 5 in the following snippet. `collapsed` is an observable. When collapsed is true, down icon class is used for the `i` tag and when it is false, the down class will be removed. Same thing happens for the up icon but in reverse. Lines 7 & 8 demonstrate the conditional css binding. All other classes `fa oj-margin-start oj-padding-horizontal hoverable` are constant, hence directly set to `class` attribute of icon tag. `fa-times` works well for close button. Both these icons' click events are bound to functions. Close icon is bound to close funtion and min-max button button's click handler is collapse. We shall discuss these further in the view model section. The entire title bar is placed in a div whose id is header.\n\n{% codeblock Min-Max Icon binding lang:html %}\n<div id=\"panel\" class=\"oj-margin\" style=\"border: 1px solid\">\n  <div id=\"header\" class=\"oj-flex oj-panel oj-flex-bar\">\n    <div class=\"oj-flex-start\" >This is the title</div>\n    <div class=\"oj-flex-item\"></div>\n    <div class=\"oj-flex-end oj-panel-alt1 oj-margin-start\">\n      <i id=\"min-max-icon\" class=\"fa oj-margin-start oj-padding-horizontal hoverable\"\n          data-bind=\"click: collapse,\n                     css: {'fa-chevron-circle-down': collapsed(),\n                           'fa-chevron-circle-up':  !collapsed()}\"></i>\n      <i class=\"fa fa-close oj-padding-horizontal hoverable\" data-bind=\"click: close\"></i>\n    </div>\n  </div>\n  <div id=\"collapsableContent\" style=\"width: 300px;\">\n    <h1>{{val}}</h1>\n  </div>\n</div>\n{% endcodeblock %}\n\nThe collapsable content is placed in a seperate div `#collapsableContent`. I have used knockout punches to bind `val` observable to the content of h1 tag inside collapsible content. How this is collapsed is discussed in the next section.\n\n## The View Model\n\nView model is pretty simple. It has two observables, one is `val` whose content are bound to h1. This observable is not mandatory. The other observable is `collapsed`. This is quite important. Especially for switching minimise and maximise icons. This is either true of false. Upon calling `collapse` event handler, the value will be flipped.\n\n\n{% codeblock View Model lang:js %}\ndefine(['ojs/ojcore', 'knockout'], function (oj, ko) {\n  function panelWithIconsContentViewModel() {\n    var self = this;\n\n    self.val = \"I'm going to be collapsed, I have some text...\";\n    self.collapsed = ko.observable(false);\n\n    self.collapse = function collapse(event) {\n      $(\"#collapsableContent\").slideToggle();\n      self.collapsed(!self.collapsed());\n    };\n\n    self.close = function collapse(event) {\n      $(\"#panel\").remove();\n    };\n  }\n\n  return panelWithIconsContentViewModel;\n});\n{% endcodeblock %}\n\n\n`self.collapse` is a function that gets triggered upon clicking min or max function. jQuery's slideToggle function is used to slide the `collapsableContent` in and out of view giving an impression of minimize.\n\nThe other function is `self.close` which is bound to click handler of close icon. This simply removes the entire panel by using jQuery's remove method. You may want to do something more by showing a dialog asking whether user really wants to close or not, I chose to simply close it.\n\nI didn't include other configuration information that is required for oraclejet and other libraries in the above code snippet. Please refer the codepen's javascript resources given for configuration related code. However, if you are creating a seperate viewModel for the panel alone, no other code is necessary.\n\n{% codepen PzGZMW 'Collapsible and Expandable Panels' html %}\n\n\n----\n\nIf you are interested in non technical reading: [An escape or a possibility?](https://unfurledpages.wordpress.com/2016/06/01/an-escape-or-a-possibilty/)\n","source":"_posts/2016/06/collapsible-panel-in-oracle-jet.md","raw":"---\ntitle: Collapsible panel using OJet & jQuery\ndate: 2016-06-11\ntags: ['oraclejet', 'javascript', 'html', 'knockoutjs', 'jquery', 'css']\nauthor: Buddha\ndescription: If you have ever wanted to develop a div/panel that can be minimized or maximized and close by clicking on respective icons, this article shows you how to do it.\n---\nBefore we begin, let me show you the final output we are going to get. Click Run Pen button if you want to see the collapsible panel in action\n\n{% codepen PzGZMW 'Collapsible and Expandable Panels' result wait 265 %}\n\nThe panel can be minimized or maximized by clicking on the arrow button. It can also be removed completely by clicking close button. How do we achieve this? I have used KnockoutJS, OracleJET and jQuery to achieve the result. RequireJS is also used but only to get the required libraries from CDN. However, OracleJet is predomantly is used for styling alone. Rest of the bindings can be achieved by regular KnockoutJS and jQuery. Read forward to learn how to get the above result.\n<!-- more -->\nIf you are not familiar with RequireJS and OracleJet, some of the things are bit tricky at first, hence basic knowledge on this is expected.\n## The View\nView mainly consists of Two elements. One is title bar and another is collapsible div. We can use font-awesome to get the icons.\n### Title bar\nTitle bar itself presents several problems. How can we push the icons to the right. We can achieve this very easily by seperating the title bar into 3 parts. The Title text, The icons, and the gap. We can very easily fix the icons and title text at their respective ends by making the gap a flex item that grows where as the other two remain fixed.\n\nOracle Jet provides Flex Bar for this kind of purposes. We can make a div a flex bar by applying `.oj-flex-bar` class. For the children, we have to use `.oj-flex-bar-start` and `.oj-flex-bar-end` classes for title text and icons div. However, we have to keep an empty div and give it `.oj-flex-item` class so that it grows or shrinks automatically when ever the title bar changes its size. This will ensure that icons stay at the end of title bar. Lines 3, 4 & 5 demonstrate the usage of these classes.\n\nFor icons, `fa-chevron-circle-down` and `fa-chevron-circle-up` from font-awesome library are used depending on state of the panel. No need to have two different icons as only one of them is used all the time. So, these classes are conditionally added to html based on collapsed state. Used regualar knockout css binding. Observe lines 4 and 5 in the following snippet. `collapsed` is an observable. When collapsed is true, down icon class is used for the `i` tag and when it is false, the down class will be removed. Same thing happens for the up icon but in reverse. Lines 7 & 8 demonstrate the conditional css binding. All other classes `fa oj-margin-start oj-padding-horizontal hoverable` are constant, hence directly set to `class` attribute of icon tag. `fa-times` works well for close button. Both these icons' click events are bound to functions. Close icon is bound to close funtion and min-max button button's click handler is collapse. We shall discuss these further in the view model section. The entire title bar is placed in a div whose id is header.\n\n{% codeblock Min-Max Icon binding lang:html %}\n<div id=\"panel\" class=\"oj-margin\" style=\"border: 1px solid\">\n  <div id=\"header\" class=\"oj-flex oj-panel oj-flex-bar\">\n    <div class=\"oj-flex-start\" >This is the title</div>\n    <div class=\"oj-flex-item\"></div>\n    <div class=\"oj-flex-end oj-panel-alt1 oj-margin-start\">\n      <i id=\"min-max-icon\" class=\"fa oj-margin-start oj-padding-horizontal hoverable\"\n          data-bind=\"click: collapse,\n                     css: {'fa-chevron-circle-down': collapsed(),\n                           'fa-chevron-circle-up':  !collapsed()}\"></i>\n      <i class=\"fa fa-close oj-padding-horizontal hoverable\" data-bind=\"click: close\"></i>\n    </div>\n  </div>\n  <div id=\"collapsableContent\" style=\"width: 300px;\">\n    <h1>{{val}}</h1>\n  </div>\n</div>\n{% endcodeblock %}\n\nThe collapsable content is placed in a seperate div `#collapsableContent`. I have used knockout punches to bind `val` observable to the content of h1 tag inside collapsible content. How this is collapsed is discussed in the next section.\n\n## The View Model\n\nView model is pretty simple. It has two observables, one is `val` whose content are bound to h1. This observable is not mandatory. The other observable is `collapsed`. This is quite important. Especially for switching minimise and maximise icons. This is either true of false. Upon calling `collapse` event handler, the value will be flipped.\n\n\n{% codeblock View Model lang:js %}\ndefine(['ojs/ojcore', 'knockout'], function (oj, ko) {\n  function panelWithIconsContentViewModel() {\n    var self = this;\n\n    self.val = \"I'm going to be collapsed, I have some text...\";\n    self.collapsed = ko.observable(false);\n\n    self.collapse = function collapse(event) {\n      $(\"#collapsableContent\").slideToggle();\n      self.collapsed(!self.collapsed());\n    };\n\n    self.close = function collapse(event) {\n      $(\"#panel\").remove();\n    };\n  }\n\n  return panelWithIconsContentViewModel;\n});\n{% endcodeblock %}\n\n\n`self.collapse` is a function that gets triggered upon clicking min or max function. jQuery's slideToggle function is used to slide the `collapsableContent` in and out of view giving an impression of minimize.\n\nThe other function is `self.close` which is bound to click handler of close icon. This simply removes the entire panel by using jQuery's remove method. You may want to do something more by showing a dialog asking whether user really wants to close or not, I chose to simply close it.\n\nI didn't include other configuration information that is required for oraclejet and other libraries in the above code snippet. Please refer the codepen's javascript resources given for configuration related code. However, if you are creating a seperate viewModel for the panel alone, no other code is necessary.\n\n{% codepen PzGZMW 'Collapsible and Expandable Panels' html %}\n\n\n----\n\nIf you are interested in non technical reading: [An escape or a possibility?](https://unfurledpages.wordpress.com/2016/06/01/an-escape-or-a-possibilty/)\n","slug":"2016/06/collapsible-panel-in-oracle-jet","published":1,"updated":"2016-06-10T18:30:00.000Z","_id":"ckki0ed2x000dnbs67uyj3ily","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Before we begin, let me show you the final output we are going to get. Click Run Pen button if you want to see the collapsible panel in action</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"PzGZMW\" data-default-tab=\"result\" data-user=\"jbuddha\" data-embed-version=\"2\" data-preview=\"true\" class=\"codepen\">See the Pen <span class=\"exturl\" data-url=\"aHR0cDovL2NvZGVwZW4uaW8vamJ1ZGRoYS9wZW4vUHpHWk1XLw==\">Collapsible and Expandable Panels<i class=\"fa fa-external-link-alt\"></i></span> by Buddha (<span class=\"exturl\" data-url=\"aHR0cDovL2NvZGVwZW4uaW8vamJ1ZGRoYQ==\">@jbuddha<i class=\"fa fa-external-link-alt\"></i></span>) on <span class=\"exturl\" data-url=\"aHR0cDovL2NvZGVwZW4uaW8=\">CodePen<i class=\"fa fa-external-link-alt\"></i></span>.</p><script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n<p>The panel can be minimized or maximized by clicking on the arrow button. It can also be removed completely by clicking close button. How do we achieve this? I have used KnockoutJS, OracleJET and jQuery to achieve the result. RequireJS is also used but only to get the required libraries from CDN. However, OracleJet is predomantly is used for styling alone. Rest of the bindings can be achieved by regular KnockoutJS and jQuery. Read forward to learn how to get the above result.</p>\n<a id=\"more\"></a>\n<p>If you are not familiar with RequireJS and OracleJet, some of the things are bit tricky at first, hence basic knowledge on this is expected.</p>\n<h2 id=\"The-View\"><a href=\"#The-View\" class=\"headerlink\" title=\"The View\"></a>The View</h2><p>View mainly consists of Two elements. One is title bar and another is collapsible div. We can use font-awesome to get the icons.</p>\n<h3 id=\"Title-bar\"><a href=\"#Title-bar\" class=\"headerlink\" title=\"Title bar\"></a>Title bar</h3><p>Title bar itself presents several problems. How can we push the icons to the right. We can achieve this very easily by seperating the title bar into 3 parts. The Title text, The icons, and the gap. We can very easily fix the icons and title text at their respective ends by making the gap a flex item that grows where as the other two remain fixed.</p>\n<p>Oracle Jet provides Flex Bar for this kind of purposes. We can make a div a flex bar by applying <code>.oj-flex-bar</code> class. For the children, we have to use <code>.oj-flex-bar-start</code> and <code>.oj-flex-bar-end</code> classes for title text and icons div. However, we have to keep an empty div and give it <code>.oj-flex-item</code> class so that it grows or shrinks automatically when ever the title bar changes its size. This will ensure that icons stay at the end of title bar. Lines 3, 4 &amp; 5 demonstrate the usage of these classes.</p>\n<p>For icons, <code>fa-chevron-circle-down</code> and <code>fa-chevron-circle-up</code> from font-awesome library are used depending on state of the panel. No need to have two different icons as only one of them is used all the time. So, these classes are conditionally added to html based on collapsed state. Used regualar knockout css binding. Observe lines 4 and 5 in the following snippet. <code>collapsed</code> is an observable. When collapsed is true, down icon class is used for the <code>i</code> tag and when it is false, the down class will be removed. Same thing happens for the up icon but in reverse. Lines 7 &amp; 8 demonstrate the conditional css binding. All other classes <code>fa oj-margin-start oj-padding-horizontal hoverable</code> are constant, hence directly set to <code>class</code> attribute of icon tag. <code>fa-times</code> works well for close button. Both these icons’ click events are bound to functions. Close icon is bound to close funtion and min-max button button’s click handler is collapse. We shall discuss these further in the view model section. The entire title bar is placed in a div whose id is header.</p>\n<figure class=\"highlight html\"><figcaption><span>Min-Max Icon binding</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;panel&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;oj-margin&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;border: 1px solid&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;header&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;oj-flex oj-panel oj-flex-bar&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;oj-flex-start&quot;</span> &gt;</span>This is the title<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;oj-flex-item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;oj-flex-end oj-panel-alt1 oj-margin-start&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;min-max-icon&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa oj-margin-start oj-padding-horizontal hoverable&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">data-bind</span>=<span class=\"string\">&quot;click: collapse,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                     css: &#123;&#x27;fa-chevron-circle-down&#x27;: collapsed(),</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                           &#x27;fa-chevron-circle-up&#x27;:  !collapsed()&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-close oj-padding-horizontal hoverable&quot;</span> <span class=\"attr\">data-bind</span>=<span class=\"string\">&quot;click: close&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;collapsableContent&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 300px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>The collapsable content is placed in a seperate div <code>#collapsableContent</code>. I have used knockout punches to bind <code>val</code> observable to the content of h1 tag inside collapsible content. How this is collapsed is discussed in the next section.</p>\n<h2 id=\"The-View-Model\"><a href=\"#The-View-Model\" class=\"headerlink\" title=\"The View Model\"></a>The View Model</h2><p>View model is pretty simple. It has two observables, one is <code>val</code> whose content are bound to h1. This observable is not mandatory. The other observable is <code>collapsed</code>. This is quite important. Especially for switching minimise and maximise icons. This is either true of false. Upon calling <code>collapse</code> event handler, the value will be flipped.</p>\n<figure class=\"highlight js\"><figcaption><span>View Model</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">&#x27;ojs/ojcore&#x27;</span>, <span class=\"string\">&#x27;knockout&#x27;</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">oj, ko</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">panelWithIconsContentViewModel</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"built_in\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.val = <span class=\"string\">&quot;I&#x27;m going to be collapsed, I have some text...&quot;</span>;</span><br><span class=\"line\">    self.collapsed = ko.observable(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    self.collapse = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">collapse</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">      $(<span class=\"string\">&quot;#collapsableContent&quot;</span>).slideToggle();</span><br><span class=\"line\">      self.collapsed(!self.collapsed());</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.close = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">collapse</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">      $(<span class=\"string\">&quot;#panel&quot;</span>).remove();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> panelWithIconsContentViewModel;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<p><code>self.collapse</code> is a function that gets triggered upon clicking min or max function. jQuery’s slideToggle function is used to slide the <code>collapsableContent</code> in and out of view giving an impression of minimize.</p>\n<p>The other function is <code>self.close</code> which is bound to click handler of close icon. This simply removes the entire panel by using jQuery’s remove method. You may want to do something more by showing a dialog asking whether user really wants to close or not, I chose to simply close it.</p>\n<p>I didn’t include other configuration information that is required for oraclejet and other libraries in the above code snippet. Please refer the codepen’s javascript resources given for configuration related code. However, if you are creating a seperate viewModel for the panel alone, no other code is necessary.</p>\n<p data-height=\"350\" data-theme-id=\"0\" data-slug-hash=\"PzGZMW\" data-default-tab=\"html\" data-user=\"jbuddha\" data-embed-version=\"2\" class=\"codepen\">See the Pen <span class=\"exturl\" data-url=\"aHR0cDovL2NvZGVwZW4uaW8vamJ1ZGRoYS9wZW4vUHpHWk1XLw==\">Collapsible and Expandable Panels<i class=\"fa fa-external-link-alt\"></i></span> by Buddha (<span class=\"exturl\" data-url=\"aHR0cDovL2NvZGVwZW4uaW8vamJ1ZGRoYQ==\">@jbuddha<i class=\"fa fa-external-link-alt\"></i></span>) on <span class=\"exturl\" data-url=\"aHR0cDovL2NvZGVwZW4uaW8=\">CodePen<i class=\"fa fa-external-link-alt\"></i></span>.</p><script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n\n<hr>\n<p>If you are interested in non technical reading: <span class=\"exturl\" data-url=\"aHR0cHM6Ly91bmZ1cmxlZHBhZ2VzLndvcmRwcmVzcy5jb20vMjAxNi8wNi8wMS9hbi1lc2NhcGUtb3ItYS1wb3NzaWJpbHR5Lw==\">An escape or a possibility?<i class=\"fa fa-external-link-alt\"></i></span></p>\n","site":{"data":{"head":""}},"excerpt":"<p>Before we begin, let me show you the final output we are going to get. Click Run Pen button if you want to see the collapsible panel in action</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"PzGZMW\" data-default-tab=\"result\" data-user=\"jbuddha\" data-embed-version=\"2\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/jbuddha/pen/PzGZMW/\">Collapsible and Expandable Panels</a> by Buddha (<a href=\"http://codepen.io/jbuddha\">@jbuddha</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n<p>The panel can be minimized or maximized by clicking on the arrow button. It can also be removed completely by clicking close button. How do we achieve this? I have used KnockoutJS, OracleJET and jQuery to achieve the result. RequireJS is also used but only to get the required libraries from CDN. However, OracleJet is predomantly is used for styling alone. Rest of the bindings can be achieved by regular KnockoutJS and jQuery. Read forward to learn how to get the above result.</p>","more":"<p>If you are not familiar with RequireJS and OracleJet, some of the things are bit tricky at first, hence basic knowledge on this is expected.</p>\n<h2 id=\"The-View\"><a href=\"#The-View\" class=\"headerlink\" title=\"The View\"></a>The View</h2><p>View mainly consists of Two elements. One is title bar and another is collapsible div. We can use font-awesome to get the icons.</p>\n<h3 id=\"Title-bar\"><a href=\"#Title-bar\" class=\"headerlink\" title=\"Title bar\"></a>Title bar</h3><p>Title bar itself presents several problems. How can we push the icons to the right. We can achieve this very easily by seperating the title bar into 3 parts. The Title text, The icons, and the gap. We can very easily fix the icons and title text at their respective ends by making the gap a flex item that grows where as the other two remain fixed.</p>\n<p>Oracle Jet provides Flex Bar for this kind of purposes. We can make a div a flex bar by applying <code>.oj-flex-bar</code> class. For the children, we have to use <code>.oj-flex-bar-start</code> and <code>.oj-flex-bar-end</code> classes for title text and icons div. However, we have to keep an empty div and give it <code>.oj-flex-item</code> class so that it grows or shrinks automatically when ever the title bar changes its size. This will ensure that icons stay at the end of title bar. Lines 3, 4 &amp; 5 demonstrate the usage of these classes.</p>\n<p>For icons, <code>fa-chevron-circle-down</code> and <code>fa-chevron-circle-up</code> from font-awesome library are used depending on state of the panel. No need to have two different icons as only one of them is used all the time. So, these classes are conditionally added to html based on collapsed state. Used regualar knockout css binding. Observe lines 4 and 5 in the following snippet. <code>collapsed</code> is an observable. When collapsed is true, down icon class is used for the <code>i</code> tag and when it is false, the down class will be removed. Same thing happens for the up icon but in reverse. Lines 7 &amp; 8 demonstrate the conditional css binding. All other classes <code>fa oj-margin-start oj-padding-horizontal hoverable</code> are constant, hence directly set to <code>class</code> attribute of icon tag. <code>fa-times</code> works well for close button. Both these icons’ click events are bound to functions. Close icon is bound to close funtion and min-max button button’s click handler is collapse. We shall discuss these further in the view model section. The entire title bar is placed in a div whose id is header.</p>\n<figure class=\"highlight html\"><figcaption><span>Min-Max Icon binding</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;panel&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;oj-margin&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;border: 1px solid&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;header&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;oj-flex oj-panel oj-flex-bar&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;oj-flex-start&quot;</span> &gt;</span>This is the title<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;oj-flex-item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;oj-flex-end oj-panel-alt1 oj-margin-start&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;min-max-icon&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa oj-margin-start oj-padding-horizontal hoverable&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">data-bind</span>=<span class=\"string\">&quot;click: collapse,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                     css: &#123;&#x27;fa-chevron-circle-down&#x27;: collapsed(),</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                           &#x27;fa-chevron-circle-up&#x27;:  !collapsed()&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-close oj-padding-horizontal hoverable&quot;</span> <span class=\"attr\">data-bind</span>=<span class=\"string\">&quot;click: close&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;collapsableContent&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 300px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>The collapsable content is placed in a seperate div <code>#collapsableContent</code>. I have used knockout punches to bind <code>val</code> observable to the content of h1 tag inside collapsible content. How this is collapsed is discussed in the next section.</p>\n<h2 id=\"The-View-Model\"><a href=\"#The-View-Model\" class=\"headerlink\" title=\"The View Model\"></a>The View Model</h2><p>View model is pretty simple. It has two observables, one is <code>val</code> whose content are bound to h1. This observable is not mandatory. The other observable is <code>collapsed</code>. This is quite important. Especially for switching minimise and maximise icons. This is either true of false. Upon calling <code>collapse</code> event handler, the value will be flipped.</p>\n<figure class=\"highlight js\"><figcaption><span>View Model</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">&#x27;ojs/ojcore&#x27;</span>, <span class=\"string\">&#x27;knockout&#x27;</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">oj, ko</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">panelWithIconsContentViewModel</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"built_in\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.val = <span class=\"string\">&quot;I&#x27;m going to be collapsed, I have some text...&quot;</span>;</span><br><span class=\"line\">    self.collapsed = ko.observable(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    self.collapse = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">collapse</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">      $(<span class=\"string\">&quot;#collapsableContent&quot;</span>).slideToggle();</span><br><span class=\"line\">      self.collapsed(!self.collapsed());</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.close = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">collapse</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">      $(<span class=\"string\">&quot;#panel&quot;</span>).remove();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> panelWithIconsContentViewModel;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<p><code>self.collapse</code> is a function that gets triggered upon clicking min or max function. jQuery’s slideToggle function is used to slide the <code>collapsableContent</code> in and out of view giving an impression of minimize.</p>\n<p>The other function is <code>self.close</code> which is bound to click handler of close icon. This simply removes the entire panel by using jQuery’s remove method. You may want to do something more by showing a dialog asking whether user really wants to close or not, I chose to simply close it.</p>\n<p>I didn’t include other configuration information that is required for oraclejet and other libraries in the above code snippet. Please refer the codepen’s javascript resources given for configuration related code. However, if you are creating a seperate viewModel for the panel alone, no other code is necessary.</p>\n<p data-height=\"350\" data-theme-id=\"0\" data-slug-hash=\"PzGZMW\" data-default-tab=\"html\" data-user=\"jbuddha\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/jbuddha/pen/PzGZMW/\">Collapsible and Expandable Panels</a> by Buddha (<a href=\"http://codepen.io/jbuddha\">@jbuddha</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n\n<hr>\n<p>If you are interested in non technical reading: <a href=\"https://unfurledpages.wordpress.com/2016/06/01/an-escape-or-a-possibilty/\">An escape or a possibility?</a></p>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Fri Jun 10 2016 11:30:00 GMT-0700 (Pacific Daylight Time)","title":"Collapsible panel using OJet & jQuery","path":"2016/06/collapsible-panel-in-oracle-jet/","eyeCatchImage":null,"excerpt":"If you have ever wanted to develop a div/panel that can be minimized or maximized and close by clicking on respective icons, this article shows you how to do it.","date":{"_isAMomentObject":true,"_i":"2016-06-10T18:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2016-06-10T18:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["oraclejet","javascript","html","knockoutjs","jquery","css"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"A Great Tool for Datastructure Algorithm Visualisation","date":"2016-07-21T18:30:00.000Z","author":"Buddha","description":"This is a short introductory post to let you guys know about an excellent tool for datastructures and algorithms visualisation recently.","_content":"\nThere have been many times, we get doubts about how a certain algorithms work. There is no better way than being able to visualise that algorithm. For example check this page where you can see how each sort works on same array input. I used to embed their webpage but now they have blocked cross site embedding, hence you need to go their page to see the animation.\n\nhttps://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html\n\nOpen the URL and click on the algorithm so that you can visualise how each algorithm sorts.\n\nThese are created by David Galles, an Associate Professor of department of Computer Science University of San Francisco.\n\nYou will be able to see lot more visualizations by going to this page.\n\nhttps://www.cs.usfca.edu/~galles/visualization/Algorithms.html\n\n----\n\n","source":"_posts/2016/07/nice-tool-for-algorithm-and-datastructure-visualisation.md","raw":"---\ntitle: A Great Tool for Datastructure Algorithm Visualisation\ndate: 2016-07-22\ntags: ['information', 'data-structures']\nauthor: Buddha\ndescription: This is a short introductory post to let you guys know about an excellent tool for datastructures and algorithms visualisation recently.\n---\n\nThere have been many times, we get doubts about how a certain algorithms work. There is no better way than being able to visualise that algorithm. For example check this page where you can see how each sort works on same array input. I used to embed their webpage but now they have blocked cross site embedding, hence you need to go their page to see the animation.\n\nhttps://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html\n\nOpen the URL and click on the algorithm so that you can visualise how each algorithm sorts.\n\nThese are created by David Galles, an Associate Professor of department of Computer Science University of San Francisco.\n\nYou will be able to see lot more visualizations by going to this page.\n\nhttps://www.cs.usfca.edu/~galles/visualization/Algorithms.html\n\n----\n\n","slug":"2016/07/nice-tool-for-algorithm-and-datastructure-visualisation","published":1,"updated":"2016-07-21T18:30:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckki0ed2x000enbs61dyx43a7","content":"<p>There have been many times, we get doubts about how a certain algorithms work. There is no better way than being able to visualise that algorithm. For example check this page where you can see how each sort works on same array input. I used to embed their webpage but now they have blocked cross site embedding, hence you need to go their page to see the animation.</p>\n<p><a href=\"https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html\">https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html</a></p>\n<p>Open the URL and click on the algorithm so that you can visualise how each algorithm sorts.</p>\n<p>These are created by David Galles, an Associate Professor of department of Computer Science University of San Francisco.</p>\n<p>You will be able to see lot more visualizations by going to this page.</p>\n<p><a href=\"https://www.cs.usfca.edu/~galles/visualization/Algorithms.html\">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p>There have been many times, we get doubts about how a certain algorithms work. There is no better way than being able to visualise that algorithm. For example check this page where you can see how each sort works on same array input. I used to embed their webpage but now they have blocked cross site embedding, hence you need to go their page to see the animation.</p>\n<p><a href=\"https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html\">https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html</a></p>\n<p>Open the URL and click on the algorithm so that you can visualise how each algorithm sorts.</p>\n<p>These are created by David Galles, an Associate Professor of department of Computer Science University of San Francisco.</p>\n<p>You will be able to see lot more visualizations by going to this page.</p>\n<p><a href=\"https://www.cs.usfca.edu/~galles/visualization/Algorithms.html\">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></p>\n<hr>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Jul 21 2016 11:30:00 GMT-0700 (Pacific Daylight Time)","title":"A Great Tool for Datastructure Algorithm Visualisation","path":"2016/07/nice-tool-for-algorithm-and-datastructure-visualisation/","eyeCatchImage":null,"excerpt":"This is a short introductory post to let you guys know about an excellent tool for datastructures and algorithms visualisation recently.","date":{"_isAMomentObject":true,"_i":"2016-07-21T18:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2016-07-21T18:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["data-structures","information"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Right View of Binary Tree without Recursion","date":"2016-07-21T18:30:00.000Z","author":"Buddha","description":"This article shows you how to print right view of a binary tree, which using recursion.","_content":"\n<img src=\"/blog/assets/svgs/2016/right-view-of-binarytree.svg\" alt=\"Right view of a binary tree\"/>\n\nImagine you have a binary tree and wants to get all the nodes that will be visible when seen from the right side of the tree. How do you print all such nodes? Final output for this tree should be 44, 51, 65, 26. In other words, the first nodes we touch upon if we draw horizontal lines from right side of the tree. Read on to find the solution.\n\n <!-- more -->\n\n## The Solution\n\nQuicktip, whenever we try to do something without using recursion, you need to use some auxiliary datastructure like Queue or Stack. To solve this problem, we use a queue.\n\nTo solve this problem, we use a mechanism similar to {% post_link 2016/05/non-recursive-breadth-first-traversal-binary-tree Breadth First Traversal %}.\n\nWe start with pushing the root node and a null node into queue, to indicate first level is complete. We begin iterating until queue becomes empty. In every iteration, we dequeue a node, if it is not null node, we enqueue its children to the end of queue. We keep adding until children of all the nodes are added to queue.\n\nIf we encounter a null node, it means we reached end of the current level. We need to print the node dequeued before this node. To acheive this, we keep checking if next node in the queue is a null node by using `peek` method. As soon as the peek method returns null, it means this is the last node in the current level, we have to print it. If we get a null node, we have to check if there are more nodes to be dequeued, if there are no more nodes, we have reached end of the binary tree, otherwise, we just reached end of current level and more nodes are present in the queue. Find the program below written in java.\n\n{% codeblock Program to print Right View of A Binary Tree lang:java %}\npublic void rightView(Node root) {\n    Queue<Node> queue = new Queue<>();\n    if(root != null) {\n        queue.enqueue(root);\n        queue.enqueue(null);  // first level is over\n    }\n\n    while (!queue.isEmpty()) {\n        Node temp = queue.dequeue();\n        if(temp == null) {\n            if(queue.getSize() > 0)\n                queue.enqueue(null);   // current level is over\n            continue;\n        }\n\n        if(queue.peek() == null)      // next node is null means end of current level, so print it.\n            System.out.println(temp.data);\n        if(temp.left != null)\n            queue.enqueue(temp.left);\n        if(temp.right != null)\n            queue.enqueue(temp.right);\n    }\n}\n{% endcodeblock %}\n\nWhat do you think of this solution? Can you think of a simpler solution? Let me know in the comments.\n\n---\nSVG for BinaryTree diagram is generated by using [Binary Tree Visualizer](http://btv.melezinek.cz/binary-search-tree.html)\n","source":"_posts/2016/07/right-view-of-binarytree-without-recursion.md","raw":"---\ntitle: Right View of Binary Tree without Recursion\ndate: 2016-07-22\ntags: ['java', 'algorithms', 'data-structures', 'problem', 'interview-question', 'binary-tree']\nauthor: Buddha\ndescription: This article shows you how to print right view of a binary tree, which using recursion.\n---\n\n<img src=\"/blog/assets/svgs/2016/right-view-of-binarytree.svg\" alt=\"Right view of a binary tree\"/>\n\nImagine you have a binary tree and wants to get all the nodes that will be visible when seen from the right side of the tree. How do you print all such nodes? Final output for this tree should be 44, 51, 65, 26. In other words, the first nodes we touch upon if we draw horizontal lines from right side of the tree. Read on to find the solution.\n\n <!-- more -->\n\n## The Solution\n\nQuicktip, whenever we try to do something without using recursion, you need to use some auxiliary datastructure like Queue or Stack. To solve this problem, we use a queue.\n\nTo solve this problem, we use a mechanism similar to {% post_link 2016/05/non-recursive-breadth-first-traversal-binary-tree Breadth First Traversal %}.\n\nWe start with pushing the root node and a null node into queue, to indicate first level is complete. We begin iterating until queue becomes empty. In every iteration, we dequeue a node, if it is not null node, we enqueue its children to the end of queue. We keep adding until children of all the nodes are added to queue.\n\nIf we encounter a null node, it means we reached end of the current level. We need to print the node dequeued before this node. To acheive this, we keep checking if next node in the queue is a null node by using `peek` method. As soon as the peek method returns null, it means this is the last node in the current level, we have to print it. If we get a null node, we have to check if there are more nodes to be dequeued, if there are no more nodes, we have reached end of the binary tree, otherwise, we just reached end of current level and more nodes are present in the queue. Find the program below written in java.\n\n{% codeblock Program to print Right View of A Binary Tree lang:java %}\npublic void rightView(Node root) {\n    Queue<Node> queue = new Queue<>();\n    if(root != null) {\n        queue.enqueue(root);\n        queue.enqueue(null);  // first level is over\n    }\n\n    while (!queue.isEmpty()) {\n        Node temp = queue.dequeue();\n        if(temp == null) {\n            if(queue.getSize() > 0)\n                queue.enqueue(null);   // current level is over\n            continue;\n        }\n\n        if(queue.peek() == null)      // next node is null means end of current level, so print it.\n            System.out.println(temp.data);\n        if(temp.left != null)\n            queue.enqueue(temp.left);\n        if(temp.right != null)\n            queue.enqueue(temp.right);\n    }\n}\n{% endcodeblock %}\n\nWhat do you think of this solution? Can you think of a simpler solution? Let me know in the comments.\n\n---\nSVG for BinaryTree diagram is generated by using [Binary Tree Visualizer](http://btv.melezinek.cz/binary-search-tree.html)\n","slug":"2016/07/right-view-of-binarytree-without-recursion","published":1,"updated":"2016-07-21T18:30:00.000Z","_id":"ckki0ed2y000gnbs631489jjo","comments":1,"layout":"post","photos":[],"link":"","content":"<img data-src=\"/blog/assets/svgs/2016/right-view-of-binarytree.svg\" alt=\"Right view of a binary tree\"/>\n\n<p>Imagine you have a binary tree and wants to get all the nodes that will be visible when seen from the right side of the tree. How do you print all such nodes? Final output for this tree should be 44, 51, 65, 26. In other words, the first nodes we touch upon if we draw horizontal lines from right side of the tree. Read on to find the solution.</p>\n <a id=\"more\"></a>\n\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>Quicktip, whenever we try to do something without using recursion, you need to use some auxiliary datastructure like Queue or Stack. To solve this problem, we use a queue.</p>\n<p>To solve this problem, we use a mechanism similar to <a href=\"/blog/2016/05/non-recursive-breadth-first-traversal-binary-tree/\" title=\"Breadth First Traversal\">Breadth First Traversal</a>.</p>\n<p>We start with pushing the root node and a null node into queue, to indicate first level is complete. We begin iterating until queue becomes empty. In every iteration, we dequeue a node, if it is not null node, we enqueue its children to the end of queue. We keep adding until children of all the nodes are added to queue.</p>\n<p>If we encounter a null node, it means we reached end of the current level. We need to print the node dequeued before this node. To acheive this, we keep checking if next node in the queue is a null node by using <code>peek</code> method. As soon as the peek method returns null, it means this is the last node in the current level, we have to print it. If we get a null node, we have to check if there are more nodes to be dequeued, if there are no more nodes, we have reached end of the binary tree, otherwise, we just reached end of current level and more nodes are present in the queue. Find the program below written in java.</p>\n<figure class=\"highlight java\"><figcaption><span>Program to print Right View of A Binary Tree</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rightView</span><span class=\"params\">(Node root)</span> </span>&#123;</span><br><span class=\"line\">    Queue&lt;Node&gt; queue = <span class=\"keyword\">new</span> Queue&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        queue.enqueue(root);</span><br><span class=\"line\">        queue.enqueue(<span class=\"keyword\">null</span>);  <span class=\"comment\">// first level is over</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        Node temp = queue.dequeue();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(queue.getSize() &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                queue.enqueue(<span class=\"keyword\">null</span>);   <span class=\"comment\">// current level is over</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(queue.peek() == <span class=\"keyword\">null</span>)      <span class=\"comment\">// next node is null means end of current level, so print it.</span></span><br><span class=\"line\">            System.out.println(temp.data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp.left != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            queue.enqueue(temp.left);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp.right != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            queue.enqueue(temp.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>What do you think of this solution? Can you think of a simpler solution? Let me know in the comments.</p>\n<hr>\n<p>SVG for BinaryTree diagram is generated by using <span class=\"exturl\" data-url=\"aHR0cDovL2J0di5tZWxlemluZWsuY3ovYmluYXJ5LXNlYXJjaC10cmVlLmh0bWw=\">Binary Tree Visualizer<i class=\"fa fa-external-link-alt\"></i></span></p>\n","site":{"data":{"head":""}},"excerpt":"<img src=\"/blog/assets/svgs/2016/right-view-of-binarytree.svg\" alt=\"Right view of a binary tree\"/>\n\n<p>Imagine you have a binary tree and wants to get all the nodes that will be visible when seen from the right side of the tree. How do you print all such nodes? Final output for this tree should be 44, 51, 65, 26. In other words, the first nodes we touch upon if we draw horizontal lines from right side of the tree. Read on to find the solution.</p>","more":"<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>Quicktip, whenever we try to do something without using recursion, you need to use some auxiliary datastructure like Queue or Stack. To solve this problem, we use a queue.</p>\n<p>To solve this problem, we use a mechanism similar to <a href=\"/blog/2016/05/non-recursive-breadth-first-traversal-binary-tree/\" title=\"Breadth First Traversal\">Breadth First Traversal</a>.</p>\n<p>We start with pushing the root node and a null node into queue, to indicate first level is complete. We begin iterating until queue becomes empty. In every iteration, we dequeue a node, if it is not null node, we enqueue its children to the end of queue. We keep adding until children of all the nodes are added to queue.</p>\n<p>If we encounter a null node, it means we reached end of the current level. We need to print the node dequeued before this node. To acheive this, we keep checking if next node in the queue is a null node by using <code>peek</code> method. As soon as the peek method returns null, it means this is the last node in the current level, we have to print it. If we get a null node, we have to check if there are more nodes to be dequeued, if there are no more nodes, we have reached end of the binary tree, otherwise, we just reached end of current level and more nodes are present in the queue. Find the program below written in java.</p>\n<figure class=\"highlight java\"><figcaption><span>Program to print Right View of A Binary Tree</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rightView</span><span class=\"params\">(Node root)</span> </span>&#123;</span><br><span class=\"line\">    Queue&lt;Node&gt; queue = <span class=\"keyword\">new</span> Queue&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        queue.enqueue(root);</span><br><span class=\"line\">        queue.enqueue(<span class=\"keyword\">null</span>);  <span class=\"comment\">// first level is over</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        Node temp = queue.dequeue();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(queue.getSize() &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                queue.enqueue(<span class=\"keyword\">null</span>);   <span class=\"comment\">// current level is over</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(queue.peek() == <span class=\"keyword\">null</span>)      <span class=\"comment\">// next node is null means end of current level, so print it.</span></span><br><span class=\"line\">            System.out.println(temp.data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp.left != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            queue.enqueue(temp.left);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp.right != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            queue.enqueue(temp.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>What do you think of this solution? Can you think of a simpler solution? Let me know in the comments.</p>\n<hr>\n<p>SVG for BinaryTree diagram is generated by using <a href=\"http://btv.melezinek.cz/binary-search-tree.html\">Binary Tree Visualizer</a></p>","popularPost_tmp_postPath":true,"eyeCatchImage":"/blog/assets/svgs/2016/right-view-of-binarytree.svg","popularPost_tmp_gaData":{"updated":"Thu Jul 21 2016 11:30:00 GMT-0700 (Pacific Daylight Time)","title":"Right View of Binary Tree without Recursion","path":"2016/07/right-view-of-binarytree-without-recursion/","eyeCatchImage":"/blog/assets/svgs/2016/right-view-of-binarytree.svg","excerpt":"This article shows you how to print right view of a binary tree, which using recursion.","date":{"_isAMomentObject":true,"_i":"2016-07-21T18:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2016-07-21T18:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["java","algorithms","data-structures","problem","interview-question","binary-tree"],"internalLinks":["blog/2016/05/non-recursive-breadth-first-traversal-binary-tree/"],"keywords":[],"keywordsLength":0}},{"title":"Creating Alexa Skill using Java and AWS Lambda","date":"2018-04-18T18:30:00.000Z","author":"Buddha","description":"This article shows you how to create your own alexa skill using Java and AWS Lambda","_content":"\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/140760885@N04/41511389842/in/dateposted/\" title=\"Alexa Devices\"><img src=\"https://farm1.staticflickr.com/924/41511389842_a9cda86d32_b.jpg\" width=\"800\" height=\"600\" alt=\"alexa\"></a><script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script>\n\n## The Goal\n\nGone are the days where we build applications and just think about graphical user interfaces, look and feel etc., There is a new interface that is gaining popularity. As Amazon, Google and Apple are bringing in voice assistants, it has become extremely important for us to learn how to build voice-activated applications. Voice based commands are much more complex than a GUI, user actions on our application are limited to button clicks, combo box selections, typing in text fields comprise of the majority of instructions. With touchscreen, we can see some more actions users can perform like swipe, pinch, zoom, rotate etc., However, with voice a single user may ask our application to do specific tasks in wide variety of ways, to increase the complexity even further different people may use and each have their own way of speaking. Alexa provides a simple framework to build these skills. In this article I will show you how you can build your own Alexa Skills.\n\n<!-- more -->\n\n## The Solution\n\nIn-Progress... You can refer to the [source code](https://github.com/jbuddha/remembral-alexa-skill-lambda) meanwhile.\n\n<iframe src=\"//www.slideshare.net/slideshow/embed_code/key/294rrSNM1OMEYj\" width=\"595\" height=\"485\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"//www.slideshare.net/BuddhaJyothiprasad/developing-alexa-skill-using-java-with-aws-lambda\" title=\"Developing alexa Skill using Java With AWS Lambda\" target=\"_blank\">Developing alexa Skill using Java With AWS Lambda</a> </strong> from <strong><a href=\"//www.slideshare.net/BuddhaJyothiprasad\" target=\"_blank\">Buddha Jyothiprasad</a></strong> </div>\n\n---\n","source":"_posts/2018/04/creating-alexa-skill-with-java-aws-lambda.md","raw":"---\ntitle: Creating Alexa Skill using Java and AWS Lambda\ndate: 2018-04-19\ntags: ['java', 'alexa','aws', 'dynamodb','ask']\nauthor: Buddha\ndescription: This article shows you how to create your own alexa skill using Java and AWS Lambda\n---\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/140760885@N04/41511389842/in/dateposted/\" title=\"Alexa Devices\"><img src=\"https://farm1.staticflickr.com/924/41511389842_a9cda86d32_b.jpg\" width=\"800\" height=\"600\" alt=\"alexa\"></a><script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script>\n\n## The Goal\n\nGone are the days where we build applications and just think about graphical user interfaces, look and feel etc., There is a new interface that is gaining popularity. As Amazon, Google and Apple are bringing in voice assistants, it has become extremely important for us to learn how to build voice-activated applications. Voice based commands are much more complex than a GUI, user actions on our application are limited to button clicks, combo box selections, typing in text fields comprise of the majority of instructions. With touchscreen, we can see some more actions users can perform like swipe, pinch, zoom, rotate etc., However, with voice a single user may ask our application to do specific tasks in wide variety of ways, to increase the complexity even further different people may use and each have their own way of speaking. Alexa provides a simple framework to build these skills. In this article I will show you how you can build your own Alexa Skills.\n\n<!-- more -->\n\n## The Solution\n\nIn-Progress... You can refer to the [source code](https://github.com/jbuddha/remembral-alexa-skill-lambda) meanwhile.\n\n<iframe src=\"//www.slideshare.net/slideshow/embed_code/key/294rrSNM1OMEYj\" width=\"595\" height=\"485\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"//www.slideshare.net/BuddhaJyothiprasad/developing-alexa-skill-using-java-with-aws-lambda\" title=\"Developing alexa Skill using Java With AWS Lambda\" target=\"_blank\">Developing alexa Skill using Java With AWS Lambda</a> </strong> from <strong><a href=\"//www.slideshare.net/BuddhaJyothiprasad\" target=\"_blank\">Buddha Jyothiprasad</a></strong> </div>\n\n---\n","slug":"2018/04/creating-alexa-skill-with-java-aws-lambda","published":1,"updated":"2018-04-18T18:30:00.000Z","_id":"ckki0ed2z000hnbs6h4phds6q","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/140760885@N04/41511389842/in/dateposted/\" title=\"Alexa Devices\"><img data-src=\"https://farm1.staticflickr.com/924/41511389842_a9cda86d32_b.jpg\" width=\"800\" height=\"600\" alt=\"alexa\"></a><script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script></p>\n<h2 id=\"The-Goal\"><a href=\"#The-Goal\" class=\"headerlink\" title=\"The Goal\"></a>The Goal</h2><p>Gone are the days where we build applications and just think about graphical user interfaces, look and feel etc., There is a new interface that is gaining popularity. As Amazon, Google and Apple are bringing in voice assistants, it has become extremely important for us to learn how to build voice-activated applications. Voice based commands are much more complex than a GUI, user actions on our application are limited to button clicks, combo box selections, typing in text fields comprise of the majority of instructions. With touchscreen, we can see some more actions users can perform like swipe, pinch, zoom, rotate etc., However, with voice a single user may ask our application to do specific tasks in wide variety of ways, to increase the complexity even further different people may use and each have their own way of speaking. Alexa provides a simple framework to build these skills. In this article I will show you how you can build your own Alexa Skills.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>In-Progress… You can refer to the <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2pidWRkaGEvcmVtZW1icmFsLWFsZXhhLXNraWxsLWxhbWJkYQ==\">source code<i class=\"fa fa-external-link-alt\"></i></span> meanwhile.</p>\n<iframe src=\"//www.slideshare.net/slideshow/embed_code/key/294rrSNM1OMEYj\" width=\"595\" height=\"485\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"//www.slideshare.net/BuddhaJyothiprasad/developing-alexa-skill-using-java-with-aws-lambda\" title=\"Developing alexa Skill using Java With AWS Lambda\" target=\"_blank\">Developing alexa Skill using Java With AWS Lambda</a> </strong> from <strong><a href=\"//www.slideshare.net/BuddhaJyothiprasad\" target=\"_blank\">Buddha Jyothiprasad</a></strong> </div>\n\n<hr>\n","site":{"data":{"head":""}},"excerpt":"<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/140760885@N04/41511389842/in/dateposted/\" title=\"Alexa Devices\"><img src=\"https://farm1.staticflickr.com/924/41511389842_a9cda86d32_b.jpg\" width=\"800\" height=\"600\" alt=\"alexa\"></a><script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script></p>\n<h2 id=\"The-Goal\"><a href=\"#The-Goal\" class=\"headerlink\" title=\"The Goal\"></a>The Goal</h2><p>Gone are the days where we build applications and just think about graphical user interfaces, look and feel etc., There is a new interface that is gaining popularity. As Amazon, Google and Apple are bringing in voice assistants, it has become extremely important for us to learn how to build voice-activated applications. Voice based commands are much more complex than a GUI, user actions on our application are limited to button clicks, combo box selections, typing in text fields comprise of the majority of instructions. With touchscreen, we can see some more actions users can perform like swipe, pinch, zoom, rotate etc., However, with voice a single user may ask our application to do specific tasks in wide variety of ways, to increase the complexity even further different people may use and each have their own way of speaking. Alexa provides a simple framework to build these skills. In this article I will show you how you can build your own Alexa Skills.</p>","more":"<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>In-Progress… You can refer to the <a href=\"https://github.com/jbuddha/remembral-alexa-skill-lambda\">source code</a> meanwhile.</p>\n<iframe src=\"//www.slideshare.net/slideshow/embed_code/key/294rrSNM1OMEYj\" width=\"595\" height=\"485\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"//www.slideshare.net/BuddhaJyothiprasad/developing-alexa-skill-using-java-with-aws-lambda\" title=\"Developing alexa Skill using Java With AWS Lambda\" target=\"_blank\">Developing alexa Skill using Java With AWS Lambda</a> </strong> from <strong><a href=\"//www.slideshare.net/BuddhaJyothiprasad\" target=\"_blank\">Buddha Jyothiprasad</a></strong> </div>\n\n<hr>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://farm1.staticflickr.com/924/41511389842_a9cda86d32_b.jpg","popularPost_tmp_gaData":{"updated":"Wed Apr 18 2018 11:30:00 GMT-0700 (Pacific Daylight Time)","title":"Creating Alexa Skill using Java and AWS Lambda","path":"2018/04/creating-alexa-skill-with-java-aws-lambda/","eyeCatchImage":"https://farm1.staticflickr.com/924/41511389842_a9cda86d32_b.jpg","excerpt":"This article shows you how to create your own alexa skill using Java and AWS Lambda","date":{"_isAMomentObject":true,"_i":"2018-04-18T18:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2018-04-18T18:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["java","alexa","aws","dynamodb","ask"],"internalLinks":["/www.slideshare.net/BuddhaJyothiprasad/developing-alexa-skill-using-java-with-aws-lambda","/www.slideshare.net/BuddhaJyothiprasad"],"keywords":[],"keywordsLength":0}},{"title":"A Definitive Guide to AWS Application Integration","date":"2020-05-08T18:30:00.000Z","author":"Reshma Beesetty","description":"A new book we published on AWS Application Integration that helps you learn the basics and beyond.","_content":"\nLast year has been a roller coaster ride for me. Adjusting to the new team, new technologies, new country, moving across continents and many more stressful scenarios. However something good came of 2019 by end of it. We have published our book, The Definitive Guide to AWS Application Integration. You can buy it from amazon any many more stores.\n<div class=\"center-children\">\n\t<iframe type=\"text/html\" width=\"336\" height=\"550\" frameborder=\"0\" allowfullscreen style=\"max-width:100%\" src=\"https://read.amazon.com/kp/card?asin=B08313LNGQ&preview=inline&linkCode=kpe&ref_=cm_sw_r_kb_dp_RQXTEbZMG9CNT&tag=controlspac0c-20\" ></iframe>\n</div>\n\n\n---\n","source":"_posts/2020/05/a-definitive-guide-to-aws-application-integration.md","raw":"---\ntitle: A Definitive Guide to AWS Application Integration\ndate: 2020-05-09\ntags: ['aws', 'book','published', 'apress', 'amazon', 'sqs','sns', 'swf', 'step-functions']\nauthor: Reshma Beesetty\ndescription: A new book we published on AWS Application Integration that helps you learn the basics and beyond.\n---\n\nLast year has been a roller coaster ride for me. Adjusting to the new team, new technologies, new country, moving across continents and many more stressful scenarios. However something good came of 2019 by end of it. We have published our book, The Definitive Guide to AWS Application Integration. You can buy it from amazon any many more stores.\n<div class=\"center-children\">\n\t<iframe type=\"text/html\" width=\"336\" height=\"550\" frameborder=\"0\" allowfullscreen style=\"max-width:100%\" src=\"https://read.amazon.com/kp/card?asin=B08313LNGQ&preview=inline&linkCode=kpe&ref_=cm_sw_r_kb_dp_RQXTEbZMG9CNT&tag=controlspac0c-20\" ></iframe>\n</div>\n\n\n---\n","slug":"2020/05/a-definitive-guide-to-aws-application-integration","published":1,"updated":"2020-05-08T18:30:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckki0ed2z000jnbs6grrp19r9","content":"<p>Last year has been a roller coaster ride for me. Adjusting to the new team, new technologies, new country, moving across continents and many more stressful scenarios. However something good came of 2019 by end of it. We have published our book, The Definitive Guide to AWS Application Integration. You can buy it from amazon any many more stores.</p>\n<div class=\"center-children\">\n    <iframe type=\"text/html\" width=\"336\" height=\"550\" frameborder=\"0\" allowfullscreen style=\"max-width:100%\" src=\"https://read.amazon.com/kp/card?asin=B08313LNGQ&preview=inline&linkCode=kpe&ref_=cm_sw_r_kb_dp_RQXTEbZMG9CNT&tag=controlspac0c-20\" ></iframe>\n</div>\n\n\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p>Last year has been a roller coaster ride for me. Adjusting to the new team, new technologies, new country, moving across continents and many more stressful scenarios. However something good came of 2019 by end of it. We have published our book, The Definitive Guide to AWS Application Integration. You can buy it from amazon any many more stores.</p>\n<div class=\"center-children\">\n    <iframe type=\"text/html\" width=\"336\" height=\"550\" frameborder=\"0\" allowfullscreen style=\"max-width:100%\" src=\"https://read.amazon.com/kp/card?asin=B08313LNGQ&preview=inline&linkCode=kpe&ref_=cm_sw_r_kb_dp_RQXTEbZMG9CNT&tag=controlspac0c-20\" ></iframe>\n</div>\n\n\n<hr>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Fri May 08 2020 11:30:00 GMT-0700 (Pacific Daylight Time)","title":"A Definitive Guide to AWS Application Integration","path":"2020/05/a-definitive-guide-to-aws-application-integration/","eyeCatchImage":null,"excerpt":"A new book we published on AWS Application Integration that helps you learn the basics and beyond.","date":{"_isAMomentObject":true,"_i":"2020-05-08T18:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-08T18:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["aws","book","published","apress","amazon","sqs","sns","swf","step-functions"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Top View of Binary Tree without Recursion","date":"2016-07-22T18:30:00.000Z","author":"Buddha","description":"This article shows you how to print top view of a binary tree, which using recursion.","_content":"\n<img src=\"/blog/assets/svgs/2016/top-view-of-binarytree.svg\" alt=\"Top view of a binary tree\"/>\n\nIf you have a binary tree and wants to get all the nodes that will be visible when seen from the top of the tree, how do you print all such nodes? Final output for this tree should be 7, 13, 23, 44, 51, 65. A similar problem about printing right view is given in the previous post about {% post_link 2016/07/right-view-of-binarytree-without-recursion Right View of Binary Tree without Recursion %}\n\n<!-- more -->\n\n## The Solution\n\nWe can use a mechanism similar preorder traversal, but the solution is not as straight forward. When we are printing nodes on left subtree, ignoring all right nodes, we will visit each left node starting from root, however we can't print them straight away, as we need to print them in reverse order. Otherwise the output will be 44, 23, 13, 7. So, in order to print them in reverse order, we make use of auxiliary datastructure. Stack is what we need in this case.\n\nWe keep pushing left node onto stack until we reach a leaf node while visiting only the left nodes. Once we reach a leaf node, just pop all elements from the stack and print all of them. Once left subtree is complete, print the root node and continue with right subtree.\n\nRight subtree is much simpler solution, as we have to print the right most nodes in the order we visit them. Begin with root and move to its right node, print the node and continue to its right node. Proceed till the right child becomes null. Find the program below written in java.\n\n{% codeblock Program to print top view of a Binary Tree lang:java %}\npublic void topView(Node root) {\n    Node temp = root.left;\n    Stack<Node> stack = new Stack<>();\n\n    while(temp != null) {\n        stack.push(temp);\n        temp = temp.left;\n    }\n    while (!stack.isEmpty())\n        System.out.println(stack.pop().data);\n\n    System.out.println(root.data);\n    temp = root.right;\n    while (temp != null) {\n        System.out.println(temp.data);\n        temp = temp.right;\n    }\n}\n{% endcodeblock %}\n\nWhat do you think of this solution? Can you think of a simpler solution? Let me know in the comments.\n\n---\nSVG for BinaryTree diagram is generated by using [Binary Tree Visualizer](http://btv.melezinek.cz/binary-search-tree.html)\n","source":"_posts/2016/07/top-view-of-binarytree-without-recursion.md","raw":"---\ntitle: Top View of Binary Tree without Recursion\ndate: 2016-07-23\ntags: ['java', 'algorithms', 'data-structures', 'problem', 'interview-question', 'binary-tree']\nauthor: Buddha\ndescription: This article shows you how to print top view of a binary tree, which using recursion.\n---\n\n<img src=\"/blog/assets/svgs/2016/top-view-of-binarytree.svg\" alt=\"Top view of a binary tree\"/>\n\nIf you have a binary tree and wants to get all the nodes that will be visible when seen from the top of the tree, how do you print all such nodes? Final output for this tree should be 7, 13, 23, 44, 51, 65. A similar problem about printing right view is given in the previous post about {% post_link 2016/07/right-view-of-binarytree-without-recursion Right View of Binary Tree without Recursion %}\n\n<!-- more -->\n\n## The Solution\n\nWe can use a mechanism similar preorder traversal, but the solution is not as straight forward. When we are printing nodes on left subtree, ignoring all right nodes, we will visit each left node starting from root, however we can't print them straight away, as we need to print them in reverse order. Otherwise the output will be 44, 23, 13, 7. So, in order to print them in reverse order, we make use of auxiliary datastructure. Stack is what we need in this case.\n\nWe keep pushing left node onto stack until we reach a leaf node while visiting only the left nodes. Once we reach a leaf node, just pop all elements from the stack and print all of them. Once left subtree is complete, print the root node and continue with right subtree.\n\nRight subtree is much simpler solution, as we have to print the right most nodes in the order we visit them. Begin with root and move to its right node, print the node and continue to its right node. Proceed till the right child becomes null. Find the program below written in java.\n\n{% codeblock Program to print top view of a Binary Tree lang:java %}\npublic void topView(Node root) {\n    Node temp = root.left;\n    Stack<Node> stack = new Stack<>();\n\n    while(temp != null) {\n        stack.push(temp);\n        temp = temp.left;\n    }\n    while (!stack.isEmpty())\n        System.out.println(stack.pop().data);\n\n    System.out.println(root.data);\n    temp = root.right;\n    while (temp != null) {\n        System.out.println(temp.data);\n        temp = temp.right;\n    }\n}\n{% endcodeblock %}\n\nWhat do you think of this solution? Can you think of a simpler solution? Let me know in the comments.\n\n---\nSVG for BinaryTree diagram is generated by using [Binary Tree Visualizer](http://btv.melezinek.cz/binary-search-tree.html)\n","slug":"2016/07/top-view-of-binarytree-without-recursion","published":1,"updated":"2016-07-22T18:30:00.000Z","_id":"ckki0ed30000knbs6dm1v975s","comments":1,"layout":"post","photos":[],"link":"","content":"<img data-src=\"/blog/assets/svgs/2016/top-view-of-binarytree.svg\" alt=\"Top view of a binary tree\"/>\n\n<p>If you have a binary tree and wants to get all the nodes that will be visible when seen from the top of the tree, how do you print all such nodes? Final output for this tree should be 7, 13, 23, 44, 51, 65. A similar problem about printing right view is given in the previous post about <a href=\"/blog/2016/07/right-view-of-binarytree-without-recursion/\" title=\"Right View of Binary Tree without Recursion\">Right View of Binary Tree without Recursion</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>We can use a mechanism similar preorder traversal, but the solution is not as straight forward. When we are printing nodes on left subtree, ignoring all right nodes, we will visit each left node starting from root, however we can’t print them straight away, as we need to print them in reverse order. Otherwise the output will be 44, 23, 13, 7. So, in order to print them in reverse order, we make use of auxiliary datastructure. Stack is what we need in this case.</p>\n<p>We keep pushing left node onto stack until we reach a leaf node while visiting only the left nodes. Once we reach a leaf node, just pop all elements from the stack and print all of them. Once left subtree is complete, print the root node and continue with right subtree.</p>\n<p>Right subtree is much simpler solution, as we have to print the right most nodes in the order we visit them. Begin with root and move to its right node, print the node and continue to its right node. Proceed till the right child becomes null. Find the program below written in java.</p>\n<figure class=\"highlight java\"><figcaption><span>Program to print top view of a Binary Tree</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">topView</span><span class=\"params\">(Node root)</span> </span>&#123;</span><br><span class=\"line\">    Node temp = root.left;</span><br><span class=\"line\">    Stack&lt;Node&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(temp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        stack.push(temp);</span><br><span class=\"line\">        temp = temp.left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!stack.isEmpty())</span><br><span class=\"line\">        System.out.println(stack.pop().data);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(root.data);</span><br><span class=\"line\">    temp = root.right;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (temp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        System.out.println(temp.data);</span><br><span class=\"line\">        temp = temp.right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>What do you think of this solution? Can you think of a simpler solution? Let me know in the comments.</p>\n<hr>\n<p>SVG for BinaryTree diagram is generated by using <span class=\"exturl\" data-url=\"aHR0cDovL2J0di5tZWxlemluZWsuY3ovYmluYXJ5LXNlYXJjaC10cmVlLmh0bWw=\">Binary Tree Visualizer<i class=\"fa fa-external-link-alt\"></i></span></p>\n","site":{"data":{"head":""}},"excerpt":"<img src=\"/blog/assets/svgs/2016/top-view-of-binarytree.svg\" alt=\"Top view of a binary tree\"/>\n\n<p>If you have a binary tree and wants to get all the nodes that will be visible when seen from the top of the tree, how do you print all such nodes? Final output for this tree should be 7, 13, 23, 44, 51, 65. A similar problem about printing right view is given in the previous post about <a href=\"/blog/2016/07/right-view-of-binarytree-without-recursion/\" title=\"Right View of Binary Tree without Recursion\">Right View of Binary Tree without Recursion</a></p>","more":"<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>We can use a mechanism similar preorder traversal, but the solution is not as straight forward. When we are printing nodes on left subtree, ignoring all right nodes, we will visit each left node starting from root, however we can’t print them straight away, as we need to print them in reverse order. Otherwise the output will be 44, 23, 13, 7. So, in order to print them in reverse order, we make use of auxiliary datastructure. Stack is what we need in this case.</p>\n<p>We keep pushing left node onto stack until we reach a leaf node while visiting only the left nodes. Once we reach a leaf node, just pop all elements from the stack and print all of them. Once left subtree is complete, print the root node and continue with right subtree.</p>\n<p>Right subtree is much simpler solution, as we have to print the right most nodes in the order we visit them. Begin with root and move to its right node, print the node and continue to its right node. Proceed till the right child becomes null. Find the program below written in java.</p>\n<figure class=\"highlight java\"><figcaption><span>Program to print top view of a Binary Tree</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">topView</span><span class=\"params\">(Node root)</span> </span>&#123;</span><br><span class=\"line\">    Node temp = root.left;</span><br><span class=\"line\">    Stack&lt;Node&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(temp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        stack.push(temp);</span><br><span class=\"line\">        temp = temp.left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!stack.isEmpty())</span><br><span class=\"line\">        System.out.println(stack.pop().data);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(root.data);</span><br><span class=\"line\">    temp = root.right;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (temp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        System.out.println(temp.data);</span><br><span class=\"line\">        temp = temp.right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>What do you think of this solution? Can you think of a simpler solution? Let me know in the comments.</p>\n<hr>\n<p>SVG for BinaryTree diagram is generated by using <a href=\"http://btv.melezinek.cz/binary-search-tree.html\">Binary Tree Visualizer</a></p>","popularPost_tmp_postPath":true,"eyeCatchImage":"/blog/assets/svgs/2016/top-view-of-binarytree.svg","popularPost_tmp_gaData":{"updated":"Fri Jul 22 2016 11:30:00 GMT-0700 (Pacific Daylight Time)","title":"Top View of Binary Tree without Recursion","path":"2016/07/top-view-of-binarytree-without-recursion/","eyeCatchImage":"/blog/assets/svgs/2016/top-view-of-binarytree.svg","excerpt":"This article shows you how to print top view of a binary tree, which using recursion.","date":{"_isAMomentObject":true,"_i":"2016-07-22T18:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2016-07-22T18:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["java","algorithms","data-structures","problem","interview-question","binary-tree"],"internalLinks":["blog/2016/07/right-view-of-binarytree-without-recursion/"],"keywords":[],"keywordsLength":0}},{"title":"Expiring Local Storage Objects in JavaScript","date":"2020-06-09T18:30:00.000Z","author":"Jyothi Prasad Buddha","description":"Shows a method of expiring items in browser localStorage","_content":"All the modern browsers have multiple types of storage mechanisms for using in your web applications. You may have already heard of cookies which are small bits of information you can store and they will be automatically expired.\n\nHowever, cookies can only store small amounts of information. The other kind of storage is sessionStorage, where you can store big chunks of information. However all the data stored in this will be lost as soon as you close the browser tab.\n\nLocal storage provides an intermediary option, it can store large amount of information and it will not be lost after the user closes the tab or browser. The data is persisted across sessions. However, we may want a better solution. We want to store large chunks of data across sessions, but we still want to have an option of invalidating after a certain period of time. Let us see how to go on about solving the problem.\n<!-- more -->\n<a data-flickr-embed=\"true\" href=\"https://www.flickr.com/photos/140760885@N04/49959194511/in/dateposted/\" title=\"Browser Storages\"><img src=\"https://live.staticflickr.com/65535/49959194511_65bced3703_z.jpg\" width=\"640\" height=\"549\" alt=\"Browser Storages\"></a><script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script>\n\n## Solution\nThe solution is to wrap localStorage API with a utility. Your application's logic for accessing should encapsulated in a single class. Using localStorage revolves around storing item with a key and fetching the item previously stored.\n\nThe utility we are going to create can provide utility methods to save and load from localStorage. The save method will store the item along with the timestamp, where are load method should first check if the item has already expired before returning it. Here is the that does just that.\n{% codeblock lang:javascript %}\nconst EXPIRY_IN_HOURS = 6;\n\n/**\n * Fetches the previously stored item from the local storage, checks if the item\n * has expired, if so, it will return null, otherwise it will return the item.\n *\n * @param {string} key The key to lookup the item.\n */\nexport const load = (key) => {\n  const jsonValue = localStorage[key];\n  const item = jsonValue ? JSON.parse(jsonValue) : null;\n\n  if (hasExpired(item)) {\n    delete localStorage[key];\n    return null;\n  }\n  return value.data;\n};\n\n/**\n * Saves an item to the local storage along with the current time.\n *\n * @param {string} key The key to store the item.\n * @param {*} data The data to store.\n */\nexport const save = (key, data) => {\n  if (key && data) {\n    localStorage[key] = JSON.stringify({ data, timestamp: new Date() });\n  } else {\n    console.error(`Invalid key or data: Key: ${key}, data: ${data}`);\n  }\n};\n\n/**\n * Check if the item's age and determines if it has to be invalidated.\n */\nconst hasExpired = (item) => {\n  const dt1 = new Date(item.timestamp);\n  const dt2 = new Date();\n  diffHours = Math.floor(dt2 - dt1) / (1000 * 60 * 60));\n\n  return !item || EXPIRY_IN_HOURS < diffHours;\n};\n\n{% endcodeblock %}\n\nIn this snippet, we have one auxiliary method to help with detection of expiration. The method hasExpired will calculate the difference in hours. It uses the current timestamp and the and timestamp stored along with data to calculate the age. If the age of the item is more than the expire hours we set, we return true from this method. The load method invokes the hasExpired method to check if the item is expired and return null after deleting the item from localStorage.\n{% admonition warning Watchout %}\n* However, keep note of the issues that can arise out of this, if the user happens to travel between timezones the expiry may not work appropriately, the solution is to use UTC timestamps all the time.\n* Also, we only remove the items when user tries to access them so, if we store an item and never read it again, we may leave that item forever in localStorage. We can solve that as well but it is for a different post.\n{% endadmonition %}\n\nThere can be other frameworks that may solve this problem elegantly, but what is more interesting than solving problems ourselves.\n\n---\n","source":"_posts/2020/06/expiring-localstorage-objects.md","raw":"---\ntitle: Expiring Local Storage Objects in JavaScript\ndate: 2020-06-10\ntags: ['javascript']\nauthor: Jyothi Prasad Buddha\ndescription: Shows a method of expiring items in browser localStorage\n---\nAll the modern browsers have multiple types of storage mechanisms for using in your web applications. You may have already heard of cookies which are small bits of information you can store and they will be automatically expired.\n\nHowever, cookies can only store small amounts of information. The other kind of storage is sessionStorage, where you can store big chunks of information. However all the data stored in this will be lost as soon as you close the browser tab.\n\nLocal storage provides an intermediary option, it can store large amount of information and it will not be lost after the user closes the tab or browser. The data is persisted across sessions. However, we may want a better solution. We want to store large chunks of data across sessions, but we still want to have an option of invalidating after a certain period of time. Let us see how to go on about solving the problem.\n<!-- more -->\n<a data-flickr-embed=\"true\" href=\"https://www.flickr.com/photos/140760885@N04/49959194511/in/dateposted/\" title=\"Browser Storages\"><img src=\"https://live.staticflickr.com/65535/49959194511_65bced3703_z.jpg\" width=\"640\" height=\"549\" alt=\"Browser Storages\"></a><script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script>\n\n## Solution\nThe solution is to wrap localStorage API with a utility. Your application's logic for accessing should encapsulated in a single class. Using localStorage revolves around storing item with a key and fetching the item previously stored.\n\nThe utility we are going to create can provide utility methods to save and load from localStorage. The save method will store the item along with the timestamp, where are load method should first check if the item has already expired before returning it. Here is the that does just that.\n{% codeblock lang:javascript %}\nconst EXPIRY_IN_HOURS = 6;\n\n/**\n * Fetches the previously stored item from the local storage, checks if the item\n * has expired, if so, it will return null, otherwise it will return the item.\n *\n * @param {string} key The key to lookup the item.\n */\nexport const load = (key) => {\n  const jsonValue = localStorage[key];\n  const item = jsonValue ? JSON.parse(jsonValue) : null;\n\n  if (hasExpired(item)) {\n    delete localStorage[key];\n    return null;\n  }\n  return value.data;\n};\n\n/**\n * Saves an item to the local storage along with the current time.\n *\n * @param {string} key The key to store the item.\n * @param {*} data The data to store.\n */\nexport const save = (key, data) => {\n  if (key && data) {\n    localStorage[key] = JSON.stringify({ data, timestamp: new Date() });\n  } else {\n    console.error(`Invalid key or data: Key: ${key}, data: ${data}`);\n  }\n};\n\n/**\n * Check if the item's age and determines if it has to be invalidated.\n */\nconst hasExpired = (item) => {\n  const dt1 = new Date(item.timestamp);\n  const dt2 = new Date();\n  diffHours = Math.floor(dt2 - dt1) / (1000 * 60 * 60));\n\n  return !item || EXPIRY_IN_HOURS < diffHours;\n};\n\n{% endcodeblock %}\n\nIn this snippet, we have one auxiliary method to help with detection of expiration. The method hasExpired will calculate the difference in hours. It uses the current timestamp and the and timestamp stored along with data to calculate the age. If the age of the item is more than the expire hours we set, we return true from this method. The load method invokes the hasExpired method to check if the item is expired and return null after deleting the item from localStorage.\n{% admonition warning Watchout %}\n* However, keep note of the issues that can arise out of this, if the user happens to travel between timezones the expiry may not work appropriately, the solution is to use UTC timestamps all the time.\n* Also, we only remove the items when user tries to access them so, if we store an item and never read it again, we may leave that item forever in localStorage. We can solve that as well but it is for a different post.\n{% endadmonition %}\n\nThere can be other frameworks that may solve this problem elegantly, but what is more interesting than solving problems ourselves.\n\n---\n","slug":"2020/06/expiring-localstorage-objects","published":1,"updated":"2020-06-09T18:30:00.000Z","_id":"ckki0ed32000lnbs65qd7667s","comments":1,"layout":"post","photos":[],"link":"","content":"<p>All the modern browsers have multiple types of storage mechanisms for using in your web applications. You may have already heard of cookies which are small bits of information you can store and they will be automatically expired.</p>\n<p>However, cookies can only store small amounts of information. The other kind of storage is sessionStorage, where you can store big chunks of information. However all the data stored in this will be lost as soon as you close the browser tab.</p>\n<p>Local storage provides an intermediary option, it can store large amount of information and it will not be lost after the user closes the tab or browser. The data is persisted across sessions. However, we may want a better solution. We want to store large chunks of data across sessions, but we still want to have an option of invalidating after a certain period of time. Let us see how to go on about solving the problem.</p>\n<a id=\"more\"></a>\n<p><a data-flickr-embed=\"true\" href=\"https://www.flickr.com/photos/140760885@N04/49959194511/in/dateposted/\" title=\"Browser Storages\"><img data-src=\"https://live.staticflickr.com/65535/49959194511_65bced3703_z.jpg\" width=\"640\" height=\"549\" alt=\"Browser Storages\"></a><script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script></p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p>The solution is to wrap localStorage API with a utility. Your application’s logic for accessing should encapsulated in a single class. Using localStorage revolves around storing item with a key and fetching the item previously stored.</p>\n<p>The utility we are going to create can provide utility methods to save and load from localStorage. The save method will store the item along with the timestamp, where are load method should first check if the item has already expired before returning it. Here is the that does just that.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> EXPIRY_IN_HOURS = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Fetches the previously stored item from the local storage, checks if the item</span></span><br><span class=\"line\"><span class=\"comment\"> * has expired, if so, it will return null, otherwise it will return the item.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> </span>key The key to lookup the item.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> load = <span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> jsonValue = <span class=\"built_in\">localStorage</span>[key];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> item = jsonValue ? <span class=\"built_in\">JSON</span>.parse(jsonValue) : <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hasExpired(item)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"built_in\">localStorage</span>[key];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value.data;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Saves an item to the local storage along with the current time.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> </span>key The key to store the item.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;*&#125;</span> </span>data The data to store.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> save = <span class=\"function\">(<span class=\"params\">key, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key &amp;&amp; data) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>[key] = <span class=\"built_in\">JSON</span>.stringify(&#123; data, <span class=\"attr\">timestamp</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">`Invalid key or data: Key: <span class=\"subst\">$&#123;key&#125;</span>, data: <span class=\"subst\">$&#123;data&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Check if the item&#x27;s age and determines if it has to be invalidated.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> hasExpired = <span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dt1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(item.timestamp);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dt2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  diffHours = <span class=\"built_in\">Math</span>.floor(dt2 - dt1) / (<span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> !item || EXPIRY_IN_HOURS &lt; diffHours;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>In this snippet, we have one auxiliary method to help with detection of expiration. The method hasExpired will calculate the difference in hours. It uses the current timestamp and the and timestamp stored along with data to calculate the age. If the age of the item is more than the expire hours we set, we return true from this method. The load method invokes the hasExpired method to check if the item is expired and return null after deleting the item from localStorage.</p>\n<div class=\"admonition warning\"><p class=\"admonition-title\">Watchout</p><ul>\n<li>However, keep note of the issues that can arise out of this, if the user happens to travel between timezones the expiry may not work appropriately, the solution is to use UTC timestamps all the time.</li>\n<li>Also, we only remove the items when user tries to access them so, if we store an item and never read it again, we may leave that item forever in localStorage. We can solve that as well but it is for a different post.</li>\n</ul>\n</div>\n\n<p>There can be other frameworks that may solve this problem elegantly, but what is more interesting than solving problems ourselves.</p>\n<hr>\n","site":{"data":{"head":""}},"excerpt":"<p>All the modern browsers have multiple types of storage mechanisms for using in your web applications. You may have already heard of cookies which are small bits of information you can store and they will be automatically expired.</p>\n<p>However, cookies can only store small amounts of information. The other kind of storage is sessionStorage, where you can store big chunks of information. However all the data stored in this will be lost as soon as you close the browser tab.</p>\n<p>Local storage provides an intermediary option, it can store large amount of information and it will not be lost after the user closes the tab or browser. The data is persisted across sessions. However, we may want a better solution. We want to store large chunks of data across sessions, but we still want to have an option of invalidating after a certain period of time. Let us see how to go on about solving the problem.</p>","more":"<p><a data-flickr-embed=\"true\" href=\"https://www.flickr.com/photos/140760885@N04/49959194511/in/dateposted/\" title=\"Browser Storages\"><img src=\"https://live.staticflickr.com/65535/49959194511_65bced3703_z.jpg\" width=\"640\" height=\"549\" alt=\"Browser Storages\"></a><script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script></p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p>The solution is to wrap localStorage API with a utility. Your application’s logic for accessing should encapsulated in a single class. Using localStorage revolves around storing item with a key and fetching the item previously stored.</p>\n<p>The utility we are going to create can provide utility methods to save and load from localStorage. The save method will store the item along with the timestamp, where are load method should first check if the item has already expired before returning it. Here is the that does just that.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> EXPIRY_IN_HOURS = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Fetches the previously stored item from the local storage, checks if the item</span></span><br><span class=\"line\"><span class=\"comment\"> * has expired, if so, it will return null, otherwise it will return the item.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> </span>key The key to lookup the item.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> load = <span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> jsonValue = <span class=\"built_in\">localStorage</span>[key];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> item = jsonValue ? <span class=\"built_in\">JSON</span>.parse(jsonValue) : <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hasExpired(item)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"built_in\">localStorage</span>[key];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value.data;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Saves an item to the local storage along with the current time.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> </span>key The key to store the item.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;*&#125;</span> </span>data The data to store.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> save = <span class=\"function\">(<span class=\"params\">key, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key &amp;&amp; data) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>[key] = <span class=\"built_in\">JSON</span>.stringify(&#123; data, <span class=\"attr\">timestamp</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">`Invalid key or data: Key: <span class=\"subst\">$&#123;key&#125;</span>, data: <span class=\"subst\">$&#123;data&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Check if the item&#x27;s age and determines if it has to be invalidated.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> hasExpired = <span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dt1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(item.timestamp);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dt2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  diffHours = <span class=\"built_in\">Math</span>.floor(dt2 - dt1) / (<span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> !item || EXPIRY_IN_HOURS &lt; diffHours;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>In this snippet, we have one auxiliary method to help with detection of expiration. The method hasExpired will calculate the difference in hours. It uses the current timestamp and the and timestamp stored along with data to calculate the age. If the age of the item is more than the expire hours we set, we return true from this method. The load method invokes the hasExpired method to check if the item is expired and return null after deleting the item from localStorage.</p>\n<div class=\"admonition warning\"><p class=\"admonition-title\">Watchout</p><ul>\n<li>However, keep note of the issues that can arise out of this, if the user happens to travel between timezones the expiry may not work appropriately, the solution is to use UTC timestamps all the time.</li>\n<li>Also, we only remove the items when user tries to access them so, if we store an item and never read it again, we may leave that item forever in localStorage. We can solve that as well but it is for a different post.</li>\n</ul>\n</div>\n\n<p>There can be other frameworks that may solve this problem elegantly, but what is more interesting than solving problems ourselves.</p>\n<hr>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://live.staticflickr.com/65535/49959194511_65bced3703_z.jpg","popularPost_tmp_gaData":{"updated":"Tue Jun 09 2020 11:30:00 GMT-0700 (Pacific Daylight Time)","title":"Expiring Local Storage Objects in JavaScript","path":"2020/06/expiring-localstorage-objects/","eyeCatchImage":"https://live.staticflickr.com/65535/49959194511_65bced3703_z.jpg","excerpt":"Shows a method of expiring items in browser localStorage","date":{"_isAMomentObject":true,"_i":"2020-06-09T18:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-06-09T18:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["javascript"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"How to use OpenCSV to write CSV files to S3","date":"2021-01-23T18:30:00.000Z","author":"Jyothi Prasad Buddha","description":"Gives an example of how to use opencsv in java to write csv files to S3","_content":"\nIn the previous post about [How to read csv files from S3 using OpenCSV](/2021/01/reading-csv-files-from-s3-using-opencsv/), we have seen how to open and files on S3 and read the comma separated data into list of hashmaps. In this article, we will see how to perform the reverse, writing data to the files.\n\nMost of the fundamental concepts do not change. You need to create S3 client if you want to do anything with S3. The AWS profile configured should be of the user or role that has permissions to write to S3. The bucket policy should allow writing files. I'm not going to cover how to setup aws credentials and IAM policies in this post. The method getS3() in the complete code snippet below is going to return an S3 client just like in the previous post.\n<!-- more -->\nIn order for us to write CSV files using OpenCSV, you need to create a `CSVWriter` object. It allows us to write text to a stream and redirect them to a csv file. Here is how you can create a writer.\n\n{% codeblock lang:java %}\nprivate CSVWriter buildCSVWriter(OutputStreamWriter streamWriter) {\n    return new CSVWriter(streamWriter, ',', Character.MIN_VALUE, '\"', System.lineSeparator());\n}\n{% endcodeblock %}\n\nIn this code, we create a CSVWriter by using the constructor that accepts an output stream writer, comma as separator, `\\u00000 or Character.MIN_VALUE` as quote character, `\"` as escape character and new line as the separator between lines. If you want to use a different separators such as TAB instead of Comma, you can do so by changing the second parameter. Once the writer is created, we can send the data to output stream and the data will be automatically written to the file. Following snippet achieves the same.\n\n{% codeblock lang:java %}\npublic void writeRecords(List<String[]> lines) throws IOException {\n    ByteArrayOutputStream stream = new ByteArrayOutputStream();\n    OutputStreamWriter streamWriter = new OutputStreamWriter(stream, StandardCharsets.UTF_8);\n    try (CSVWriter writer = buildCSVWriter(streamWriter)) {\n        writer.writeAll(lines);\n    }\n}\n{% endcodeblock %}\n\nIn above code snippet, you can see that we accept list of string arrays. If you want to write headers as well, the first string array of the list must include headers. Once all the data has been written, you can use putObject of the S3 client to upload the content as a file to the given path and bucket. However the putObject method of S3 client doesn't accept an output stream, it accepts an input stream so you can just wrap the previously created output stream into an input stream. You also need to set metadata such as Content length yourself. Following snippet provides you code for how to do that.\n\n{% codeblock lang:java %}\nObjectMetadata meta = new ObjectMetadata();\nmeta.setContentLength(stream.toByteArray().length);\ngetS3().putObject(BUCKET, PATH, new ByteArrayInputStream(stream.toByteArray()), meta);\n{% endcodeblock %}\n\nPutting everything together, following code code combines all the snippets we have seen before.\n\n{% codeblock lang:java %}\nimport java.io.*;\nimport java.util.*;\nimport java.nio.charset.StandardCharsets;\n\nimport com.opencsv.CSVWriter;\n\nimport com.amazonaws.services.s3.*;\nimport com.amazonaws.regions.Regions;\nimport com.amazonaws.auth.profile.ProfileCredentialsProvider;\nimport com.amazonaws.services.s3.model.ObjectMetadata;\n\npublic class S3CSVWriter {\n\n    private final static String BUCKET = \"buddha-test-bucket\";\n    private final static String PATH = \"buddha/output/out.txt\";\n    private final static String AWS_PROFILE = \"aws-profile\";\n\n    public static void main(String... args) throws IOException {\n        // Example Usage\n        S3CSVWriter writer = new S3CSVWriter();\n\n        List<String[]> lines = Arrays.asList(\n                new String[] { \"col1\", \"col2\", \"col3\" },\n                new String[] { \"1\", \"large\", \"5\" },\n                new String[] { \"2\", \"small\", \"2\" }\n        );\n        writer.writeRecords(lines);\n    }\n\n    public void writeRecords(List<String[]> lines) throws IOException {\n        ByteArrayOutputStream stream = new ByteArrayOutputStream();\n        OutputStreamWriter streamWriter = new OutputStreamWriter(stream, StandardCharsets.UTF_8);\n        try (CSVWriter writer = buildCSVWriter(streamWriter)) {\n            writer.writeAll(lines);\n            writer.flush();\n            ObjectMetadata meta = new ObjectMetadata();\n            meta.setContentLength(stream.toByteArray().length);\n            getS3().putObject(BUCKET, PATH, new ByteArrayInputStream(stream.toByteArray()), meta);\n        }\n    }\n\n    private CSVWriter buildCSVWriter(OutputStreamWriter streamWriter) {\n        return new CSVWriter(streamWriter, ',', Character.MIN_VALUE, '\"', System.lineSeparator());\n    }\n\n    private AmazonS3 getS3() {\n        return AmazonS3ClientBuilder.standard()\n                                    .withCredentials(new ProfileCredentialsProvider(AWS_PROFILE))\n                                    .withRegion(Regions.US_WEST_2)\n                                    .build();\n    }\n}\n{% endcodeblock %}\n\nIn the above code, the main function creates a list of String arrays with first array as column headers and next two lines as the data. An object of `S3CSVWriter` has been created and it's writeRecords method is invoked by passing the array list. Another change in writeRecords method is that we used `writer.flush()` before attempting to write data to S3. This will ensure that the data that has been written using `writeAll` method is not retained in buffer and instead written to the stream.\n\n## Dependencies\n\nAssuming that you are using Maven, you need to add the following dependencies to your pom.xml to add opencsv to your project irrespective of what browser you may use.\n\n{% codeblock lang:xml %}\n<!-- https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-s3 -->\n<dependency>\n    <groupId>com.amazonaws</groupId>\n    <artifactId>aws-java-sdk-s3</artifactId>\n    <version>1.11.939</version>\n</dependency>\n\n<!-- https://mvnrepository.com/artifact/com.opencsv/opencsv -->\n<dependency>\n    <groupId>com.opencsv</groupId>\n    <artifactId>opencsv</artifactId>\n    <version>5.3</version>\n</dependency>\n{% endcodeblock %}\n\nFor understanding how to import dependencies using other build systems, such as gradle go to the corresponding maven artifact pages such as https://mvnrepository.com/artifact/com.opencsv/opencsv and select appropriate tab.\n\n---\n","source":"_posts/2021/01/writing-csv-files-from-s3-using-opencsv.md","raw":"---\ntitle: How to use OpenCSV to write CSV files to S3\ndate: 2021-01-24\ntags: ['java', 's3', 'aws', 'opencsv', 'data', 'files', 'example']\nauthor: Jyothi Prasad Buddha\ndescription: Gives an example of how to use opencsv in java to write csv files to S3\n---\n\nIn the previous post about [How to read csv files from S3 using OpenCSV](/2021/01/reading-csv-files-from-s3-using-opencsv/), we have seen how to open and files on S3 and read the comma separated data into list of hashmaps. In this article, we will see how to perform the reverse, writing data to the files.\n\nMost of the fundamental concepts do not change. You need to create S3 client if you want to do anything with S3. The AWS profile configured should be of the user or role that has permissions to write to S3. The bucket policy should allow writing files. I'm not going to cover how to setup aws credentials and IAM policies in this post. The method getS3() in the complete code snippet below is going to return an S3 client just like in the previous post.\n<!-- more -->\nIn order for us to write CSV files using OpenCSV, you need to create a `CSVWriter` object. It allows us to write text to a stream and redirect them to a csv file. Here is how you can create a writer.\n\n{% codeblock lang:java %}\nprivate CSVWriter buildCSVWriter(OutputStreamWriter streamWriter) {\n    return new CSVWriter(streamWriter, ',', Character.MIN_VALUE, '\"', System.lineSeparator());\n}\n{% endcodeblock %}\n\nIn this code, we create a CSVWriter by using the constructor that accepts an output stream writer, comma as separator, `\\u00000 or Character.MIN_VALUE` as quote character, `\"` as escape character and new line as the separator between lines. If you want to use a different separators such as TAB instead of Comma, you can do so by changing the second parameter. Once the writer is created, we can send the data to output stream and the data will be automatically written to the file. Following snippet achieves the same.\n\n{% codeblock lang:java %}\npublic void writeRecords(List<String[]> lines) throws IOException {\n    ByteArrayOutputStream stream = new ByteArrayOutputStream();\n    OutputStreamWriter streamWriter = new OutputStreamWriter(stream, StandardCharsets.UTF_8);\n    try (CSVWriter writer = buildCSVWriter(streamWriter)) {\n        writer.writeAll(lines);\n    }\n}\n{% endcodeblock %}\n\nIn above code snippet, you can see that we accept list of string arrays. If you want to write headers as well, the first string array of the list must include headers. Once all the data has been written, you can use putObject of the S3 client to upload the content as a file to the given path and bucket. However the putObject method of S3 client doesn't accept an output stream, it accepts an input stream so you can just wrap the previously created output stream into an input stream. You also need to set metadata such as Content length yourself. Following snippet provides you code for how to do that.\n\n{% codeblock lang:java %}\nObjectMetadata meta = new ObjectMetadata();\nmeta.setContentLength(stream.toByteArray().length);\ngetS3().putObject(BUCKET, PATH, new ByteArrayInputStream(stream.toByteArray()), meta);\n{% endcodeblock %}\n\nPutting everything together, following code code combines all the snippets we have seen before.\n\n{% codeblock lang:java %}\nimport java.io.*;\nimport java.util.*;\nimport java.nio.charset.StandardCharsets;\n\nimport com.opencsv.CSVWriter;\n\nimport com.amazonaws.services.s3.*;\nimport com.amazonaws.regions.Regions;\nimport com.amazonaws.auth.profile.ProfileCredentialsProvider;\nimport com.amazonaws.services.s3.model.ObjectMetadata;\n\npublic class S3CSVWriter {\n\n    private final static String BUCKET = \"buddha-test-bucket\";\n    private final static String PATH = \"buddha/output/out.txt\";\n    private final static String AWS_PROFILE = \"aws-profile\";\n\n    public static void main(String... args) throws IOException {\n        // Example Usage\n        S3CSVWriter writer = new S3CSVWriter();\n\n        List<String[]> lines = Arrays.asList(\n                new String[] { \"col1\", \"col2\", \"col3\" },\n                new String[] { \"1\", \"large\", \"5\" },\n                new String[] { \"2\", \"small\", \"2\" }\n        );\n        writer.writeRecords(lines);\n    }\n\n    public void writeRecords(List<String[]> lines) throws IOException {\n        ByteArrayOutputStream stream = new ByteArrayOutputStream();\n        OutputStreamWriter streamWriter = new OutputStreamWriter(stream, StandardCharsets.UTF_8);\n        try (CSVWriter writer = buildCSVWriter(streamWriter)) {\n            writer.writeAll(lines);\n            writer.flush();\n            ObjectMetadata meta = new ObjectMetadata();\n            meta.setContentLength(stream.toByteArray().length);\n            getS3().putObject(BUCKET, PATH, new ByteArrayInputStream(stream.toByteArray()), meta);\n        }\n    }\n\n    private CSVWriter buildCSVWriter(OutputStreamWriter streamWriter) {\n        return new CSVWriter(streamWriter, ',', Character.MIN_VALUE, '\"', System.lineSeparator());\n    }\n\n    private AmazonS3 getS3() {\n        return AmazonS3ClientBuilder.standard()\n                                    .withCredentials(new ProfileCredentialsProvider(AWS_PROFILE))\n                                    .withRegion(Regions.US_WEST_2)\n                                    .build();\n    }\n}\n{% endcodeblock %}\n\nIn the above code, the main function creates a list of String arrays with first array as column headers and next two lines as the data. An object of `S3CSVWriter` has been created and it's writeRecords method is invoked by passing the array list. Another change in writeRecords method is that we used `writer.flush()` before attempting to write data to S3. This will ensure that the data that has been written using `writeAll` method is not retained in buffer and instead written to the stream.\n\n## Dependencies\n\nAssuming that you are using Maven, you need to add the following dependencies to your pom.xml to add opencsv to your project irrespective of what browser you may use.\n\n{% codeblock lang:xml %}\n<!-- https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-s3 -->\n<dependency>\n    <groupId>com.amazonaws</groupId>\n    <artifactId>aws-java-sdk-s3</artifactId>\n    <version>1.11.939</version>\n</dependency>\n\n<!-- https://mvnrepository.com/artifact/com.opencsv/opencsv -->\n<dependency>\n    <groupId>com.opencsv</groupId>\n    <artifactId>opencsv</artifactId>\n    <version>5.3</version>\n</dependency>\n{% endcodeblock %}\n\nFor understanding how to import dependencies using other build systems, such as gradle go to the corresponding maven artifact pages such as https://mvnrepository.com/artifact/com.opencsv/opencsv and select appropriate tab.\n\n---\n","slug":"2021/01/writing-csv-files-from-s3-using-opencsv","published":1,"updated":"2021-01-23T18:30:00.000Z","_id":"ckki0ed33000nnbs633k5cqh1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>In the previous post about <a href=\"/2021/01/reading-csv-files-from-s3-using-opencsv/\">How to read csv files from S3 using OpenCSV</a>, we have seen how to open and files on S3 and read the comma separated data into list of hashmaps. In this article, we will see how to perform the reverse, writing data to the files.</p>\n<p>Most of the fundamental concepts do not change. You need to create S3 client if you want to do anything with S3. The AWS profile configured should be of the user or role that has permissions to write to S3. The bucket policy should allow writing files. I’m not going to cover how to setup aws credentials and IAM policies in this post. The method getS3() in the complete code snippet below is going to return an S3 client just like in the previous post.</p>\n<a id=\"more\"></a>\n<p>In order for us to write CSV files using OpenCSV, you need to create a <code>CSVWriter</code> object. It allows us to write text to a stream and redirect them to a csv file. Here is how you can create a writer.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> CSVWriter <span class=\"title\">buildCSVWriter</span><span class=\"params\">(OutputStreamWriter streamWriter)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CSVWriter(streamWriter, <span class=\"string\">&#x27;,&#x27;</span>, Character.MIN_VALUE, <span class=\"string\">&#x27;&quot;&#x27;</span>, System.lineSeparator());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In this code, we create a CSVWriter by using the constructor that accepts an output stream writer, comma as separator, <code>\\u00000 or Character.MIN_VALUE</code> as quote character, <code>&quot;</code> as escape character and new line as the separator between lines. If you want to use a different separators such as TAB instead of Comma, you can do so by changing the second parameter. Once the writer is created, we can send the data to output stream and the data will be automatically written to the file. Following snippet achieves the same.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeRecords</span><span class=\"params\">(List&lt;String[]&gt; lines)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    ByteArrayOutputStream stream = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">    OutputStreamWriter streamWriter = <span class=\"keyword\">new</span> OutputStreamWriter(stream, StandardCharsets.UTF_8);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (CSVWriter writer = buildCSVWriter(streamWriter)) &#123;</span><br><span class=\"line\">        writer.writeAll(lines);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In above code snippet, you can see that we accept list of string arrays. If you want to write headers as well, the first string array of the list must include headers. Once all the data has been written, you can use putObject of the S3 client to upload the content as a file to the given path and bucket. However the putObject method of S3 client doesn’t accept an output stream, it accepts an input stream so you can just wrap the previously created output stream into an input stream. You also need to set metadata such as Content length yourself. Following snippet provides you code for how to do that.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjectMetadata meta = <span class=\"keyword\">new</span> ObjectMetadata();</span><br><span class=\"line\">meta.setContentLength(stream.toByteArray().length);</span><br><span class=\"line\">getS3().putObject(BUCKET, PATH, <span class=\"keyword\">new</span> ByteArrayInputStream(stream.toByteArray()), meta);</span><br></pre></td></tr></table></figure>\n\n<p>Putting everything together, following code code combines all the snippets we have seen before.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.opencsv.CSVWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.services.s3.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.regions.Regions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.auth.profile.ProfileCredentialsProvider;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.services.s3.model.ObjectMetadata;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S3CSVWriter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String BUCKET = <span class=\"string\">&quot;buddha-test-bucket&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String PATH = <span class=\"string\">&quot;buddha/output/out.txt&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String AWS_PROFILE = <span class=\"string\">&quot;aws-profile&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Example Usage</span></span><br><span class=\"line\">        S3CSVWriter writer = <span class=\"keyword\">new</span> S3CSVWriter();</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;String[]&gt; lines = Arrays.asList(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> String[] &#123; <span class=\"string\">&quot;col1&quot;</span>, <span class=\"string\">&quot;col2&quot;</span>, <span class=\"string\">&quot;col3&quot;</span> &#125;,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> String[] &#123; <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;large&quot;</span>, <span class=\"string\">&quot;5&quot;</span> &#125;,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> String[] &#123; <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;small&quot;</span>, <span class=\"string\">&quot;2&quot;</span> &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">        writer.writeRecords(lines);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeRecords</span><span class=\"params\">(List&lt;String[]&gt; lines)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        ByteArrayOutputStream stream = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        OutputStreamWriter streamWriter = <span class=\"keyword\">new</span> OutputStreamWriter(stream, StandardCharsets.UTF_8);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (CSVWriter writer = buildCSVWriter(streamWriter)) &#123;</span><br><span class=\"line\">            writer.writeAll(lines);</span><br><span class=\"line\">            writer.flush();</span><br><span class=\"line\">            ObjectMetadata meta = <span class=\"keyword\">new</span> ObjectMetadata();</span><br><span class=\"line\">            meta.setContentLength(stream.toByteArray().length);</span><br><span class=\"line\">            getS3().putObject(BUCKET, PATH, <span class=\"keyword\">new</span> ByteArrayInputStream(stream.toByteArray()), meta);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> CSVWriter <span class=\"title\">buildCSVWriter</span><span class=\"params\">(OutputStreamWriter streamWriter)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CSVWriter(streamWriter, <span class=\"string\">&#x27;,&#x27;</span>, Character.MIN_VALUE, <span class=\"string\">&#x27;&quot;&#x27;</span>, System.lineSeparator());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> AmazonS3 <span class=\"title\">getS3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> AmazonS3ClientBuilder.standard()</span><br><span class=\"line\">                                    .withCredentials(<span class=\"keyword\">new</span> ProfileCredentialsProvider(AWS_PROFILE))</span><br><span class=\"line\">                                    .withRegion(Regions.US_WEST_2)</span><br><span class=\"line\">                                    .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In the above code, the main function creates a list of String arrays with first array as column headers and next two lines as the data. An object of <code>S3CSVWriter</code> has been created and it’s writeRecords method is invoked by passing the array list. Another change in writeRecords method is that we used <code>writer.flush()</code> before attempting to write data to S3. This will ensure that the data that has been written using <code>writeAll</code> method is not retained in buffer and instead written to the stream.</p>\n<h2 id=\"Dependencies\"><a href=\"#Dependencies\" class=\"headerlink\" title=\"Dependencies\"></a>Dependencies</h2><p>Assuming that you are using Maven, you need to add the following dependencies to your pom.xml to add opencsv to your project irrespective of what browser you may use.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-s3 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.amazonaws<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aws-java-sdk-s3<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.11.939<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.opencsv/opencsv --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.opencsv<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>opencsv<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>For understanding how to import dependencies using other build systems, such as gradle go to the corresponding maven artifact pages such as <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tdm5yZXBvc2l0b3J5LmNvbS9hcnRpZmFjdC9jb20ub3BlbmNzdi9vcGVuY3N2\">https://mvnrepository.com/artifact/com.opencsv/opencsv<i class=\"fa fa-external-link-alt\"></i></span> and select appropriate tab.</p>\n<hr>\n","site":{"data":{"head":""}},"excerpt":"<p>In the previous post about <a href=\"/2021/01/reading-csv-files-from-s3-using-opencsv/\">How to read csv files from S3 using OpenCSV</a>, we have seen how to open and files on S3 and read the comma separated data into list of hashmaps. In this article, we will see how to perform the reverse, writing data to the files.</p>\n<p>Most of the fundamental concepts do not change. You need to create S3 client if you want to do anything with S3. The AWS profile configured should be of the user or role that has permissions to write to S3. The bucket policy should allow writing files. I’m not going to cover how to setup aws credentials and IAM policies in this post. The method getS3() in the complete code snippet below is going to return an S3 client just like in the previous post.</p>","more":"<p>In order for us to write CSV files using OpenCSV, you need to create a <code>CSVWriter</code> object. It allows us to write text to a stream and redirect them to a csv file. Here is how you can create a writer.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> CSVWriter <span class=\"title\">buildCSVWriter</span><span class=\"params\">(OutputStreamWriter streamWriter)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CSVWriter(streamWriter, <span class=\"string\">&#x27;,&#x27;</span>, Character.MIN_VALUE, <span class=\"string\">&#x27;&quot;&#x27;</span>, System.lineSeparator());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In this code, we create a CSVWriter by using the constructor that accepts an output stream writer, comma as separator, <code>\\u00000 or Character.MIN_VALUE</code> as quote character, <code>&quot;</code> as escape character and new line as the separator between lines. If you want to use a different separators such as TAB instead of Comma, you can do so by changing the second parameter. Once the writer is created, we can send the data to output stream and the data will be automatically written to the file. Following snippet achieves the same.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeRecords</span><span class=\"params\">(List&lt;String[]&gt; lines)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    ByteArrayOutputStream stream = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">    OutputStreamWriter streamWriter = <span class=\"keyword\">new</span> OutputStreamWriter(stream, StandardCharsets.UTF_8);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (CSVWriter writer = buildCSVWriter(streamWriter)) &#123;</span><br><span class=\"line\">        writer.writeAll(lines);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In above code snippet, you can see that we accept list of string arrays. If you want to write headers as well, the first string array of the list must include headers. Once all the data has been written, you can use putObject of the S3 client to upload the content as a file to the given path and bucket. However the putObject method of S3 client doesn’t accept an output stream, it accepts an input stream so you can just wrap the previously created output stream into an input stream. You also need to set metadata such as Content length yourself. Following snippet provides you code for how to do that.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjectMetadata meta = <span class=\"keyword\">new</span> ObjectMetadata();</span><br><span class=\"line\">meta.setContentLength(stream.toByteArray().length);</span><br><span class=\"line\">getS3().putObject(BUCKET, PATH, <span class=\"keyword\">new</span> ByteArrayInputStream(stream.toByteArray()), meta);</span><br></pre></td></tr></table></figure>\n\n<p>Putting everything together, following code code combines all the snippets we have seen before.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.opencsv.CSVWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.services.s3.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.regions.Regions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.auth.profile.ProfileCredentialsProvider;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.services.s3.model.ObjectMetadata;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S3CSVWriter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String BUCKET = <span class=\"string\">&quot;buddha-test-bucket&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String PATH = <span class=\"string\">&quot;buddha/output/out.txt&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String AWS_PROFILE = <span class=\"string\">&quot;aws-profile&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Example Usage</span></span><br><span class=\"line\">        S3CSVWriter writer = <span class=\"keyword\">new</span> S3CSVWriter();</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;String[]&gt; lines = Arrays.asList(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> String[] &#123; <span class=\"string\">&quot;col1&quot;</span>, <span class=\"string\">&quot;col2&quot;</span>, <span class=\"string\">&quot;col3&quot;</span> &#125;,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> String[] &#123; <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;large&quot;</span>, <span class=\"string\">&quot;5&quot;</span> &#125;,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> String[] &#123; <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;small&quot;</span>, <span class=\"string\">&quot;2&quot;</span> &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">        writer.writeRecords(lines);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeRecords</span><span class=\"params\">(List&lt;String[]&gt; lines)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        ByteArrayOutputStream stream = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        OutputStreamWriter streamWriter = <span class=\"keyword\">new</span> OutputStreamWriter(stream, StandardCharsets.UTF_8);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (CSVWriter writer = buildCSVWriter(streamWriter)) &#123;</span><br><span class=\"line\">            writer.writeAll(lines);</span><br><span class=\"line\">            writer.flush();</span><br><span class=\"line\">            ObjectMetadata meta = <span class=\"keyword\">new</span> ObjectMetadata();</span><br><span class=\"line\">            meta.setContentLength(stream.toByteArray().length);</span><br><span class=\"line\">            getS3().putObject(BUCKET, PATH, <span class=\"keyword\">new</span> ByteArrayInputStream(stream.toByteArray()), meta);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> CSVWriter <span class=\"title\">buildCSVWriter</span><span class=\"params\">(OutputStreamWriter streamWriter)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CSVWriter(streamWriter, <span class=\"string\">&#x27;,&#x27;</span>, Character.MIN_VALUE, <span class=\"string\">&#x27;&quot;&#x27;</span>, System.lineSeparator());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> AmazonS3 <span class=\"title\">getS3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> AmazonS3ClientBuilder.standard()</span><br><span class=\"line\">                                    .withCredentials(<span class=\"keyword\">new</span> ProfileCredentialsProvider(AWS_PROFILE))</span><br><span class=\"line\">                                    .withRegion(Regions.US_WEST_2)</span><br><span class=\"line\">                                    .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In the above code, the main function creates a list of String arrays with first array as column headers and next two lines as the data. An object of <code>S3CSVWriter</code> has been created and it’s writeRecords method is invoked by passing the array list. Another change in writeRecords method is that we used <code>writer.flush()</code> before attempting to write data to S3. This will ensure that the data that has been written using <code>writeAll</code> method is not retained in buffer and instead written to the stream.</p>\n<h2 id=\"Dependencies\"><a href=\"#Dependencies\" class=\"headerlink\" title=\"Dependencies\"></a>Dependencies</h2><p>Assuming that you are using Maven, you need to add the following dependencies to your pom.xml to add opencsv to your project irrespective of what browser you may use.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-s3 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.amazonaws<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aws-java-sdk-s3<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.11.939<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.opencsv/opencsv --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.opencsv<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>opencsv<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>For understanding how to import dependencies using other build systems, such as gradle go to the corresponding maven artifact pages such as <a href=\"https://mvnrepository.com/artifact/com.opencsv/opencsv\">https://mvnrepository.com/artifact/com.opencsv/opencsv</a> and select appropriate tab.</p>\n<hr>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sat Jan 23 2021 10:30:00 GMT-0800 (Pacific Standard Time)","title":"How to use OpenCSV to write CSV files to S3","path":"2021/01/writing-csv-files-from-s3-using-opencsv/","eyeCatchImage":null,"excerpt":"Gives an example of how to use opencsv in java to write csv files to S3","date":{"_isAMomentObject":true,"_i":"2021-01-23T18:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-01-23T18:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["java","aws","s3","opencsv","data","files","example"],"internalLinks":["2021/01/reading-csv-files-from-s3-using-opencsv/"],"keywords":[],"keywordsLength":0}},{"title":"How to read S3 CSV files into hashmaps using OpenCSV","date":"2021-01-16T18:30:00.000Z","author":"Jyothi Prasad Buddha","description":"Gives an example of how to use opencsv in java to read csv files as list of hash maps from S3","_content":"\nIn this world where large amounts of data is becoming a norm, it is very frequently stored in S3 in csv format for consumption through serverless database layers such as Athena. However, you often have to read the csv files without using Athena. In such cases, you can use ever useful libraries such as OpenCSV to read csv files.\n\nThis example shows how to use opencsv to quickly read the S3 files without the need to download them first. This helps when you do not have a way to save files locally of if you don't have enough hard disk space. The solution is quite simple. You just have to create an InputStream from an S3 object using getObject method on S3 client. Once the input stream is created, we can use this to create a CSVReader from it.\n<!-- more -->\nAssuming that the CSV files have a header row, you can use CSVReaderHeaderAware class to create a list of hashmaps by reading each record iteratively using readMap method. If readMap method returns null, this means that you have reached end of file. Here is a complete solution for your reference.\n\n{% codeblock lang:java %}\nimport java.io.*;\nimport java.util.*;\n\nimport com.opencsv.*;\nimport com.opencsv.exceptions.CsvValidationException;\n\nimport com.amazonaws.auth.profile.ProfileCredentialsProvider;\nimport com.amazonaws.regions.Regions;\nimport com.amazonaws.services.s3.AmazonS3;\nimport com.amazonaws.services.s3.AmazonS3ClientBuilder;\nimport com.amazonaws.services.s3.model.S3Object;\n\npublic class S3CSVReader {\n\n    public static void main(String... args) throws IOException, CsvValidationException {\n        // Example Usage\n        S3CSVReader reader = new S3CSVReader();\n        List<Map<String, String>> records = reader.getS3Records(\"my-bucket\", \"input-data/file1.csv\");\n        System.out.println(records);\n    }\n\n    public List<Map<String, String>> getS3Records(String bucket, String key) throws IOException, CsvValidationException {\n        List<Map<String, String>> records = new ArrayList<>();\n        try (CSVReaderHeaderAware reader = getReader(bucket, key)) {\n            Map<String, String> values;\n\n            while ((values = reader.readMap()) != null) {\n                records.add(values);\n            }\n            return records;\n        }\n    }\n\n    private CSVReaderHeaderAware getReader(String bucket, String key) {\n        CSVParser parser = new CSVParserBuilder().build();\n        S3Object object = getS3().getObject(bucket, key);\n        var br = new InputStreamReader(object.getObjectContent());\n        return (CSVReaderHeaderAware) new CSVReaderHeaderAwareBuilder(br)\n                .withCSVParser(parser)\n                .build();\n    }\n\n    private AmazonS3 getS3() {\n        return AmazonS3ClientBuilder.standard()\n                .withCredentials(new ProfileCredentialsProvider(\"aws-profile\"))\n                .withRegion(Regions.US_WEST_2)\n                .build();\n    }\n}\n{% endcodeblock %}\n\n <!-- more -->\n\nRunning above code prints out all the records from the file. Sample output for the file I have used is as below.\n\n``` Heading Input File - S3://my-bucket/input-data/file1.csv\ncol_1,col_2,col_3,col_4\n1,large,2.12,NA\n1,medium,3.13,NA\n```\n\n``` Heading Console Output\n[{col_1=1, col_2=large, col_3=2.12, col_4=NA}, {col_1=1, col_2=medium, col_3=3.13, col_4=NA}]\n```\n\nIf you want to understand the code here is the flowchart of the algorithm.\n\n<img src=\"/assets/svgs/2021/01/read-s3-files-using-opencsv-algorithm.svg\" alt=\"Algorithm of reading s3 csv files using OpenCSV\">\n\nIn this snippet, we have two helper methods `getReader` to help with creation of the reader object that is aware of header row and 'getS3' to help us create an S3 client. Please change the aws credentials profile to the one you are using in your computer. If you configured default profile you can also use `AmazonS3ClientBuilder.defaultClient()` for creating S3 client.\n\nIf you want to create a reader for TSV files instead of CSV you can create a different parser object such as below. You can also use any custom separators while building the parser.\n\n{% codeblock lang:java %}\nCSVParser parser = new CSVParserBuilder().withSeparator('\\t').build();\n{% endcodeblock %}\n\nIn order to use this code, you can create an object of S3CSVReader class and invoke `getS3Records` method by passing the S3 bucket name and key path of the CSV file in S3. This method creates a reader object and iterates through all records to create a List of HashMaps and returns the result.\n\n## Dependencies\n\nAssuming that you are using Maven, you need to add the following dependencies to your pom.xml to add opencsv to your project irrespective of what browser you may use.\n\n{% codeblock lang:xml %}\n<!-- https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-s3 -->\n<dependency>\n    <groupId>com.amazonaws</groupId>\n    <artifactId>aws-java-sdk-s3</artifactId>\n    <version>1.11.939</version>\n</dependency>\n\n<!-- https://mvnrepository.com/artifact/com.opencsv/opencsv -->\n<dependency>\n    <groupId>com.opencsv</groupId>\n    <artifactId>opencsv</artifactId>\n    <version>5.3</version>\n</dependency>\n{% endcodeblock %}\n\nFor understanding how to import dependencies using other build systems, such as gradle go to the corresponding maven artifact pages such as https://mvnrepository.com/artifact/com.opencsv/opencsv and select appropriate tab.dependencies\n\n## Test Code\n\nAssuming that you have configured the aws profile correctly and give the bucket name and s3, the following code should produce an output of all the records.\n\n{% codeblock lang:java %}\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.Test;\nimport com.opencsv.exceptions.CsvValidationException;\n\npublic class S3CSVReaderTest {\n\n    @Test\n    public void simpleTest() throws IOException, CsvValidationException {\n        S3CSVReader reader = new S3CSVReader();\n        List<Map<String, String>> records = reader.getS3Records(\"my-bucket\", \"input-data/input_1.txt\");\n        System.out.println(records);\n    }\n}\n{% endcodeblock %}\n\n\n---\n","source":"_posts/2021/01/reading-csv-files-from-s3-using-opencsv.md","raw":"---\ntitle: How to read S3 CSV files into hashmaps using OpenCSV\ndate: 2021-01-17\ntags: ['java', 's3', 'aws', 'opencsv', 'data', 'files', 'example']\nauthor: Jyothi Prasad Buddha\ndescription: Gives an example of how to use opencsv in java to read csv files as list of hash maps from S3\n---\n\nIn this world where large amounts of data is becoming a norm, it is very frequently stored in S3 in csv format for consumption through serverless database layers such as Athena. However, you often have to read the csv files without using Athena. In such cases, you can use ever useful libraries such as OpenCSV to read csv files.\n\nThis example shows how to use opencsv to quickly read the S3 files without the need to download them first. This helps when you do not have a way to save files locally of if you don't have enough hard disk space. The solution is quite simple. You just have to create an InputStream from an S3 object using getObject method on S3 client. Once the input stream is created, we can use this to create a CSVReader from it.\n<!-- more -->\nAssuming that the CSV files have a header row, you can use CSVReaderHeaderAware class to create a list of hashmaps by reading each record iteratively using readMap method. If readMap method returns null, this means that you have reached end of file. Here is a complete solution for your reference.\n\n{% codeblock lang:java %}\nimport java.io.*;\nimport java.util.*;\n\nimport com.opencsv.*;\nimport com.opencsv.exceptions.CsvValidationException;\n\nimport com.amazonaws.auth.profile.ProfileCredentialsProvider;\nimport com.amazonaws.regions.Regions;\nimport com.amazonaws.services.s3.AmazonS3;\nimport com.amazonaws.services.s3.AmazonS3ClientBuilder;\nimport com.amazonaws.services.s3.model.S3Object;\n\npublic class S3CSVReader {\n\n    public static void main(String... args) throws IOException, CsvValidationException {\n        // Example Usage\n        S3CSVReader reader = new S3CSVReader();\n        List<Map<String, String>> records = reader.getS3Records(\"my-bucket\", \"input-data/file1.csv\");\n        System.out.println(records);\n    }\n\n    public List<Map<String, String>> getS3Records(String bucket, String key) throws IOException, CsvValidationException {\n        List<Map<String, String>> records = new ArrayList<>();\n        try (CSVReaderHeaderAware reader = getReader(bucket, key)) {\n            Map<String, String> values;\n\n            while ((values = reader.readMap()) != null) {\n                records.add(values);\n            }\n            return records;\n        }\n    }\n\n    private CSVReaderHeaderAware getReader(String bucket, String key) {\n        CSVParser parser = new CSVParserBuilder().build();\n        S3Object object = getS3().getObject(bucket, key);\n        var br = new InputStreamReader(object.getObjectContent());\n        return (CSVReaderHeaderAware) new CSVReaderHeaderAwareBuilder(br)\n                .withCSVParser(parser)\n                .build();\n    }\n\n    private AmazonS3 getS3() {\n        return AmazonS3ClientBuilder.standard()\n                .withCredentials(new ProfileCredentialsProvider(\"aws-profile\"))\n                .withRegion(Regions.US_WEST_2)\n                .build();\n    }\n}\n{% endcodeblock %}\n\n <!-- more -->\n\nRunning above code prints out all the records from the file. Sample output for the file I have used is as below.\n\n``` Heading Input File - S3://my-bucket/input-data/file1.csv\ncol_1,col_2,col_3,col_4\n1,large,2.12,NA\n1,medium,3.13,NA\n```\n\n``` Heading Console Output\n[{col_1=1, col_2=large, col_3=2.12, col_4=NA}, {col_1=1, col_2=medium, col_3=3.13, col_4=NA}]\n```\n\nIf you want to understand the code here is the flowchart of the algorithm.\n\n<img src=\"/assets/svgs/2021/01/read-s3-files-using-opencsv-algorithm.svg\" alt=\"Algorithm of reading s3 csv files using OpenCSV\">\n\nIn this snippet, we have two helper methods `getReader` to help with creation of the reader object that is aware of header row and 'getS3' to help us create an S3 client. Please change the aws credentials profile to the one you are using in your computer. If you configured default profile you can also use `AmazonS3ClientBuilder.defaultClient()` for creating S3 client.\n\nIf you want to create a reader for TSV files instead of CSV you can create a different parser object such as below. You can also use any custom separators while building the parser.\n\n{% codeblock lang:java %}\nCSVParser parser = new CSVParserBuilder().withSeparator('\\t').build();\n{% endcodeblock %}\n\nIn order to use this code, you can create an object of S3CSVReader class and invoke `getS3Records` method by passing the S3 bucket name and key path of the CSV file in S3. This method creates a reader object and iterates through all records to create a List of HashMaps and returns the result.\n\n## Dependencies\n\nAssuming that you are using Maven, you need to add the following dependencies to your pom.xml to add opencsv to your project irrespective of what browser you may use.\n\n{% codeblock lang:xml %}\n<!-- https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-s3 -->\n<dependency>\n    <groupId>com.amazonaws</groupId>\n    <artifactId>aws-java-sdk-s3</artifactId>\n    <version>1.11.939</version>\n</dependency>\n\n<!-- https://mvnrepository.com/artifact/com.opencsv/opencsv -->\n<dependency>\n    <groupId>com.opencsv</groupId>\n    <artifactId>opencsv</artifactId>\n    <version>5.3</version>\n</dependency>\n{% endcodeblock %}\n\nFor understanding how to import dependencies using other build systems, such as gradle go to the corresponding maven artifact pages such as https://mvnrepository.com/artifact/com.opencsv/opencsv and select appropriate tab.dependencies\n\n## Test Code\n\nAssuming that you have configured the aws profile correctly and give the bucket name and s3, the following code should produce an output of all the records.\n\n{% codeblock lang:java %}\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.Test;\nimport com.opencsv.exceptions.CsvValidationException;\n\npublic class S3CSVReaderTest {\n\n    @Test\n    public void simpleTest() throws IOException, CsvValidationException {\n        S3CSVReader reader = new S3CSVReader();\n        List<Map<String, String>> records = reader.getS3Records(\"my-bucket\", \"input-data/input_1.txt\");\n        System.out.println(records);\n    }\n}\n{% endcodeblock %}\n\n\n---\n","slug":"2021/01/reading-csv-files-from-s3-using-opencsv","published":1,"updated":"2021-01-16T18:30:00.000Z","_id":"ckki0ed34000onbs61lza3sya","comments":1,"layout":"post","photos":[],"link":"","content":"<p>In this world where large amounts of data is becoming a norm, it is very frequently stored in S3 in csv format for consumption through serverless database layers such as Athena. However, you often have to read the csv files without using Athena. In such cases, you can use ever useful libraries such as OpenCSV to read csv files.</p>\n<p>This example shows how to use opencsv to quickly read the S3 files without the need to download them first. This helps when you do not have a way to save files locally of if you don’t have enough hard disk space. The solution is quite simple. You just have to create an InputStream from an S3 object using getObject method on S3 client. Once the input stream is created, we can use this to create a CSVReader from it.</p>\n<a id=\"more\"></a>\n<p>Assuming that the CSV files have a header row, you can use CSVReaderHeaderAware class to create a list of hashmaps by reading each record iteratively using readMap method. If readMap method returns null, this means that you have reached end of file. Here is a complete solution for your reference.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.opencsv.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.opencsv.exceptions.CsvValidationException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.auth.profile.ProfileCredentialsProvider;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.regions.Regions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.services.s3.AmazonS3;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.services.s3.AmazonS3ClientBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.services.s3.model.S3Object;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S3CSVReader</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> IOException, CsvValidationException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Example Usage</span></span><br><span class=\"line\">        S3CSVReader reader = <span class=\"keyword\">new</span> S3CSVReader();</span><br><span class=\"line\">        List&lt;Map&lt;String, String&gt;&gt; records = reader.getS3Records(<span class=\"string\">&quot;my-bucket&quot;</span>, <span class=\"string\">&quot;input-data/file1.csv&quot;</span>);</span><br><span class=\"line\">        System.out.println(records);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Map&lt;String, String&gt;&gt; getS3Records(String bucket, String key) <span class=\"keyword\">throws</span> IOException, CsvValidationException &#123;</span><br><span class=\"line\">        List&lt;Map&lt;String, String&gt;&gt; records = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (CSVReaderHeaderAware reader = getReader(bucket, key)) &#123;</span><br><span class=\"line\">            Map&lt;String, String&gt; values;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((values = reader.readMap()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                records.add(values);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> records;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> CSVReaderHeaderAware <span class=\"title\">getReader</span><span class=\"params\">(String bucket, String key)</span> </span>&#123;</span><br><span class=\"line\">        CSVParser parser = <span class=\"keyword\">new</span> CSVParserBuilder().build();</span><br><span class=\"line\">        S3Object object = getS3().getObject(bucket, key);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> br = <span class=\"keyword\">new</span> InputStreamReader(object.getObjectContent());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (CSVReaderHeaderAware) <span class=\"keyword\">new</span> CSVReaderHeaderAwareBuilder(br)</span><br><span class=\"line\">                .withCSVParser(parser)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> AmazonS3 <span class=\"title\">getS3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> AmazonS3ClientBuilder.standard()</span><br><span class=\"line\">                .withCredentials(<span class=\"keyword\">new</span> ProfileCredentialsProvider(<span class=\"string\">&quot;aws-profile&quot;</span>))</span><br><span class=\"line\">                .withRegion(Regions.US_WEST_2)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n <!-- more -->\n\n<p>Running above code prints out all the records from the file. Sample output for the file I have used is as below.</p>\n<figure class=\"highlight plain\"><figcaption><span>Input File - S3://my-bucket/input-data/file1.csv</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">col_1,col_2,col_3,col_4</span><br><span class=\"line\">1,large,2.12,NA</span><br><span class=\"line\">1,medium,3.13,NA</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><figcaption><span>Console Output</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;col_1&#x3D;1, col_2&#x3D;large, col_3&#x3D;2.12, col_4&#x3D;NA&#125;, &#123;col_1&#x3D;1, col_2&#x3D;medium, col_3&#x3D;3.13, col_4&#x3D;NA&#125;]</span><br></pre></td></tr></table></figure>\n<p>If you want to understand the code here is the flowchart of the algorithm.</p>\n<img data-src=\"/assets/svgs/2021/01/read-s3-files-using-opencsv-algorithm.svg\" alt=\"Algorithm of reading s3 csv files using OpenCSV\">\n\n<p>In this snippet, we have two helper methods <code>getReader</code> to help with creation of the reader object that is aware of header row and ‘getS3’ to help us create an S3 client. Please change the aws credentials profile to the one you are using in your computer. If you configured default profile you can also use <code>AmazonS3ClientBuilder.defaultClient()</code> for creating S3 client.</p>\n<p>If you want to create a reader for TSV files instead of CSV you can create a different parser object such as below. You can also use any custom separators while building the parser.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CSVParser parser = <span class=\"keyword\">new</span> CSVParserBuilder().withSeparator(<span class=\"string\">&#x27;\\t&#x27;</span>).build();</span><br></pre></td></tr></table></figure>\n\n<p>In order to use this code, you can create an object of S3CSVReader class and invoke <code>getS3Records</code> method by passing the S3 bucket name and key path of the CSV file in S3. This method creates a reader object and iterates through all records to create a List of HashMaps and returns the result.</p>\n<h2 id=\"Dependencies\"><a href=\"#Dependencies\" class=\"headerlink\" title=\"Dependencies\"></a>Dependencies</h2><p>Assuming that you are using Maven, you need to add the following dependencies to your pom.xml to add opencsv to your project irrespective of what browser you may use.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-s3 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.amazonaws<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aws-java-sdk-s3<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.11.939<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.opencsv/opencsv --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.opencsv<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>opencsv<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>For understanding how to import dependencies using other build systems, such as gradle go to the corresponding maven artifact pages such as <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tdm5yZXBvc2l0b3J5LmNvbS9hcnRpZmFjdC9jb20ub3BlbmNzdi9vcGVuY3N2\">https://mvnrepository.com/artifact/com.opencsv/opencsv<i class=\"fa fa-external-link-alt\"></i></span> and select appropriate tab.dependencies</p>\n<h2 id=\"Test-Code\"><a href=\"#Test-Code\" class=\"headerlink\" title=\"Test Code\"></a>Test Code</h2><p>Assuming that you have configured the aws profile correctly and give the bucket name and s3, the following code should produce an output of all the records.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.opencsv.exceptions.CsvValidationException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S3CSVReaderTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">simpleTest</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, CsvValidationException </span>&#123;</span><br><span class=\"line\">        S3CSVReader reader = <span class=\"keyword\">new</span> S3CSVReader();</span><br><span class=\"line\">        List&lt;Map&lt;String, String&gt;&gt; records = reader.getS3Records(<span class=\"string\">&quot;my-bucket&quot;</span>, <span class=\"string\">&quot;input-data/input_1.txt&quot;</span>);</span><br><span class=\"line\">        System.out.println(records);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n","site":{"data":{"head":""}},"excerpt":"<p>In this world where large amounts of data is becoming a norm, it is very frequently stored in S3 in csv format for consumption through serverless database layers such as Athena. However, you often have to read the csv files without using Athena. In such cases, you can use ever useful libraries such as OpenCSV to read csv files.</p>\n<p>This example shows how to use opencsv to quickly read the S3 files without the need to download them first. This helps when you do not have a way to save files locally of if you don’t have enough hard disk space. The solution is quite simple. You just have to create an InputStream from an S3 object using getObject method on S3 client. Once the input stream is created, we can use this to create a CSVReader from it.</p>","more":"<p>Assuming that the CSV files have a header row, you can use CSVReaderHeaderAware class to create a list of hashmaps by reading each record iteratively using readMap method. If readMap method returns null, this means that you have reached end of file. Here is a complete solution for your reference.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.opencsv.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.opencsv.exceptions.CsvValidationException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.auth.profile.ProfileCredentialsProvider;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.regions.Regions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.services.s3.AmazonS3;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.services.s3.AmazonS3ClientBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.services.s3.model.S3Object;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S3CSVReader</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> IOException, CsvValidationException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Example Usage</span></span><br><span class=\"line\">        S3CSVReader reader = <span class=\"keyword\">new</span> S3CSVReader();</span><br><span class=\"line\">        List&lt;Map&lt;String, String&gt;&gt; records = reader.getS3Records(<span class=\"string\">&quot;my-bucket&quot;</span>, <span class=\"string\">&quot;input-data/file1.csv&quot;</span>);</span><br><span class=\"line\">        System.out.println(records);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Map&lt;String, String&gt;&gt; getS3Records(String bucket, String key) <span class=\"keyword\">throws</span> IOException, CsvValidationException &#123;</span><br><span class=\"line\">        List&lt;Map&lt;String, String&gt;&gt; records = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (CSVReaderHeaderAware reader = getReader(bucket, key)) &#123;</span><br><span class=\"line\">            Map&lt;String, String&gt; values;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((values = reader.readMap()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                records.add(values);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> records;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> CSVReaderHeaderAware <span class=\"title\">getReader</span><span class=\"params\">(String bucket, String key)</span> </span>&#123;</span><br><span class=\"line\">        CSVParser parser = <span class=\"keyword\">new</span> CSVParserBuilder().build();</span><br><span class=\"line\">        S3Object object = getS3().getObject(bucket, key);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> br = <span class=\"keyword\">new</span> InputStreamReader(object.getObjectContent());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (CSVReaderHeaderAware) <span class=\"keyword\">new</span> CSVReaderHeaderAwareBuilder(br)</span><br><span class=\"line\">                .withCSVParser(parser)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> AmazonS3 <span class=\"title\">getS3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> AmazonS3ClientBuilder.standard()</span><br><span class=\"line\">                .withCredentials(<span class=\"keyword\">new</span> ProfileCredentialsProvider(<span class=\"string\">&quot;aws-profile&quot;</span>))</span><br><span class=\"line\">                .withRegion(Regions.US_WEST_2)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n <!-- more -->\n\n<p>Running above code prints out all the records from the file. Sample output for the file I have used is as below.</p>\n<figure class=\"highlight plain\"><figcaption><span>Input File - S3://my-bucket/input-data/file1.csv</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">col_1,col_2,col_3,col_4</span><br><span class=\"line\">1,large,2.12,NA</span><br><span class=\"line\">1,medium,3.13,NA</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><figcaption><span>Console Output</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;col_1&#x3D;1, col_2&#x3D;large, col_3&#x3D;2.12, col_4&#x3D;NA&#125;, &#123;col_1&#x3D;1, col_2&#x3D;medium, col_3&#x3D;3.13, col_4&#x3D;NA&#125;]</span><br></pre></td></tr></table></figure>\n<p>If you want to understand the code here is the flowchart of the algorithm.</p>\n<img src=\"/assets/svgs/2021/01/read-s3-files-using-opencsv-algorithm.svg\" alt=\"Algorithm of reading s3 csv files using OpenCSV\">\n\n<p>In this snippet, we have two helper methods <code>getReader</code> to help with creation of the reader object that is aware of header row and ‘getS3’ to help us create an S3 client. Please change the aws credentials profile to the one you are using in your computer. If you configured default profile you can also use <code>AmazonS3ClientBuilder.defaultClient()</code> for creating S3 client.</p>\n<p>If you want to create a reader for TSV files instead of CSV you can create a different parser object such as below. You can also use any custom separators while building the parser.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CSVParser parser = <span class=\"keyword\">new</span> CSVParserBuilder().withSeparator(<span class=\"string\">&#x27;\\t&#x27;</span>).build();</span><br></pre></td></tr></table></figure>\n\n<p>In order to use this code, you can create an object of S3CSVReader class and invoke <code>getS3Records</code> method by passing the S3 bucket name and key path of the CSV file in S3. This method creates a reader object and iterates through all records to create a List of HashMaps and returns the result.</p>\n<h2 id=\"Dependencies\"><a href=\"#Dependencies\" class=\"headerlink\" title=\"Dependencies\"></a>Dependencies</h2><p>Assuming that you are using Maven, you need to add the following dependencies to your pom.xml to add opencsv to your project irrespective of what browser you may use.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-s3 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.amazonaws<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aws-java-sdk-s3<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.11.939<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.opencsv/opencsv --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.opencsv<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>opencsv<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>For understanding how to import dependencies using other build systems, such as gradle go to the corresponding maven artifact pages such as <a href=\"https://mvnrepository.com/artifact/com.opencsv/opencsv\">https://mvnrepository.com/artifact/com.opencsv/opencsv</a> and select appropriate tab.dependencies</p>\n<h2 id=\"Test-Code\"><a href=\"#Test-Code\" class=\"headerlink\" title=\"Test Code\"></a>Test Code</h2><p>Assuming that you have configured the aws profile correctly and give the bucket name and s3, the following code should produce an output of all the records.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.opencsv.exceptions.CsvValidationException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S3CSVReaderTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">simpleTest</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, CsvValidationException </span>&#123;</span><br><span class=\"line\">        S3CSVReader reader = <span class=\"keyword\">new</span> S3CSVReader();</span><br><span class=\"line\">        List&lt;Map&lt;String, String&gt;&gt; records = reader.getS3Records(<span class=\"string\">&quot;my-bucket&quot;</span>, <span class=\"string\">&quot;input-data/input_1.txt&quot;</span>);</span><br><span class=\"line\">        System.out.println(records);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<hr>","popularPost_tmp_postPath":true,"eyeCatchImage":"/assets/svgs/2021/01/read-s3-files-using-opencsv-algorithm.svg","popularPost_tmp_gaData":{"updated":"Sat Jan 16 2021 10:30:00 GMT-0800 (Pacific Standard Time)","title":"How to read S3 CSV files into hashmaps using OpenCSV","path":"2021/01/reading-csv-files-from-s3-using-opencsv/","eyeCatchImage":"/assets/svgs/2021/01/read-s3-files-using-opencsv-algorithm.svg","excerpt":"Gives an example of how to use opencsv in java to read csv files as list of hash maps from S3","date":{"_isAMomentObject":true,"_i":"2021-01-16T18:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-01-16T18:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["java","aws","s3","opencsv","data","files","example"],"internalLinks":[],"keywords":[],"keywordsLength":0}}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckki0ed2n0001nbs6da9191lc","tag_id":"ckki0ed2s0004nbs6808ufn1i","_id":"ckki0ed36000qnbs65ilpb61z"},{"post_id":"ckki0ed2n0001nbs6da9191lc","tag_id":"ckki0ed2v0009nbs6anqjaotu","_id":"ckki0ed36000rnbs64jx9caeu"},{"post_id":"ckki0ed2n0001nbs6da9191lc","tag_id":"ckki0ed2x000cnbs6bopka2lt","_id":"ckki0ed37000tnbs617j464jj"},{"post_id":"ckki0ed2n0001nbs6da9191lc","tag_id":"ckki0ed2y000fnbs60xnefjr9","_id":"ckki0ed37000unbs6fvjf6lqm"},{"post_id":"ckki0ed2n0001nbs6da9191lc","tag_id":"ckki0ed2z000inbs6d6g967xa","_id":"ckki0ed37000wnbs640bmdhse"},{"post_id":"ckki0ed2n0001nbs6da9191lc","tag_id":"ckki0ed33000mnbs63v86bmt0","_id":"ckki0ed37000xnbs67483erlw"},{"post_id":"ckki0ed2r0003nbs6862u29f4","tag_id":"ckki0ed36000pnbs68rb38n8i","_id":"ckki0ed380010nbs6gk2aboe5"},{"post_id":"ckki0ed2r0003nbs6862u29f4","tag_id":"ckki0ed37000snbs626vj9g9a","_id":"ckki0ed380011nbs6auv03uwn"},{"post_id":"ckki0ed2r0003nbs6862u29f4","tag_id":"ckki0ed37000vnbs6cgd3eqbq","_id":"ckki0ed380013nbs6bkc44z5v"},{"post_id":"ckki0ed2r0003nbs6862u29f4","tag_id":"ckki0ed37000ynbs6gz6v06b5","_id":"ckki0ed380014nbs68cloae8b"},{"post_id":"ckki0ed2t0006nbs67dikg00m","tag_id":"ckki0ed37000znbs68ox52yh1","_id":"ckki0ed380017nbs6b9s51qmb"},{"post_id":"ckki0ed2t0006nbs67dikg00m","tag_id":"ckki0ed380012nbs68zcr1xao","_id":"ckki0ed380018nbs67gox206d"},{"post_id":"ckki0ed2t0006nbs67dikg00m","tag_id":"ckki0ed380015nbs60y9s280w","_id":"ckki0ed39001anbs67v66g44l"},{"post_id":"ckki0ed2u0007nbs68unacytn","tag_id":"ckki0ed380016nbs6h77tfrhc","_id":"ckki0ed3b001fnbs618tteuo1"},{"post_id":"ckki0ed2u0007nbs68unacytn","tag_id":"ckki0ed380019nbs606qs07ed","_id":"ckki0ed3b001gnbs6fnxld0db"},{"post_id":"ckki0ed2u0007nbs68unacytn","tag_id":"ckki0ed2s0004nbs6808ufn1i","_id":"ckki0ed3b001inbs6fbht1r6a"},{"post_id":"ckki0ed2u0007nbs68unacytn","tag_id":"ckki0ed39001bnbs65xele2c7","_id":"ckki0ed3b001jnbs64m170fji"},{"post_id":"ckki0ed2u0007nbs68unacytn","tag_id":"ckki0ed39001cnbs6e4ha8xen","_id":"ckki0ed3c001lnbs6csik5nd3"},{"post_id":"ckki0ed2u0007nbs68unacytn","tag_id":"ckki0ed39001dnbs678tl7ek9","_id":"ckki0ed3c001mnbs6591j778l"},{"post_id":"ckki0ed2u0008nbs66qpb0ny1","tag_id":"ckki0ed36000pnbs68rb38n8i","_id":"ckki0ed3c001onbs6f12c6dez"},{"post_id":"ckki0ed2u0008nbs66qpb0ny1","tag_id":"ckki0ed2s0004nbs6808ufn1i","_id":"ckki0ed3c001pnbs6gfvb00y8"},{"post_id":"ckki0ed2u0008nbs66qpb0ny1","tag_id":"ckki0ed37000vnbs6cgd3eqbq","_id":"ckki0ed3d001rnbs6flp27wjn"},{"post_id":"ckki0ed2v000anbs6hcp6bp0k","tag_id":"ckki0ed2s0004nbs6808ufn1i","_id":"ckki0ed3e001unbs662zj2k8j"},{"post_id":"ckki0ed2v000anbs6hcp6bp0k","tag_id":"ckki0ed2v0009nbs6anqjaotu","_id":"ckki0ed3e001vnbs6e9ovbyx4"},{"post_id":"ckki0ed2v000anbs6hcp6bp0k","tag_id":"ckki0ed2x000cnbs6bopka2lt","_id":"ckki0ed3e001xnbs6ep0q8bns"},{"post_id":"ckki0ed2v000anbs6hcp6bp0k","tag_id":"ckki0ed2y000fnbs60xnefjr9","_id":"ckki0ed3e001ynbs61hy5htnk"},{"post_id":"ckki0ed2v000anbs6hcp6bp0k","tag_id":"ckki0ed2z000inbs6d6g967xa","_id":"ckki0ed3e0020nbs62xjt8nkg"},{"post_id":"ckki0ed2v000anbs6hcp6bp0k","tag_id":"ckki0ed33000mnbs63v86bmt0","_id":"ckki0ed3f0021nbs6d8bxbknz"},{"post_id":"ckki0ed2w000bnbs6gn1eby8u","tag_id":"ckki0ed3d001tnbs60yss580m","_id":"ckki0ed3f0023nbs61th50ct8"},{"post_id":"ckki0ed2w000bnbs6gn1eby8u","tag_id":"ckki0ed3e001wnbs6030hgak5","_id":"ckki0ed3f0024nbs6ak68gqov"},{"post_id":"ckki0ed2w000bnbs6gn1eby8u","tag_id":"ckki0ed3e001znbs6hukv4f44","_id":"ckki0ed3f0026nbs691rb6x43"},{"post_id":"ckki0ed2w000bnbs6gn1eby8u","tag_id":"ckki0ed2s0004nbs6808ufn1i","_id":"ckki0ed3f0027nbs68b6g9pye"},{"post_id":"ckki0ed2x000dnbs67uyj3ily","tag_id":"ckki0ed37000znbs68ox52yh1","_id":"ckki0ed3g002dnbs6245a3suf"},{"post_id":"ckki0ed2x000dnbs67uyj3ily","tag_id":"ckki0ed380012nbs68zcr1xao","_id":"ckki0ed3h002enbs6amuehk69"},{"post_id":"ckki0ed2x000dnbs67uyj3ily","tag_id":"ckki0ed380015nbs60y9s280w","_id":"ckki0ed3h002gnbs6dlfcc5jv"},{"post_id":"ckki0ed2x000dnbs67uyj3ily","tag_id":"ckki0ed3g0029nbs68aw256j2","_id":"ckki0ed3h002hnbs6grg435w6"},{"post_id":"ckki0ed2x000dnbs67uyj3ily","tag_id":"ckki0ed3g002anbs6bg3ddsvs","_id":"ckki0ed3h002jnbs63m5e14qy"},{"post_id":"ckki0ed2x000dnbs67uyj3ily","tag_id":"ckki0ed3g002bnbs6atqq3qtf","_id":"ckki0ed3i002knbs68rur0k0d"},{"post_id":"ckki0ed2x000enbs61dyx43a7","tag_id":"ckki0ed3g002cnbs608uugp0u","_id":"ckki0ed3i002mnbs6eu5oc831"},{"post_id":"ckki0ed2x000enbs61dyx43a7","tag_id":"ckki0ed2x000cnbs6bopka2lt","_id":"ckki0ed3i002nnbs6b4yreuph"},{"post_id":"ckki0ed2y000gnbs631489jjo","tag_id":"ckki0ed2s0004nbs6808ufn1i","_id":"ckki0ed3i002pnbs6bmj661n5"},{"post_id":"ckki0ed2y000gnbs631489jjo","tag_id":"ckki0ed2v0009nbs6anqjaotu","_id":"ckki0ed3i002qnbs61b7p3pk8"},{"post_id":"ckki0ed2y000gnbs631489jjo","tag_id":"ckki0ed2x000cnbs6bopka2lt","_id":"ckki0ed3i002snbs6br2841yl"},{"post_id":"ckki0ed2y000gnbs631489jjo","tag_id":"ckki0ed2y000fnbs60xnefjr9","_id":"ckki0ed3j002tnbs6cn3ihlh1"},{"post_id":"ckki0ed2y000gnbs631489jjo","tag_id":"ckki0ed2z000inbs6d6g967xa","_id":"ckki0ed3j002unbs6enpd2rae"},{"post_id":"ckki0ed2y000gnbs631489jjo","tag_id":"ckki0ed33000mnbs63v86bmt0","_id":"ckki0ed3j002wnbs60o7rdzwc"},{"post_id":"ckki0ed2z000hnbs6h4phds6q","tag_id":"ckki0ed2s0004nbs6808ufn1i","_id":"ckki0ed3j002ynbs6489zf4uh"},{"post_id":"ckki0ed2z000hnbs6h4phds6q","tag_id":"ckki0ed3i002lnbs61yp39s6u","_id":"ckki0ed3j002znbs694fmbibh"},{"post_id":"ckki0ed2z000hnbs6h4phds6q","tag_id":"ckki0ed3i002onbs6fekrecwx","_id":"ckki0ed3k0031nbs6baf39gdm"},{"post_id":"ckki0ed2z000hnbs6h4phds6q","tag_id":"ckki0ed3i002rnbs68i4g7cj1","_id":"ckki0ed3k0032nbs6ct995h07"},{"post_id":"ckki0ed2z000hnbs6h4phds6q","tag_id":"ckki0ed3j002vnbs6f8ph0p5h","_id":"ckki0ed3k0034nbs6f6tq1zwz"},{"post_id":"ckki0ed2z000jnbs6grrp19r9","tag_id":"ckki0ed3i002onbs6fekrecwx","_id":"ckki0ed3m003cnbs69tf0cslk"},{"post_id":"ckki0ed2z000jnbs6grrp19r9","tag_id":"ckki0ed3j0030nbs66h5fbe2l","_id":"ckki0ed3m003dnbs6bj1g8sa9"},{"post_id":"ckki0ed2z000jnbs6grrp19r9","tag_id":"ckki0ed3k0033nbs63ugefo5m","_id":"ckki0ed3n003fnbs6hp8pah65"},{"post_id":"ckki0ed2z000jnbs6grrp19r9","tag_id":"ckki0ed3k0035nbs60ub2hou6","_id":"ckki0ed3n003gnbs65ysi1cbq"},{"post_id":"ckki0ed2z000jnbs6grrp19r9","tag_id":"ckki0ed3k0036nbs68kc7e4vq","_id":"ckki0ed3p003inbs64bjzc3c7"},{"post_id":"ckki0ed2z000jnbs6grrp19r9","tag_id":"ckki0ed3k0037nbs61cwf13kp","_id":"ckki0ed3p003jnbs68lyu5c4c"},{"post_id":"ckki0ed2z000jnbs6grrp19r9","tag_id":"ckki0ed3l0038nbs6g6o59953","_id":"ckki0ed3p003lnbs66ifr99wr"},{"post_id":"ckki0ed2z000jnbs6grrp19r9","tag_id":"ckki0ed3l0039nbs6az8u55j6","_id":"ckki0ed3q003mnbs6exgv76nl"},{"post_id":"ckki0ed2z000jnbs6grrp19r9","tag_id":"ckki0ed3l003anbs6cjx4752p","_id":"ckki0ed3q003onbs6hip6e2oh"},{"post_id":"ckki0ed30000knbs6dm1v975s","tag_id":"ckki0ed2s0004nbs6808ufn1i","_id":"ckki0ed3q003pnbs6dgathymv"},{"post_id":"ckki0ed30000knbs6dm1v975s","tag_id":"ckki0ed2v0009nbs6anqjaotu","_id":"ckki0ed3q003rnbs6gp17enmh"},{"post_id":"ckki0ed30000knbs6dm1v975s","tag_id":"ckki0ed2x000cnbs6bopka2lt","_id":"ckki0ed3q003snbs6dl6nfdkj"},{"post_id":"ckki0ed30000knbs6dm1v975s","tag_id":"ckki0ed2y000fnbs60xnefjr9","_id":"ckki0ed3r003unbs65rfz389n"},{"post_id":"ckki0ed30000knbs6dm1v975s","tag_id":"ckki0ed2z000inbs6d6g967xa","_id":"ckki0ed3r003vnbs67gsk91pl"},{"post_id":"ckki0ed30000knbs6dm1v975s","tag_id":"ckki0ed33000mnbs63v86bmt0","_id":"ckki0ed3r003wnbs6dtfbe6h9"},{"post_id":"ckki0ed32000lnbs65qd7667s","tag_id":"ckki0ed380012nbs68zcr1xao","_id":"ckki0ed3r003ynbs665or6b9s"},{"post_id":"ckki0ed33000nnbs633k5cqh1","tag_id":"ckki0ed2s0004nbs6808ufn1i","_id":"ckki0ed3s0040nbs60x676o4e"},{"post_id":"ckki0ed33000nnbs633k5cqh1","tag_id":"ckki0ed3n003hnbs66msg400g","_id":"ckki0ed3s0041nbs62ypm1avf"},{"post_id":"ckki0ed33000nnbs633k5cqh1","tag_id":"ckki0ed3i002onbs6fekrecwx","_id":"ckki0ed3s0043nbs6ew694e7h"},{"post_id":"ckki0ed33000nnbs633k5cqh1","tag_id":"ckki0ed3q003nnbs6c2ga25qn","_id":"ckki0ed3s0044nbs65wtt3pt3"},{"post_id":"ckki0ed33000nnbs633k5cqh1","tag_id":"ckki0ed3q003qnbs6gddqhfyz","_id":"ckki0ed3t0046nbs6695bcjm5"},{"post_id":"ckki0ed33000nnbs633k5cqh1","tag_id":"ckki0ed3q003tnbs6ag478r3g","_id":"ckki0ed3t0047nbs65u3c35ta"},{"post_id":"ckki0ed33000nnbs633k5cqh1","tag_id":"ckki0ed3r003xnbs66fkx3st6","_id":"ckki0ed3t0049nbs69n3g4jwa"},{"post_id":"ckki0ed34000onbs61lza3sya","tag_id":"ckki0ed2s0004nbs6808ufn1i","_id":"ckki0ed3u004cnbs6foai8yc9"},{"post_id":"ckki0ed34000onbs61lza3sya","tag_id":"ckki0ed3n003hnbs66msg400g","_id":"ckki0ed3u004dnbs683o78evj"},{"post_id":"ckki0ed34000onbs61lza3sya","tag_id":"ckki0ed3i002onbs6fekrecwx","_id":"ckki0ed3u004enbs6c014darp"},{"post_id":"ckki0ed34000onbs61lza3sya","tag_id":"ckki0ed3q003nnbs6c2ga25qn","_id":"ckki0ed3u004fnbs6cnacf726"},{"post_id":"ckki0ed34000onbs61lza3sya","tag_id":"ckki0ed3q003qnbs6gddqhfyz","_id":"ckki0ed3u004gnbs6ca0t9fz7"},{"post_id":"ckki0ed34000onbs61lza3sya","tag_id":"ckki0ed3q003tnbs6ag478r3g","_id":"ckki0ed3u004hnbs691rb87iu"},{"post_id":"ckki0ed34000onbs61lza3sya","tag_id":"ckki0ed3r003xnbs66fkx3st6","_id":"ckki0ed3u004inbs6gpgfduo0"}],"Tag":[{"name":"java","_id":"ckki0ed2s0004nbs6808ufn1i"},{"name":"algorithms","_id":"ckki0ed2v0009nbs6anqjaotu"},{"name":"data-structures","_id":"ckki0ed2x000cnbs6bopka2lt"},{"name":"problem","_id":"ckki0ed2y000fnbs60xnefjr9"},{"name":"interview-question","_id":"ckki0ed2z000inbs6d6g967xa"},{"name":"binary-tree","_id":"ckki0ed33000mnbs63v86bmt0"},{"name":"atg","_id":"ckki0ed36000pnbs68rb38n8i"},{"name":"configuration","_id":"ckki0ed37000snbs626vj9g9a"},{"name":"oraclecommerce","_id":"ckki0ed37000vnbs6cgd3eqbq"},{"name":"hack","_id":"ckki0ed37000ynbs6gz6v06b5"},{"name":"oraclejet","_id":"ckki0ed37000znbs68ox52yh1"},{"name":"javascript","_id":"ckki0ed380012nbs68zcr1xao"},{"name":"html","_id":"ckki0ed380015nbs60y9s280w"},{"name":"problems","_id":"ckki0ed380016nbs6h77tfrhc"},{"name":"codejam","_id":"ckki0ed380019nbs606qs07ed"},{"name":"puzzle","_id":"ckki0ed39001bnbs65xele2c7"},{"name":"competition","_id":"ckki0ed39001cnbs6e4ha8xen"},{"name":"solution","_id":"ckki0ed39001dnbs678tl7ek9"},{"name":"javafx","_id":"ckki0ed3d001tnbs60yss580m"},{"name":"opensource","_id":"ckki0ed3e001wnbs6030hgak5"},{"name":"perforce","_id":"ckki0ed3e001znbs6hukv4f44"},{"name":"knockoutjs","_id":"ckki0ed3g0029nbs68aw256j2"},{"name":"jquery","_id":"ckki0ed3g002anbs6bg3ddsvs"},{"name":"css","_id":"ckki0ed3g002bnbs6atqq3qtf"},{"name":"information","_id":"ckki0ed3g002cnbs608uugp0u"},{"name":"alexa","_id":"ckki0ed3i002lnbs61yp39s6u"},{"name":"aws","_id":"ckki0ed3i002onbs6fekrecwx"},{"name":"dynamodb","_id":"ckki0ed3i002rnbs68i4g7cj1"},{"name":"ask","_id":"ckki0ed3j002vnbs6f8ph0p5h"},{"name":"book","_id":"ckki0ed3j0030nbs66h5fbe2l"},{"name":"published","_id":"ckki0ed3k0033nbs63ugefo5m"},{"name":"apress","_id":"ckki0ed3k0035nbs60ub2hou6"},{"name":"amazon","_id":"ckki0ed3k0036nbs68kc7e4vq"},{"name":"sqs","_id":"ckki0ed3k0037nbs61cwf13kp"},{"name":"sns","_id":"ckki0ed3l0038nbs6g6o59953"},{"name":"swf","_id":"ckki0ed3l0039nbs6az8u55j6"},{"name":"step-functions","_id":"ckki0ed3l003anbs6cjx4752p"},{"name":"s3","_id":"ckki0ed3n003hnbs66msg400g"},{"name":"opencsv","_id":"ckki0ed3q003nnbs6c2ga25qn"},{"name":"data","_id":"ckki0ed3q003qnbs6gddqhfyz"},{"name":"files","_id":"ckki0ed3q003tnbs6ag478r3g"},{"name":"example","_id":"ckki0ed3r003xnbs66fkx3st6"}]}}